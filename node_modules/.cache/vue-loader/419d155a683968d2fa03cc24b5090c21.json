{"remainingRequest":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer(new)\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer(new)\\src\\views\\pages\\attendance\\list-attendance-employee.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer(new)\\src\\views\\pages\\attendance\\list-attendance-employee.vue","mtime":1644413760430},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer(new)\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer(new)\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer(new)\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer(new)\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport moment from \"moment\";\r\nimport Affix from \"@/components/Affix\";\r\nimport {\r\n    mapGetters,\r\n    mapActions\r\n} from \"vuex\";\r\nimport * as getter from \"../../../store/getters-types\";\r\nimport * as action from \"../../../store/action-types\";\r\nimport * as mutation from '../../../store/mutation-types'\r\nimport swal from 'sweetalert2'\r\n\r\nexport default {\r\n    name: \"Attendance\",\r\n    data() {\r\n        return {\r\n            dialogVisible: false,\r\n            currentPage: 1,\r\n            input: \"\",\r\n            affixEnabled: true,\r\n            indexT: \"\",\r\n            userid: null,\r\n            date: null,\r\n            radio: null,\r\n            month: null,\r\n            tableData: null,\r\n            totalData: null,\r\n            mapMark: null,\r\n            markers: [],\r\n            mapLine: null,\r\n            path: [],\r\n            markDefault: {\r\n                lat: -6.21462,\r\n                lng: 106.84513\r\n            },\r\n            resultTrack: null,\r\n            image_url: null,\r\n            info_marker: null,\r\n            infowindow: {\r\n                lat: 0,\r\n                lng: 0,\r\n                name: null,\r\n            },\r\n            orangeIcon: require(\"@/assets/images/orange-dot.png\"),\r\n            redIcon: require(\"@/assets/images/red-dot.png\"),\r\n            blueDot: require(\"@/assets/images/blue-dot.png\"),\r\n            window_open: false\r\n        };\r\n    },\r\n    components: {\r\n        Affix\r\n    },\r\n    computed: {\r\n        ...mapGetters({\r\n            listData: getter.GET_LIST_ATT,\r\n            paginate: getter.GET_PAGINATE_ATT,\r\n            dropDown: getter.GET_DROPDOWN_EMPLOYEE,\r\n            filterAttendance: getter.GET_FILTER_ATT,\r\n            attTotal: getter.GET_ATT_TOTAL,\r\n            filterTotal: getter.GET_FILTER_TOTAL,\r\n            button: getter.GET_BUTTON,\r\n            loading: getter.GET_LOADING,\r\n            attendance: getter.GET_TRACKING_ATTENDANCE\r\n        }),\r\n        paginator() {\r\n            return this.paginate;\r\n        },\r\n        indexTam() {\r\n            return this.indexT;\r\n        },\r\n        disableRadio1() {\r\n            if (this.radio == 2) {\r\n                return true;\r\n            } else if (this.radio == 1) {\r\n                return false;\r\n            } else {\r\n                return true;\r\n            }\r\n        },\r\n        disableRadio2() {\r\n            if (this.radio == 1) {\r\n                return true;\r\n            } else if (this.radio == 2) {\r\n                return false;\r\n            } else {\r\n                return true;\r\n            }\r\n        },\r\n        dateExport() {\r\n            if (this.date) {\r\n                const foo = {\r\n                    startdate: this.date[0],\r\n                    duedate: this.date[1],\r\n                }\r\n                return foo\r\n\r\n            } else if (this.month == 99) {\r\n                const foo = {\r\n                    startdate: this.forToday,\r\n                    duedate: this.forToday,\r\n\r\n                }\r\n                return foo\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n        forToday() {\r\n            let today = new Date();\r\n            let dd = String(today.getDate()).padStart(2, '0');\r\n            let mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n            let yyyy = today.getFullYear();\r\n            today = yyyy + '-' + mm + '-' + dd;\r\n            return today;\r\n        }\r\n    },\r\n    async mounted() {\r\n        await this.$store.commit(mutation.BUTTON_STATUS, false);\r\n        await this.$store.commit(mutation.SET_LOADING, true);\r\n        await this.$store.dispatch(action.LIST_ATT_EMPLOYEE, this.currentPage);\r\n        this.tableData = this.listData\r\n        this.totalData = this.attTotal\r\n        this.$store.dispatch(action.DROPDOWN_EMPLOYEE);\r\n    },\r\n    methods: {\r\n        removeDate2() {\r\n            this.month = null\r\n        },\r\n        removeDate() {\r\n            this.date = null\r\n        },\r\n        openWindow(position) {\r\n            this.window_open = true\r\n            this.infowindow.lat = position.lat;\r\n            this.infowindow.lng = position.lng;\r\n            this.infowindow.name = position.name;\r\n        },\r\n        Dialog(foo, e) {\r\n            e.stopPropagation();\r\n            this.image_url = foo;\r\n            this.dialogVisible = true;\r\n        },\r\n        async exportExcel() {\r\n            let data = '';\r\n            if (this.dateExport == null) {\r\n                swal('Please select a start date', '', 'error')\r\n            } else {\r\n                if (this.userid) {\r\n                    let obj = {\r\n                        date: this.dateExport,\r\n                        path: \"employee\",\r\n                        userid: this.userid,\r\n                    };\r\n                    this.$store.commit(mutation.BUTTON_STATUS, true);\r\n                    data = await this.$store.dispatch(action.EXPORT_ATTENDANCE, obj)\r\n                    let firstD = data.slice(1)\r\n                    let secondD = firstD.slice(0, firstD.length - 1)\r\n                    window.open(secondD)\r\n                } else if (this.userid == null | this.userid == 0) {\r\n                    let obj = {\r\n                        date: this.dateExport,\r\n                        path: \"employee\",\r\n                        userid: null,\r\n                    };\r\n                    this.$store.commit(mutation.BUTTON_STATUS, true);\r\n                    data = await this.$store.dispatch(action.EXPORT_ATTENDANCE, obj)\r\n                    let firstD = data.slice(1)\r\n                    let secondD = firstD.slice(0, firstD.length - 1)\r\n                    window.open(secondD)\r\n                }\r\n            }\r\n        },\r\n        async onFind() {\r\n            if (this.userid == null) {\r\n                this.currentPage = 1;\r\n                await this.$store.commit(mutation.BUTTON_STATUS, true);\r\n                await this.$store.dispatch(action.FILTER_EMPLOYEE, {\r\n                    radio: this.radio,\r\n                    iduser: 0,\r\n                    today: this.forToday,\r\n                    idmonth: this.month,\r\n                    startdate: this.date ? this.date[0] : null,\r\n                    duedate: this.date ? this.date[1] : null,\r\n                    page: 1\r\n                })\r\n            } else {\r\n                this.currentPage = 1;\r\n                await this.$store.commit(mutation.BUTTON_STATUS, true);\r\n                await this.$store.dispatch(action.FILTER_EMPLOYEE, {\r\n                    radio: this.radio,\r\n                    iduser: this.userid,\r\n                    today: this.forToday,\r\n                    idmonth: this.month,\r\n                    startdate: this.date ? this.date[0] : null,\r\n                    duedate: this.date ? this.date[1] : null,\r\n                    page: 1\r\n                })\r\n            }\r\n            this.tableData = this.filterAttendance;\r\n            this.totalData = this.filterTotal;\r\n            this.markers = [];\r\n            this.path = [];\r\n            this.window_open = false;\r\n            for (var i = 0; i < this.tableData.length; i++) {\r\n                const marker = {\r\n                    lat: parseFloat(this.tableData[i].clock_in_latitude),\r\n                    lng: parseFloat(this.tableData[i].clock_in_longitude),\r\n                    name: this.tableData[i].name + ', ' + this.tableData[i].clock_in + ' (CLOCK IN)',\r\n                    icon: this.redIcon\r\n                };\r\n                this.markDefault.lat = parseFloat(this.tableData[i].clock_in_latitude)\r\n                this.markDefault.lng = parseFloat(this.tableData[i].clock_in_longitude)\r\n                this.markers.push({\r\n                    position: marker\r\n                });\r\n                this.mapMark = 1;\r\n            }\r\n            for (var i = 0; i < this.tableData.length; i++) {\r\n                const marker = {\r\n                    lat: parseFloat(this.tableData[i].clock_out_latitude),\r\n                    lng: parseFloat(this.tableData[i].clock_out_longitude),\r\n                    name: this.tableData[i].name + ', ' + this.tableData[i].clock_out + ' (CLOCK OUT)',\r\n                    icon: this.orangeIcon\r\n                };\r\n                this.markers.push({\r\n                    position: marker\r\n                });\r\n            }\r\n        },\r\n        async handlePageChange(currentpage) {\r\n            this.currentPage = currentpage;\r\n            if (this.userid == null) {\r\n                await this.$store.commit(mutation.SET_LOADING, true);\r\n                await this.$store.dispatch(action.FILTER_EMPLOYEE, {\r\n                    radio: this.radio,\r\n                    iduser: 0,\r\n                    idmonth: this.month,\r\n                    today: this.forToday,\r\n                    startdate: this.date ? this.date[0] : null,\r\n                    duedate: this.date ? this.date[1] : null,\r\n                    page: this.currentPage\r\n                });\r\n            } else {\r\n                await this.$store.commit(mutation.SET_LOADING, true);\r\n                await this.$store.dispatch(action.FILTER_EMPLOYEE, {\r\n                    radio: this.radio,\r\n                    iduser: this.userid,\r\n                    idmonth: this.month,\r\n                    today: this.forToday,\r\n                    startdate: this.date ? this.date[0] : null,\r\n                    duedate: this.date ? this.date[1] : null,\r\n                    page: this.currentPage\r\n                });\r\n\r\n            }\r\n            this.tableData = this.filterAttendance;\r\n            this.totalData = this.filterTotal;\r\n            this.markers = [];\r\n            this.path = [];\r\n            this.window_open = false;\r\n            for (var i = 0; i < this.tableData.length; i++) {\r\n\r\n                const marker = {\r\n                    lat: parseFloat(this.tableData[i].clock_in_latitude),\r\n                    lng: parseFloat(this.tableData[i].clock_in_longitude),\r\n                    name: this.tableData[i].name + ', ' + this.tableData[i].clock_in + ' (CLOCK IN)',\r\n                    icon: this.redIcon\r\n                };\r\n                this.markDefault.lat = parseFloat(this.tableData[i].clock_in_latitude)\r\n                this.markDefault.lng = parseFloat(this.tableData[i].clock_in_longitude)\r\n                this.markers.push({\r\n                    position: marker\r\n                });\r\n                this.mapMark = 1;\r\n            }\r\n            for (var i = 0; i < this.tableData.length; i++) {\r\n                const marker = {\r\n                    lat: parseFloat(this.tableData[i].clock_out_latitude),\r\n                    lng: parseFloat(this.tableData[i].clock_out_longitude),\r\n                    name: this.tableData[i].name + ', ' + this.tableData[i].clock_out + ' (CLOCK OUT)',\r\n                    icon: this.orangeIcon\r\n                };\r\n                this.markers.push({\r\n                    position: marker\r\n                });\r\n            }\r\n        },\r\n        async getId(id) {\r\n            await this.$store.commit(mutation.SET_LOADING, true);\r\n            await this.$store.dispatch(action.TRACKING_ATTENDANCE, id.id);\r\n            await this.attendance;\r\n            if (this.attendance.length == 0) {\r\n                swal('This user does not have any tracking yet', '', '')\r\n            } else {\r\n                this.markers = [];\r\n                this.path = [];\r\n                this.window_open = false;\r\n                for (var i = 0; i < this.attendance.length; i++) {\r\n                    const marker = {\r\n                        lat: parseFloat(this.attendance[i].latitude),\r\n                        lng: parseFloat(this.attendance[i].longitude),\r\n                        name: id.name + ', ' + this.attendance[i].created_at,\r\n                        icon: this.blueDot\r\n                    };\r\n                    this.markDefault.lat = parseFloat(this.attendance[i].latitude)\r\n                    this.markDefault.lng = parseFloat(this.attendance[i].longitude)\r\n                    this.markers.push({\r\n                        position: marker\r\n                    });\r\n                    this.path.push({\r\n                        lat: parseFloat(this.attendance[i].latitude),\r\n                        lng: parseFloat(this.attendance[i].longitude)\r\n                    });\r\n                    this.mapLine = 1;\r\n                    this.mapMark = 1;\r\n                }\r\n            }\r\n            var self = this;\r\n            setTimeout(function () {\r\n                self.$refs.topside.scrollTop = 0;\r\n            }, 900);\r\n        },\r\n        indexMethod(index) {\r\n            return index + this.paginator.fromP;\r\n        },\r\n    },\r\n    async created() {\r\n        await this.$store.dispatch(action.LIST_ATT_EMPLOYEE, this.currentPage);\r\n        await this.listData\r\n        this.markers = [];\r\n        this.path = [];\r\n        this.window_open = false;\r\n        for (var i = 0; i < this.listData.length; i++) {\r\n            const marker = {\r\n                lat: parseFloat(this.listData[i].clock_in_latitude),\r\n                lng: parseFloat(this.listData[i].clock_in_longitude),\r\n                name: this.listData[i].name + ', ' + this.listData[i].clock_in + ' (CLOCK IN)',\r\n                icon: this.redIcon\r\n            };\r\n            this.markDefault.lat = parseFloat(this.listData[i].clock_in_latitude)\r\n            this.markDefault.lng = parseFloat(this.listData[i].clock_in_longitude)\r\n            this.markers.push({\r\n                position: marker\r\n            });\r\n            this.mapMark = 1;\r\n        }\r\n        for (var i = 0; i < this.listData.length; i++) {\r\n            const marker = {\r\n                lat: parseFloat(this.listData[i].clock_out_latitude),\r\n                lng: parseFloat(this.listData[i].clock_out_longitude),\r\n                name: this.listData[i].name + ', ' + this.listData[i].clock_out + ' (CLOCK OUT)',\r\n                icon: this.orangeIcon\r\n            };\r\n            this.markers.push({\r\n                position: marker\r\n            });\r\n        }\r\n    },\r\n}\r\n",{"version":3,"sources":["list-attendance-employee.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"list-attendance-employee.vue","sourceRoot":"src/views/pages/attendance","sourcesContent":["<template>\r\n<div class=\"page-table scrollable only-y\" ref=\"topside\" id=\"affix-container\">\r\n    <div class=\"card-base card-shadow--medium bg-white\" v-loading=\"loading\">\r\n        <gmap-map :center=\"markDefault\" :zoom=\"16\" map-type-id=\"terrain\" style=\"width: 100%; height: 500px\">\r\n            <div v-if=\"mapMark\">\r\n                <gmap-marker :key=\"index\" v-for=\"(m, index) in markers\" :icon=\"{ url: m.position.icon}\" :position=\"m.position\" :clickable=\"true\" @click=\"openWindow(m.position)\"></gmap-marker>\r\n                <gmap-info-window @closeclick=\"window_open=false\" :opened=\"window_open\" :position=\"infowindow\" :options=\"{ pixelOffset: { width: 0, height: -35},}\">\r\n                    {{infowindow.name}}\r\n                </gmap-info-window>\r\n            </div>\r\n            <div v-if=\"mapLine\">\r\n                <gmap-polyline :path=\"path\" v-bind:options=\"{ strokeColor:'#BB0000'}\">\r\n                </gmap-polyline>\r\n            </div>\r\n        </gmap-map>\r\n        <el-row style=\"margin-top: 20px; margin-left: 3px\" :gutter=\"20\">\r\n            <el-col :span=\"1\">\r\n                <p style=\"margin-top: 7px\">Employee:</p>\r\n            </el-col>\r\n            <el-col :span=\"6\">\r\n                <el-select style=\"width: 90%; margin-left: 40px;\" v-model=\"userid\" filterable placeholder=\"Employee Name\">\r\n                    <el-option label=\"All Employee\" value=\"0\">All Employee</el-option>\r\n                    <el-option v-for=\"item in dropDown\" :key=\"item.id\" :label=\"item.name\" :value=\"item.id\"></el-option>\r\n                </el-select>\r\n            </el-col>\r\n            <el-col :span=\"1\">\r\n                <p style=\"margin-top: 7px; margin-left: 15px;\">Time:</p>\r\n            </el-col>\r\n            <el-col :span=\"1\">\r\n                <el-radio style=\"margin-top: 10px; margin-left: 25px;\" v-model=\"radio\" label=\"1\"><br></el-radio>\r\n            </el-col>\r\n            <el-col :span=\"4\">\r\n                <el-select style=\"width: 100%; margin-left: 15px\" v-model=\"month\" placeholder=\"Select\" @change=\"removeDate\" :disabled=\"disableRadio1\">\r\n                    <el-option label=\"Today\" selected value=\"99\">Today</el-option>\r\n                    <el-option label=\"All Months\" selected value=\"0\">All Months</el-option>\r\n                    <el-option label=\"January\" selected value=\"1\">January</el-option>\r\n                    <el-option label=\"February\" value=\"2\">February</el-option>\r\n                    <el-option label=\"March\" value=\"3\">March</el-option>\r\n                    <el-option label=\"April\" value=\"4\">April</el-option>\r\n                    <el-option label=\"May\" value=\"5\">May</el-option>\r\n                    <el-option label=\"June\" value=\"6\">June</el-option>\r\n                    <el-option label=\"July\" value=\"7\">July</el-option>\r\n                    <el-option label=\"August\" value=\"8\">August</el-option>\r\n                    <el-option label=\"September\" value=\"9\">September</el-option>\r\n                    <el-option label=\"October\" value=\"10\">October</el-option>\r\n                    <el-option label=\"November\" value=\"11\">November</el-option>\r\n                    <el-option label=\"December\" value=\"12\">December</el-option>\r\n                </el-select>\r\n            </el-col>\r\n            <el-col :span=\"1\">\r\n                <el-radio style=\"margin-top: 10px; margin-left: 10px;\" v-model=\"radio\" label=\"2\">\r\n                    <p><br></p>\r\n                </el-radio>\r\n            </el-col>\r\n            <el-col :span=\"8\">\r\n                <el-date-picker style=\"width: 100%;\" value-format=\"yyyy-MM-dd\" :disabled=\"disableRadio2\" @change=\"removeDate2\" v-model=\"date\" type=\"daterange\">\r\n                </el-date-picker>\r\n            </el-col>\r\n            <el-col :span=\"1\">\r\n                <el-button icon=\"el-icon-search\" style=\"background: #D50000; font-size: 17px; color: white; \" :loading=\"button\" @click=\"onFind\" square size=\"small\"></el-button>\r\n            </el-col>\r\n        </el-row>\r\n        <el-row :gutter=\"10\">\r\n            <el-col :span=\"24\">\r\n                <el-table :data=\"tableData\" style=\"width: 100%\" @row-click=\"getId\">\r\n                    <el-table-column type=\"index\" :index=\"indexMethod\" align=\"center\" label=\"NO\" width=\"60\"></el-table-column>\r\n                    <el-table-column align=\"center\" width=\"100\" label=\"PHOTO\">\r\n                        <template slot-scope=\"scope\">\r\n                            <img style=\"width: 35px; height: 35px; border-radius: 50%\" :src=\"scope.row.profile_picture\">\r\n                        </template>\r\n                    </el-table-column>\r\n                    <el-table-column prop=\"name\" align=\"center\" label=\"EMPLOYEE INFO\"></el-table-column>\r\n                    <el-table-column prop=\"clock_in\" header-align=\"center\" label=\"CHECK IN\"></el-table-column>\r\n                    <el-table-column prop=\"clock_out\" header-align=\"center\" label=\"CHECK OUT\"></el-table-column>\r\n                    <el-table-column prop=\"remark\" header-align=\"center\" label=\"MESSAGE\"></el-table-column>\r\n                    <el-table-column v-on:click.stop align=\"center\" label=\"\">\r\n                        <template slot-scope=\"scope\">\r\n                            <img style=\"width: 35px; height: 35px;\" @click=\"Dialog(scope.row.image_url, $event)\" :src=\"scope.row.image_url\">\r\n                        </template>\r\n                    </el-table-column>\r\n                </el-table>\r\n            </el-col>\r\n        </el-row>\r\n        <div v-if=\"date || month == 99\">\r\n            <el-col :span=\"3\">\r\n                <el-button style=\"width: 100%;  margin-left: 30px; margin-bottom: 5px; background-color: #D50000;\" :loading=\"button\" type=\"danger\" @click=\"exportExcel\">\r\n                    Export\r\n                </el-button>\r\n            </el-col>\r\n        </div>\r\n        <div align=\"right\" style=\"margin-bottom: 10px\">\r\n            <el-pagination background layout=\"prev, pager, next\" :current-page.sync=\"currentPage\" @current-change=\"handlePageChange\" :total=\"totalData\"></el-pagination>\r\n        </div>\r\n    </div>\r\n    <el-dialog :visible.sync=\"dialogVisible\" width=\"25%\">\r\n        <center>\r\n            <div v-if=\"image_url\">\r\n                <img style=\"max-width: 250px; max-height: 250px;\" :src=\"image_url\">\r\n            </div>\r\n        </center>\r\n    </el-dialog>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport moment from \"moment\";\r\nimport Affix from \"@/components/Affix\";\r\nimport {\r\n    mapGetters,\r\n    mapActions\r\n} from \"vuex\";\r\nimport * as getter from \"../../../store/getters-types\";\r\nimport * as action from \"../../../store/action-types\";\r\nimport * as mutation from '../../../store/mutation-types'\r\nimport swal from 'sweetalert2'\r\n\r\nexport default {\r\n    name: \"Attendance\",\r\n    data() {\r\n        return {\r\n            dialogVisible: false,\r\n            currentPage: 1,\r\n            input: \"\",\r\n            affixEnabled: true,\r\n            indexT: \"\",\r\n            userid: null,\r\n            date: null,\r\n            radio: null,\r\n            month: null,\r\n            tableData: null,\r\n            totalData: null,\r\n            mapMark: null,\r\n            markers: [],\r\n            mapLine: null,\r\n            path: [],\r\n            markDefault: {\r\n                lat: -6.21462,\r\n                lng: 106.84513\r\n            },\r\n            resultTrack: null,\r\n            image_url: null,\r\n            info_marker: null,\r\n            infowindow: {\r\n                lat: 0,\r\n                lng: 0,\r\n                name: null,\r\n            },\r\n            orangeIcon: require(\"@/assets/images/orange-dot.png\"),\r\n            redIcon: require(\"@/assets/images/red-dot.png\"),\r\n            blueDot: require(\"@/assets/images/blue-dot.png\"),\r\n            window_open: false\r\n        };\r\n    },\r\n    components: {\r\n        Affix\r\n    },\r\n    computed: {\r\n        ...mapGetters({\r\n            listData: getter.GET_LIST_ATT,\r\n            paginate: getter.GET_PAGINATE_ATT,\r\n            dropDown: getter.GET_DROPDOWN_EMPLOYEE,\r\n            filterAttendance: getter.GET_FILTER_ATT,\r\n            attTotal: getter.GET_ATT_TOTAL,\r\n            filterTotal: getter.GET_FILTER_TOTAL,\r\n            button: getter.GET_BUTTON,\r\n            loading: getter.GET_LOADING,\r\n            attendance: getter.GET_TRACKING_ATTENDANCE\r\n        }),\r\n        paginator() {\r\n            return this.paginate;\r\n        },\r\n        indexTam() {\r\n            return this.indexT;\r\n        },\r\n        disableRadio1() {\r\n            if (this.radio == 2) {\r\n                return true;\r\n            } else if (this.radio == 1) {\r\n                return false;\r\n            } else {\r\n                return true;\r\n            }\r\n        },\r\n        disableRadio2() {\r\n            if (this.radio == 1) {\r\n                return true;\r\n            } else if (this.radio == 2) {\r\n                return false;\r\n            } else {\r\n                return true;\r\n            }\r\n        },\r\n        dateExport() {\r\n            if (this.date) {\r\n                const foo = {\r\n                    startdate: this.date[0],\r\n                    duedate: this.date[1],\r\n                }\r\n                return foo\r\n\r\n            } else if (this.month == 99) {\r\n                const foo = {\r\n                    startdate: this.forToday,\r\n                    duedate: this.forToday,\r\n\r\n                }\r\n                return foo\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n        forToday() {\r\n            let today = new Date();\r\n            let dd = String(today.getDate()).padStart(2, '0');\r\n            let mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n            let yyyy = today.getFullYear();\r\n            today = yyyy + '-' + mm + '-' + dd;\r\n            return today;\r\n        }\r\n    },\r\n    async mounted() {\r\n        await this.$store.commit(mutation.BUTTON_STATUS, false);\r\n        await this.$store.commit(mutation.SET_LOADING, true);\r\n        await this.$store.dispatch(action.LIST_ATT_EMPLOYEE, this.currentPage);\r\n        this.tableData = this.listData\r\n        this.totalData = this.attTotal\r\n        this.$store.dispatch(action.DROPDOWN_EMPLOYEE);\r\n    },\r\n    methods: {\r\n        removeDate2() {\r\n            this.month = null\r\n        },\r\n        removeDate() {\r\n            this.date = null\r\n        },\r\n        openWindow(position) {\r\n            this.window_open = true\r\n            this.infowindow.lat = position.lat;\r\n            this.infowindow.lng = position.lng;\r\n            this.infowindow.name = position.name;\r\n        },\r\n        Dialog(foo, e) {\r\n            e.stopPropagation();\r\n            this.image_url = foo;\r\n            this.dialogVisible = true;\r\n        },\r\n        async exportExcel() {\r\n            let data = '';\r\n            if (this.dateExport == null) {\r\n                swal('Please select a start date', '', 'error')\r\n            } else {\r\n                if (this.userid) {\r\n                    let obj = {\r\n                        date: this.dateExport,\r\n                        path: \"employee\",\r\n                        userid: this.userid,\r\n                    };\r\n                    this.$store.commit(mutation.BUTTON_STATUS, true);\r\n                    data = await this.$store.dispatch(action.EXPORT_ATTENDANCE, obj)\r\n                    let firstD = data.slice(1)\r\n                    let secondD = firstD.slice(0, firstD.length - 1)\r\n                    window.open(secondD)\r\n                } else if (this.userid == null | this.userid == 0) {\r\n                    let obj = {\r\n                        date: this.dateExport,\r\n                        path: \"employee\",\r\n                        userid: null,\r\n                    };\r\n                    this.$store.commit(mutation.BUTTON_STATUS, true);\r\n                    data = await this.$store.dispatch(action.EXPORT_ATTENDANCE, obj)\r\n                    let firstD = data.slice(1)\r\n                    let secondD = firstD.slice(0, firstD.length - 1)\r\n                    window.open(secondD)\r\n                }\r\n            }\r\n        },\r\n        async onFind() {\r\n            if (this.userid == null) {\r\n                this.currentPage = 1;\r\n                await this.$store.commit(mutation.BUTTON_STATUS, true);\r\n                await this.$store.dispatch(action.FILTER_EMPLOYEE, {\r\n                    radio: this.radio,\r\n                    iduser: 0,\r\n                    today: this.forToday,\r\n                    idmonth: this.month,\r\n                    startdate: this.date ? this.date[0] : null,\r\n                    duedate: this.date ? this.date[1] : null,\r\n                    page: 1\r\n                })\r\n            } else {\r\n                this.currentPage = 1;\r\n                await this.$store.commit(mutation.BUTTON_STATUS, true);\r\n                await this.$store.dispatch(action.FILTER_EMPLOYEE, {\r\n                    radio: this.radio,\r\n                    iduser: this.userid,\r\n                    today: this.forToday,\r\n                    idmonth: this.month,\r\n                    startdate: this.date ? this.date[0] : null,\r\n                    duedate: this.date ? this.date[1] : null,\r\n                    page: 1\r\n                })\r\n            }\r\n            this.tableData = this.filterAttendance;\r\n            this.totalData = this.filterTotal;\r\n            this.markers = [];\r\n            this.path = [];\r\n            this.window_open = false;\r\n            for (var i = 0; i < this.tableData.length; i++) {\r\n                const marker = {\r\n                    lat: parseFloat(this.tableData[i].clock_in_latitude),\r\n                    lng: parseFloat(this.tableData[i].clock_in_longitude),\r\n                    name: this.tableData[i].name + ', ' + this.tableData[i].clock_in + ' (CLOCK IN)',\r\n                    icon: this.redIcon\r\n                };\r\n                this.markDefault.lat = parseFloat(this.tableData[i].clock_in_latitude)\r\n                this.markDefault.lng = parseFloat(this.tableData[i].clock_in_longitude)\r\n                this.markers.push({\r\n                    position: marker\r\n                });\r\n                this.mapMark = 1;\r\n            }\r\n            for (var i = 0; i < this.tableData.length; i++) {\r\n                const marker = {\r\n                    lat: parseFloat(this.tableData[i].clock_out_latitude),\r\n                    lng: parseFloat(this.tableData[i].clock_out_longitude),\r\n                    name: this.tableData[i].name + ', ' + this.tableData[i].clock_out + ' (CLOCK OUT)',\r\n                    icon: this.orangeIcon\r\n                };\r\n                this.markers.push({\r\n                    position: marker\r\n                });\r\n            }\r\n        },\r\n        async handlePageChange(currentpage) {\r\n            this.currentPage = currentpage;\r\n            if (this.userid == null) {\r\n                await this.$store.commit(mutation.SET_LOADING, true);\r\n                await this.$store.dispatch(action.FILTER_EMPLOYEE, {\r\n                    radio: this.radio,\r\n                    iduser: 0,\r\n                    idmonth: this.month,\r\n                    today: this.forToday,\r\n                    startdate: this.date ? this.date[0] : null,\r\n                    duedate: this.date ? this.date[1] : null,\r\n                    page: this.currentPage\r\n                });\r\n            } else {\r\n                await this.$store.commit(mutation.SET_LOADING, true);\r\n                await this.$store.dispatch(action.FILTER_EMPLOYEE, {\r\n                    radio: this.radio,\r\n                    iduser: this.userid,\r\n                    idmonth: this.month,\r\n                    today: this.forToday,\r\n                    startdate: this.date ? this.date[0] : null,\r\n                    duedate: this.date ? this.date[1] : null,\r\n                    page: this.currentPage\r\n                });\r\n\r\n            }\r\n            this.tableData = this.filterAttendance;\r\n            this.totalData = this.filterTotal;\r\n            this.markers = [];\r\n            this.path = [];\r\n            this.window_open = false;\r\n            for (var i = 0; i < this.tableData.length; i++) {\r\n\r\n                const marker = {\r\n                    lat: parseFloat(this.tableData[i].clock_in_latitude),\r\n                    lng: parseFloat(this.tableData[i].clock_in_longitude),\r\n                    name: this.tableData[i].name + ', ' + this.tableData[i].clock_in + ' (CLOCK IN)',\r\n                    icon: this.redIcon\r\n                };\r\n                this.markDefault.lat = parseFloat(this.tableData[i].clock_in_latitude)\r\n                this.markDefault.lng = parseFloat(this.tableData[i].clock_in_longitude)\r\n                this.markers.push({\r\n                    position: marker\r\n                });\r\n                this.mapMark = 1;\r\n            }\r\n            for (var i = 0; i < this.tableData.length; i++) {\r\n                const marker = {\r\n                    lat: parseFloat(this.tableData[i].clock_out_latitude),\r\n                    lng: parseFloat(this.tableData[i].clock_out_longitude),\r\n                    name: this.tableData[i].name + ', ' + this.tableData[i].clock_out + ' (CLOCK OUT)',\r\n                    icon: this.orangeIcon\r\n                };\r\n                this.markers.push({\r\n                    position: marker\r\n                });\r\n            }\r\n        },\r\n        async getId(id) {\r\n            await this.$store.commit(mutation.SET_LOADING, true);\r\n            await this.$store.dispatch(action.TRACKING_ATTENDANCE, id.id);\r\n            await this.attendance;\r\n            if (this.attendance.length == 0) {\r\n                swal('This user does not have any tracking yet', '', '')\r\n            } else {\r\n                this.markers = [];\r\n                this.path = [];\r\n                this.window_open = false;\r\n                for (var i = 0; i < this.attendance.length; i++) {\r\n                    const marker = {\r\n                        lat: parseFloat(this.attendance[i].latitude),\r\n                        lng: parseFloat(this.attendance[i].longitude),\r\n                        name: id.name + ', ' + this.attendance[i].created_at,\r\n                        icon: this.blueDot\r\n                    };\r\n                    this.markDefault.lat = parseFloat(this.attendance[i].latitude)\r\n                    this.markDefault.lng = parseFloat(this.attendance[i].longitude)\r\n                    this.markers.push({\r\n                        position: marker\r\n                    });\r\n                    this.path.push({\r\n                        lat: parseFloat(this.attendance[i].latitude),\r\n                        lng: parseFloat(this.attendance[i].longitude)\r\n                    });\r\n                    this.mapLine = 1;\r\n                    this.mapMark = 1;\r\n                }\r\n            }\r\n            var self = this;\r\n            setTimeout(function () {\r\n                self.$refs.topside.scrollTop = 0;\r\n            }, 900);\r\n        },\r\n        indexMethod(index) {\r\n            return index + this.paginator.fromP;\r\n        },\r\n    },\r\n    async created() {\r\n        await this.$store.dispatch(action.LIST_ATT_EMPLOYEE, this.currentPage);\r\n        await this.listData\r\n        this.markers = [];\r\n        this.path = [];\r\n        this.window_open = false;\r\n        for (var i = 0; i < this.listData.length; i++) {\r\n            const marker = {\r\n                lat: parseFloat(this.listData[i].clock_in_latitude),\r\n                lng: parseFloat(this.listData[i].clock_in_longitude),\r\n                name: this.listData[i].name + ', ' + this.listData[i].clock_in + ' (CLOCK IN)',\r\n                icon: this.redIcon\r\n            };\r\n            this.markDefault.lat = parseFloat(this.listData[i].clock_in_latitude)\r\n            this.markDefault.lng = parseFloat(this.listData[i].clock_in_longitude)\r\n            this.markers.push({\r\n                position: marker\r\n            });\r\n            this.mapMark = 1;\r\n        }\r\n        for (var i = 0; i < this.listData.length; i++) {\r\n            const marker = {\r\n                lat: parseFloat(this.listData[i].clock_out_latitude),\r\n                lng: parseFloat(this.listData[i].clock_out_longitude),\r\n                name: this.listData[i].name + ', ' + this.listData[i].clock_out + ' (CLOCK OUT)',\r\n                icon: this.orangeIcon\r\n            };\r\n            this.markers.push({\r\n                position: marker\r\n            });\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.el-row {\r\n    padding: 0px 10px;\r\n    margin-bottom: 20px;\r\n\r\n    &:last-child {\r\n        margin-bottom: 0;\r\n    }\r\n}\r\n\r\n.el-col {\r\n    border-radius: 5px;\r\n}\r\n\r\n.el-select {\r\n    width: 100%;\r\n}\r\n\r\n#map {\r\n    height: 100%;\r\n}\r\n</style>\r\n"]}]}