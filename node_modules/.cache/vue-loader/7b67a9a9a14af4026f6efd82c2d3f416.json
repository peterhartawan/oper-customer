{"remainingRequest":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-frontend/src/components/theme-picker.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-frontend/src/components/theme-picker.vue","mtime":1628175042600},{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-frontend/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n.theme-picker {\n\tdisplay: inline-block;\n}\n\n.theme-picker .el-color-picker__trigger {\n\tvertical-align: middle;\n}\n\n.theme-picker-dropdown .el-color-dropdown__link-btn {\n\tdisplay: none;\n}\n",{"version":3,"sources":["theme-picker.vue"],"names":[],"mappings":";;;;;;;;AAQA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"theme-picker.vue","sourceRoot":"src/components","sourcesContent":["<template>\n\t<el-color-picker\n\t\tclass=\"theme-picker\"\n\t\tpopper-class=\"theme-picker-dropdown\"\n\t\tv-model=\"theme\"></el-color-picker>\n</template>\n\n<style>\n\t.theme-picker {\n\t\tdisplay: inline-block;\n\t}\n\n\t.theme-picker .el-color-picker__trigger {\n\t\tvertical-align: middle;\n\t}\n\t\n\t.theme-picker-dropdown .el-color-dropdown__link-btn {\n\t\tdisplay: none;\n\t}\n</style>\n\n<script>\n\tconst  version = '2.2.2';\n\n\tconst ORIGINAL_THEME = '#409EFF';\n\texport default {\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tchalk: '', // content of theme-chalk css\n\t\t\t\tdocs: '', // content of docs css\n\t\t\t\ttheme: ORIGINAL_THEME\n\t\t\t};\n\t\t},\n\n\t\twatch: {\n\t\t\ttheme(val, oldVal) {\n\t\t\t\tif (typeof val !== 'string') return;\n\t\t\t\tconst themeCluster = this.getThemeCluster(val.replace('#', ''));\n\t\t\t\tconst originalCluster = this.getThemeCluster(oldVal.replace('#', ''));\n\t\t\t\tconst getHandler = (variable, id) => {\n\t\t\t\t\treturn () => {\n\t\t\t\t\t\tconst originalCluster = this.getThemeCluster(ORIGINAL_THEME.replace('#', ''));\n\t\t\t\t\t\tlet newStyle = this.updateStyle(this[variable], originalCluster, themeCluster);\n\n\t\t\t\t\t\tlet styleTag = document.getElementById(id);\n\t\t\t\t\t\tif (!styleTag) {\n\t\t\t\t\t\t\tstyleTag = document.createElement('style');\n\t\t\t\t\t\t\tstyleTag.setAttribute('id', id);\n\t\t\t\t\t\t\tdocument.head.appendChild(styleTag);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstyleTag.innerText = newStyle;\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\tconst chalkHandler = getHandler('chalk', 'chalk-style');\n\t\t\t\tconst docsHandler = getHandler('docs', 'docs-style');\n\n\t\t\t\tif (!this.chalk) {\n\t\t\t\t\tconst url = `https://unpkg.com/element-ui@${ version }/lib/theme-chalk/index.css`;\n\t\t\t\t\tthis.getCSSString(url, chalkHandler, 'chalk');\n\t\t\t\t} else {\n\t\t\t\t\tchalkHandler();\n\t\t\t\t}\n\n\t\t\t\tif (!this.docs) {\n\t\t\t\t\tconst links = [].filter.call(document.querySelectorAll('link'), link => {\n\t\t\t\t\t\treturn /docs\\..+\\.css/.test(link.href || '');\n\t\t\t\t\t});\n\t\t\t\t\tlinks[0] && this.getCSSString(links[0].href, docsHandler, 'docs');\n\t\t\t\t} else {\n\t\t\t\t\tdocsHandler();\n\t\t\t\t}\n\n\t\t\t\tconst styles = [].slice.call(document.querySelectorAll('style'))\n\t\t\t\t\t.filter(style => {\n\t\t\t\t\t\tconst text = style.innerText;\n\t\t\t\t\t\treturn new RegExp(oldVal, 'i').test(text) && !/Chalk Variables/.test(text);\n\t\t\t\t\t});\n\t\t\t\tstyles.forEach(style => {\n\t\t\t\t\tconst { innerText } = style;\n\t\t\t\t\tif (typeof innerText !== 'string') return;\n\t\t\t\t\tstyle.innerText = this.updateStyle(innerText, originalCluster, themeCluster);\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\tmethods: {\n\t\t\tupdateStyle(style, oldCluster, newCluster) {\n\t\t\t\tlet newStyle = style;\n\t\t\t\toldCluster.forEach((color, index) => {\n\t\t\t\t\tnewStyle = newStyle.replace(new RegExp(color, 'ig'), newCluster[index]);\n\t\t\t\t});\n\t\t\t\treturn newStyle;\n\t\t\t},\n\n\t\t\tgetCSSString(url, callback, variable) {\n\t\t\t\tconst xhr = new XMLHttpRequest();\n\t\t\t\txhr.onreadystatechange = () => {\n\t\t\t\t\tif (xhr.readyState === 4 && xhr.status === 200) {\n\t\t\t\t\t\tthis[variable] = xhr.responseText.replace(/@font-face{[^}]+}/, '');\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\txhr.open('GET', url);\n\t\t\t\txhr.send();\n\t\t\t},\n\n\t\t\tgetThemeCluster(theme) {\n\t\t\t\tconst tintColor = (color, tint) => {\n\t\t\t\t\tlet red = parseInt(color.slice(0, 2), 16);\n\t\t\t\t\tlet green = parseInt(color.slice(2, 4), 16);\n\t\t\t\t\tlet blue = parseInt(color.slice(4, 6), 16);\n\n\t\t\t\t\tif (tint === 0) { // when primary color is in its rgb space\n\t\t\t\t\t\treturn [red, green, blue].join(',');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tred += Math.round(tint * (255 - red));\n\t\t\t\t\t\tgreen += Math.round(tint * (255 - green));\n\t\t\t\t\t\tblue += Math.round(tint * (255 - blue));\n\n\t\t\t\t\t\tred = red.toString(16);\n\t\t\t\t\t\tgreen = green.toString(16);\n\t\t\t\t\t\tblue = blue.toString(16);\n\n\t\t\t\t\t\treturn `#${ red }${ green }${ blue }`;\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tconst shadeColor = (color, shade) => {\n\t\t\t\t\tlet red = parseInt(color.slice(0, 2), 16);\n\t\t\t\t\tlet green = parseInt(color.slice(2, 4), 16);\n\t\t\t\t\tlet blue = parseInt(color.slice(4, 6), 16);\n\n\t\t\t\t\tred = Math.round((1 - shade) * red);\n\t\t\t\t\tgreen = Math.round((1 - shade) * green);\n\t\t\t\t\tblue = Math.round((1 - shade) * blue);\n\n\t\t\t\t\tred = red.toString(16);\n\t\t\t\t\tgreen = green.toString(16);\n\t\t\t\t\tblue = blue.toString(16);\n\n\t\t\t\t\treturn `#${ red }${ green }${ blue }`;\n\t\t\t\t};\n\n\t\t\t\tconst clusters = [theme];\n\t\t\t\tfor (let i = 0; i <= 9; i++) {\n\t\t\t\t\tclusters.push(tintColor(theme, Number((i / 10).toFixed(2))));\n\t\t\t\t}\n\t\t\t\tclusters.push(shadeColor(theme, 0.1));\n\t\t\t\treturn clusters;\n\t\t\t}\n\t\t}\n\t};\n</script>"]}]}