{"remainingRequest":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\src\\views\\pages\\driver\\detail-driver.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\src\\views\\pages\\driver\\detail-driver.vue","mtime":1644413760470},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\babel-loader\\lib\\index.js","mtime":1646338474621},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport router from \"../../../router\";\r\nimport moment from \"moment\";\r\nimport Affix from \"@/components/Affix\";\r\nimport {\r\n    mapGetters,\r\n    mapActions\r\n} from \"vuex\";\r\nimport * as getter from \"../../../store/getters-types\";\r\nimport * as action from \"../../../store/action-types\";\r\nimport * as mutation from '../../../store/mutation-types';\r\nimport Swal from \"sweetalert2\";\r\nexport default {\r\n    name: \"DetailDriver\",\r\n    data() {\r\n        return {\r\n            payload: {\r\n                reason_suspend: \"\",\r\n                users_id: null,\r\n                iddriver: \"\",\r\n\r\n            },\r\n            alt: require(\"@/assets/images/avatar-2.jpg\")\r\n        };\r\n    },\r\n    methods: {\r\n        Back() {\r\n            router.replace(\"/driver\");\r\n        },\r\n        imgAlt(event) {\r\n            event.target.src = this.alt;\r\n        },\r\n        resendPIN() {\r\n            let obj = {\r\n                pin_type: '/driver/resend-pin',\r\n                id: this.driver.users_id\r\n            };\r\n            this.$store.commit(mutation.SET_RESEND_PIN_BUTTON, true);\r\n            this.$store.dispatch(action.RESEND_PIN, obj)\r\n        },\r\n        editDriver() {\r\n            this.$store.commit(mutation.BUTTON_STATUS, false)\r\n            this.$store.dispatch(action.EDIT_DRIVER, this.driver.users_id);\r\n        },\r\n        deleteButton() {\r\n            Swal.fire({\r\n                title: \"Are you sure?\",\r\n                text: \"You won't be able to revert this!\",\r\n                type: \"warning\",\r\n                showCancelButton: true,\r\n                confirmButtonColor: \"#3085d6\",\r\n                cancelButtonColor: \"#d33\",\r\n                confirmButtonText: \"Yes, delete it!\"\r\n            }).then(result => {\r\n                if (result.value) {\r\n                    this.$store.commit(mutation.BUTTON_STATUS, true)\r\n                    this.$store.dispatch(action.DELETE_DRIVER, this.driver.users_id);\r\n                }\r\n            });\r\n        },\r\n        activeButton() {\r\n            Swal.fire({\r\n                title: \"Are you sure?\",\r\n                text: \"You won't be able to revert this!\",\r\n                type: \"warning\",\r\n                showCancelButton: true,\r\n                confirmButtonColor: \"#3085d6\",\r\n                cancelButtonColor: \"#d33\",\r\n                confirmButtonText: \"Yes, activate it!\"\r\n            }).then(result => {\r\n                if (result.value) {\r\n                    this.$store.commit(mutation.BUTTON_STATUS, true)\r\n                    this.$store.dispatch(action.ACTIVATE_DRIVER, this.driver.users_id);\r\n                }\r\n            });\r\n        },\r\n        async suspendButton() {\r\n            const {\r\n                value: reason\r\n            } = await Swal.fire({\r\n                title: 'Enter the reason of suspending',\r\n                input: 'text',\r\n                showCancelButton: true,\r\n                confirmButtonColor: '#3085d6',\r\n                cancelButtonColor: '#d33',\r\n                confirmButtonText: 'Yes, suspend it!',\r\n                inputValidator: (value) => {\r\n                    if (!value) {\r\n                        return 'You need to write something!'\r\n                    }\r\n                }\r\n            })\r\n            if (reason) {\r\n                this.$store.commit(mutation.BUTTON_STATUS, true)\r\n                this.payload.reason_suspend = reason;\r\n                this.payload.users_id = this.driver.users_id;\r\n                this.payload.iddriver = this.driver.iddriver;\r\n                this.$store.dispatch(action.SUSPEND_DRIVER, this.payload)\r\n            }\r\n        }\r\n    },\r\n    computed: {\r\n        ...mapGetters({\r\n            driver: getter.DRIVER,\r\n            button: getter.GET_BUTTON,\r\n            resendPinButton: getter.GET_BUTTON_RESEND_PIN\r\n\r\n        }),\r\n        profilepicture() {\r\n            if (this.driver.profile_picture == null) {\r\n                return this.alt\r\n            } else {\r\n                return this.driver.profile_picture\r\n            }\r\n        },\r\n        offsetSize() {\r\n            if (this.driver.is_first_login === 1) {\r\n                return 1\r\n            } else {\r\n                return 16\r\n            }\r\n        }\r\n    }\r\n};\r\n",{"version":3,"sources":["detail-driver.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"detail-driver.vue","sourceRoot":"src/views/pages/driver","sourcesContent":["<template>\r\n<div class=\"page-table scrollable only-y\" id=\"affix-container\">\r\n    <div class=\"card-base card-shadow--medium bg-white\">\r\n        <el-row :gutter=\"10\">\r\n            <el-col style=\"margin-top: 30px\" :lg=\"8\">\r\n                <div class=\"thumbnail\">\r\n                    <img class=\"potrait\" :src=\"profilepicture\" @error=\"imgAlt\">\r\n                </div>\r\n            </el-col>\r\n            <el-col :lg=\"8\">\r\n                <h3>Name</h3>\r\n                {{driver.name}}\r\n                <h3>Driver Birthdate</h3>\r\n                {{driver.birthdate}}\r\n                <h3>Driver Gender</h3>\r\n                <p v-if=\"driver.gender==1\">Male</p>\r\n                <p v-else>Female</p>\r\n                <h3>Driver Address</h3>\r\n                {{driver.address}}\r\n            </el-col>\r\n            <el-col :lg=\"8\">\r\n                <h3>Driver NIK</h3>\r\n                {{driver.nik}}\r\n                <h3>Driver Email</h3>\r\n                {{driver.email}}\r\n                <h3>Driver Phone Number</h3>\r\n                {{driver.phonenumber}}\r\n                <h3>Driver Type</h3>\r\n                <p v-if=\"driver.drivertype_iddrivertype==1\">PKWT</p>\r\n                <p v-else-if=\"driver.drivertype_iddrivertype==2\">PKWT BACKUP</p>\r\n                <p v-else>FREELANCE</p>\r\n            </el-col>\r\n        </el-row>\r\n        <el-row style=\"margin-top: 10px ;margin-bottom: 0px\" :gutter=\"10\">\r\n            <el-col :lg=\"3\">\r\n                <el-button @click=\"Back()\">Back</el-button>\r\n            </el-col>\r\n            <el-col :lg=\"4\">\r\n                <el-button @click=\"editDriver()\" type=\"primary\">Edit</el-button>\r\n            </el-col>\r\n            <div v-if=\"driver.status===1\">\r\n                <el-col :offset=\"13\" :lg=\"4\">\r\n                    <el-button :loading=\"button\" type=\"danger\" @click=\"suspendButton\">Suspend</el-button>\r\n                </el-col>\r\n            </div>\r\n            <div v-else-if=\"driver.status === 3\">\r\n                <el-col :offset=\"9\" :lg=\"4\">\r\n                    <el-button :loading=\"button\" @click=\"deleteButton\" type=\"danger\">Delete</el-button>\r\n                </el-col>\r\n                <el-col :lg=\"4\">\r\n                    <el-button :loading=\"button\" @click=\"activeButton\" type=\"success\">Active</el-button>\r\n                </el-col>\r\n            </div>\r\n        </el-row>\r\n        <div v-if=\"driver.is_first_login === 1\">\r\n             <el-button style=\"width: auto\" :loading=\"resendPinButton\" class=\"topright\" type=\"warning\" @click=\"resendPIN\">Resend PIN</el-button>\r\n        </div>\r\n    </div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport router from \"../../../router\";\r\nimport moment from \"moment\";\r\nimport Affix from \"@/components/Affix\";\r\nimport {\r\n    mapGetters,\r\n    mapActions\r\n} from \"vuex\";\r\nimport * as getter from \"../../../store/getters-types\";\r\nimport * as action from \"../../../store/action-types\";\r\nimport * as mutation from '../../../store/mutation-types';\r\nimport Swal from \"sweetalert2\";\r\nexport default {\r\n    name: \"DetailDriver\",\r\n    data() {\r\n        return {\r\n            payload: {\r\n                reason_suspend: \"\",\r\n                users_id: null,\r\n                iddriver: \"\",\r\n\r\n            },\r\n            alt: require(\"@/assets/images/avatar-2.jpg\")\r\n        };\r\n    },\r\n    methods: {\r\n        Back() {\r\n            router.replace(\"/driver\");\r\n        },\r\n        imgAlt(event) {\r\n            event.target.src = this.alt;\r\n        },\r\n        resendPIN() {\r\n            let obj = {\r\n                pin_type: '/driver/resend-pin',\r\n                id: this.driver.users_id\r\n            };\r\n            this.$store.commit(mutation.SET_RESEND_PIN_BUTTON, true);\r\n            this.$store.dispatch(action.RESEND_PIN, obj)\r\n        },\r\n        editDriver() {\r\n            this.$store.commit(mutation.BUTTON_STATUS, false)\r\n            this.$store.dispatch(action.EDIT_DRIVER, this.driver.users_id);\r\n        },\r\n        deleteButton() {\r\n            Swal.fire({\r\n                title: \"Are you sure?\",\r\n                text: \"You won't be able to revert this!\",\r\n                type: \"warning\",\r\n                showCancelButton: true,\r\n                confirmButtonColor: \"#3085d6\",\r\n                cancelButtonColor: \"#d33\",\r\n                confirmButtonText: \"Yes, delete it!\"\r\n            }).then(result => {\r\n                if (result.value) {\r\n                    this.$store.commit(mutation.BUTTON_STATUS, true)\r\n                    this.$store.dispatch(action.DELETE_DRIVER, this.driver.users_id);\r\n                }\r\n            });\r\n        },\r\n        activeButton() {\r\n            Swal.fire({\r\n                title: \"Are you sure?\",\r\n                text: \"You won't be able to revert this!\",\r\n                type: \"warning\",\r\n                showCancelButton: true,\r\n                confirmButtonColor: \"#3085d6\",\r\n                cancelButtonColor: \"#d33\",\r\n                confirmButtonText: \"Yes, activate it!\"\r\n            }).then(result => {\r\n                if (result.value) {\r\n                    this.$store.commit(mutation.BUTTON_STATUS, true)\r\n                    this.$store.dispatch(action.ACTIVATE_DRIVER, this.driver.users_id);\r\n                }\r\n            });\r\n        },\r\n        async suspendButton() {\r\n            const {\r\n                value: reason\r\n            } = await Swal.fire({\r\n                title: 'Enter the reason of suspending',\r\n                input: 'text',\r\n                showCancelButton: true,\r\n                confirmButtonColor: '#3085d6',\r\n                cancelButtonColor: '#d33',\r\n                confirmButtonText: 'Yes, suspend it!',\r\n                inputValidator: (value) => {\r\n                    if (!value) {\r\n                        return 'You need to write something!'\r\n                    }\r\n                }\r\n            })\r\n            if (reason) {\r\n                this.$store.commit(mutation.BUTTON_STATUS, true)\r\n                this.payload.reason_suspend = reason;\r\n                this.payload.users_id = this.driver.users_id;\r\n                this.payload.iddriver = this.driver.iddriver;\r\n                this.$store.dispatch(action.SUSPEND_DRIVER, this.payload)\r\n            }\r\n        }\r\n    },\r\n    computed: {\r\n        ...mapGetters({\r\n            driver: getter.DRIVER,\r\n            button: getter.GET_BUTTON,\r\n            resendPinButton: getter.GET_BUTTON_RESEND_PIN\r\n\r\n        }),\r\n        profilepicture() {\r\n            if (this.driver.profile_picture == null) {\r\n                return this.alt\r\n            } else {\r\n                return this.driver.profile_picture\r\n            }\r\n        },\r\n        offsetSize() {\r\n            if (this.driver.is_first_login === 1) {\r\n                return 1\r\n            } else {\r\n                return 16\r\n            }\r\n        }\r\n    }\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.card-base {\r\n    padding: 20px;\r\n}\r\n\r\n.el-button  {\r\n    width: 100%;\r\n}\r\n\r\n.el-row {\r\n    padding: 0px 10px;\r\n    margin-bottom: 20px;\r\n    margin-top: -20px;\r\n\r\n    &:last-child {\r\n        margin-bottom: 0;\r\n        margin-top: 0;\r\n    }\r\n}\r\n\r\n.el-col {\r\n    border-radius: 5px;\r\n}\r\n\r\n.el-select {\r\n    width: 100%;\r\n}\r\n\r\n.thumbnail {\r\n    border-radius: 8px;\r\n    position: relative;\r\n    width: 263px;\r\n    height: 300px;\r\n    overflow: hidden;\r\n}\r\n\r\n.thumbnail img {\r\n    border-radius: 8px;\r\n    position: absolute;\r\n    left: 50%;\r\n    top: 50%;\r\n    height: 100%;\r\n    width: auto;\r\n    -webkit-transform: translate(-50%, -50%);\r\n    -ms-transform: translate(-50%, -50%);\r\n    transform: translate(-50%, -50%);\r\n}\r\n\r\n.thumbnail img.portrait {\r\n    width: 100%;\r\n    height: auto;\r\n}\r\n\r\n.topright {\r\n    position: absolute;\r\n    top: 10px;\r\n    right: 60px;\r\n    font-size: 16px;\r\n}\r\n\r\n.disabled {\r\n    pointer-events: none;\r\n    cursor: not-allowed;\r\n    -webkit-box-shadow: none;\r\n    box-shadow: none;\r\n}\r\n\r\n.six {\r\n    border: 0;\r\n    height: 0;\r\n    border-top: 1px solid rgba(0, 0, 0, 0.1);\r\n    border-bottom: 1px solid rgba(255, 255, 255, 0.3);\r\n}\r\n</style>\r\n"]}]}