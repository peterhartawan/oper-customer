{"remainingRequest":"C:\\Users\\ASUS\\Documents\\GitHub\\update-cancel-order-ui\\oper-customer\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ASUS\\Documents\\GitHub\\update-cancel-order-ui\\oper-customer\\src\\views\\pages\\tasktemplate\\new-template-task.vue?vue&type=style&index=1&lang=scss&","dependencies":[{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\update-cancel-order-ui\\oper-customer\\src\\views\\pages\\tasktemplate\\new-template-task.vue","mtime":1644413760627},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\update-cancel-order-ui\\oper-customer\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\update-cancel-order-ui\\oper-customer\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\update-cancel-order-ui\\oper-customer\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\update-cancel-order-ui\\oper-customer\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\update-cancel-order-ui\\oper-customer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\update-cancel-order-ui\\oper-customer\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.sixsix {\r\n    .el-input__inner {\r\n        color: #666666 !important;\r\n    }\r\n\r\n    .el-textarea__inner {\r\n        color: #666666 !important;\r\n    }\r\n}\r\n",{"version":3,"sources":["new-template-task.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4SA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"new-template-task.vue","sourceRoot":"src/views/pages/tasktemplate","sourcesContent":["<template>\r\n<vue-scroll class=\"page-typography\">\r\n    <div class=\"card-base card-shadow--medium bg-white\">\r\n        <el-form ref=\"form\" :rules=\"rules\" :model=\"form\">\r\n            <el-row :gutter=\"20\">\r\n                <el-col :span=\"24\">\r\n                    <div class=\"grid-content\">\r\n                        <el-form-item prop=\"name\">\r\n                            <el-input style=\"width: 70%\" placeholder=\"Template Name\" v-model=\"form.name\">\r\n                            </el-input>\r\n                        </el-form-item>\r\n                    </div>\r\n                </el-col>\r\n            </el-row>\r\n\r\n            <el-row :gutter=\"20\">\r\n                <el-col :span=\"24\">\r\n                    <div class=\"grid-content\">\r\n                        <el-form-item prop=\"description\">\r\n                            <el-input type=\"textarea\" v-model=\"form.description\" placeholder=\"Template Description\" :autosize=\"{ minRows: 5, maxRows: 7}\"></el-input>\r\n                        </el-form-item>\r\n                    </div>\r\n                </el-col>\r\n            </el-row>\r\n\r\n            <el-row>\r\n                <el-col :span=\"24\">\r\n                    <el-col>\r\n                        <span>Task</span>\r\n                        <el-button class=\"el-icon-plus\" type=\"success\" size=\"mini\" @click=\"addButton\" circle style=\"margin-left: 10px\">\r\n                        </el-button>\r\n                        <hr>\r\n                    </el-col>\r\n                </el-col>\r\n            </el-row>\r\n\r\n            <div v-for=\"(domain, index) in form.tasks\" :key=\"domain.key\">\r\n                <el-row :gutter=\"20\">\r\n                    <el-col :span=\"24\">\r\n                        <div class=\"grid-content\">\r\n                            <el-form-item :prop=\"'tasks.' + index + '.name'\" :rules=\"{\r\n                                            required: true, message: 'Task Name can not be null', trigger: 'blur'\r\n                                         }\">\r\n                                <el-input placeholder=\"Task Name\" v-model=\"domain.name\"></el-input>\r\n                            </el-form-item>\r\n                        </div>\r\n                    </el-col>\r\n                </el-row>\r\n\r\n                <el-row>\r\n                    <el-col :span=\"24\">\r\n                        <el-form-item :prop=\"'tasks.' + index + '.task_description'\" :rules=\"{\r\n                                            required: true, message: 'Task Description can not be null', trigger: 'blur'\r\n                                         }\">\r\n                            <el-input type=\"textarea\" v-model=\"domain.task_description\" placeholder=\"Task Description\" :autosize=\"{ minRows: 5, maxRows: 7}\">\r\n                            </el-input>\r\n                        </el-form-item>\r\n                    </el-col>\r\n                </el-row>\r\n                <el-row :gutter=\"20\" v-if=\"!buttonStatus\">\r\n                    <el-col :span=\"24\">\r\n                        <el-form-item :prop=\"'tasks.' + index + '.location_name'\">\r\n                            <el-input class=\"sixsix\" disabled type=\"textarea\" v-model=\"domain.location_name\" placeholder=\"Location Name\" :autosize=\"{ minRows: 1, maxRows: 3}\">\r\n                            </el-input>\r\n                        </el-form-item>\r\n                    </el-col>\r\n                    <el-col :span=\"11\">\r\n                        <div class=\"grid-content\">\r\n                            <el-form-item :prop=\"'tasks.' + index + '.lat'\">\r\n                                <el-input class=\"sixsix\" placeholder=\"Latitude\" disabled v-model=\"domain.lat\"></el-input>\r\n                            </el-form-item>\r\n                        </div>\r\n                    </el-col>\r\n\r\n                    <el-col :span=\"11\">\r\n                        <el-form-item :prop=\"'tasks.' + index + '.long'\">\r\n                            <el-input class=\"sixsix\" v-model=\"domain.long\" disabled placeholder=\"Longitude\">\r\n                            </el-input>\r\n                        </el-form-item>\r\n                    </el-col>\r\n\r\n                    <el-col :span=\"2\">\r\n                        <el-button type=\"primary\" @click=\"dialogTrack(domain)\" icon=\"el-icon-location\" circle></el-button>\r\n                    </el-col>\r\n\r\n                </el-row>\r\n\r\n                <el-row :gutter=\"20\">\r\n                    <el-col :span=\"6\">\r\n                        <el-checkbox label=\"is Required\" v-model=\"domain.is_required\"></el-checkbox>\r\n                    </el-col>\r\n                    <el-col :span=\"6\">\r\n                        <el-checkbox label=\"need Foto\" v-model=\"domain.is_need_photo\"></el-checkbox>\r\n                    </el-col>\r\n                    <el-col :span=\"6\">\r\n                        <el-checkbox label=\"need Validation\" v-if=\"buttonStatus\" v-model=\"domain.is_need_inspector_validation\"></el-checkbox>\r\n                    </el-col>\r\n                    <el-col :span=\"6\">\r\n                        <el-button class=\"el-icon-minus\" type=\"danger\" size=\"mini\" @click.prevent=\"removeDomain(domain)\" circle style=\"margin-bottom: 11px; margin-left: 20px\">\r\n                        </el-button>\r\n                    </el-col>\r\n                </el-row>\r\n                <hr>\r\n            </div>\r\n\r\n            <el-row>\r\n                <el-col :lg=\"{offset:18, span:6}\" style=\"display: flex; justify-content: flex-end\">\r\n                    <div class=\"grid-content\">\r\n                        <el-form-item>\r\n                            <el-button type=\"success\" v-loading.fullscreen.lock=\"buttonStatuz\" @click=\"onSubmit('form')\">Create</el-button>\r\n                            <el-button @click=\"isCancle\">Cancel</el-button>\r\n                        </el-form-item>\r\n                    </div>\r\n                </el-col>\r\n            </el-row>\r\n        </el-form>\r\n\r\n        <el-dialog :visible.sync=\"dialogV\" :before-close=\"handleClose\" width=\"70%\">\r\n            <div class=\"card-base card-shadow--medium\">\r\n                <gmap-map ref=\"map\" :center=\"center\" :zoom=\"12\" :options=\"{gestureHandling:'cooperative'}\" map-type-id=\"roadmap\" style=\"width: 100%; height: 500px\">\r\n                    <GmapMarker @drag=\"updateCoordinates\" :draggable=\"true\" :position=\"markers\" label=\"S\" />\r\n\r\n                </gmap-map>\r\n            </div>\r\n            <el-button @click=\"closeDialog\" class=\"mt-10\">Save</el-button>\r\n        </el-dialog>\r\n    </div>\r\n</vue-scroll>\r\n</template>\r\n\r\n<script>\r\nimport router from '../../../router'\r\nimport * as action from '../../../store/action-types'\r\nimport * as getter from '../../../store/getters-types'\r\nimport * as mutation from '../../../store/mutation-types'\r\nimport {\r\n    mapGetters\r\n} from 'vuex'\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            buttonStatus: null,\r\n            dialogVisible: false,\r\n            currentPlace: null,\r\n            markers: {\r\n                lat: -6.193619252954559,\r\n                lng: 106.76330885229345,\r\n            },\r\n            center: {\r\n                lat: -6.193619252954559,\r\n                lng: 106.76330885229345,\r\n            },\r\n            keyVal: '',\r\n            form: {\r\n                name: '',\r\n                fullscreen_loading: false,\r\n                description: '',\r\n                tasks: [{\r\n                    key: 1,\r\n                    name: '',\r\n                    task_description: '',\r\n                    location_name: '',\r\n                    lat: '',\r\n                    long: '',\r\n                    is_required: false,\r\n                    is_need_photo: false,\r\n                    is_need_inspector_validation: false\r\n                }],\r\n            },\r\n            rules: {\r\n                name: [{\r\n                    required: true,\r\n                    message: 'Please Input Template Name',\r\n                    trigger: 'blur'\r\n                }],\r\n                description: [{\r\n                    required: true,\r\n                    message: 'Please Input Description',\r\n                    trigger: 'blur'\r\n                }],\r\n\r\n            }\r\n        }\r\n    },\r\n    methods: {\r\n        onSubmit(formName) {\r\n            let obj = {\r\n                name: this.form.name,\r\n                description: this.form.description,\r\n                tasks: this.form.tasks,\r\n                identerprise: this.identer\r\n            };\r\n            this.$refs[formName].validate((valid) => {\r\n                if (valid) {\r\n                    this.$store.commit(mutation.BUTTON_STATUS, true)\r\n                    this.$store.dispatch(action.CREATE_TEMPLATE_TASK, obj)\r\n                } else {\r\n                    return false;\r\n                }\r\n            });\r\n        },\r\n        dialogTrack(domain) {\r\n            this.keyVal = domain.key\r\n            this.$store.commit(mutation.SET_DIALOG_VISIBLE, true)\r\n        },\r\n        addButton() {\r\n            this.form.tasks.push({\r\n                key: Date.now(),\r\n                name: '',\r\n                task_description: '',\r\n                lat: '',\r\n                long: '',\r\n                location_name: '',\r\n                is_required: false,\r\n                is_need_photo: false,\r\n                is_need_inspector_validation: false\r\n            })\r\n        },\r\n        isCancle() {\r\n            router.push('/template-list')\r\n        },\r\n        removeDomain(item) {\r\n            let index = this.form.tasks.indexOf(item);\r\n            if (index !== -1) {\r\n                this.form.tasks.splice(index, 1);\r\n            }\r\n        },\r\n        updateCoordinates(location) {\r\n            const geocoder = new google.maps.Geocoder()\r\n            geocoder.geocode({\r\n                'latLng': location.latLng\r\n            }, (result, status) => {\r\n                if (status === google.maps.GeocoderStatus.OK) {\r\n                    this.markers = {\r\n                        lat: location.latLng.lat(),\r\n                        lng: location.latLng.lng(),\r\n                    };\r\n                    let objIndex = this.form.tasks.findIndex((obj => obj.key == this.keyVal))\r\n\r\n                    this.form.tasks[objIndex].lat = location.latLng.lat(),\r\n                        this.form.tasks[objIndex].long = location.latLng.lng(),\r\n                        this.form.tasks[objIndex].location_name = result[0].formatted_address\r\n                }\r\n            })\r\n        },\r\n        closeDialog() {\r\n            this.$store.commit(mutation.SET_DIALOG_VISIBLE, false)\r\n        },\r\n        handleClose(done) {\r\n            this.$confirm('Are you sure to close this map?')\r\n                .then(_ => {\r\n                    this.$store.commit(mutation.SET_DIALOG_VISIBLE, false)\r\n                })\r\n                .catch(_ => {});\r\n        }\r\n    },\r\n    computed: {\r\n        ...mapGetters({\r\n            identer: getter.GET_ID_ENTERPRISE,\r\n            button: getter.GET_BUTTON,\r\n            positionT: getter.GET_POSITION_TEMPLATE,\r\n            dialogV: getter.GET_DIALOG_VISIBLE\r\n        }),\r\n        buttonStatuz: function () {\r\n            return this.form.fullscreen_loading = this.button\r\n        }\r\n    },\r\n    created() {\r\n        let roleId = Number(process.env.VUE_APP_ROLE_VENDOR);\r\n        let roleId2 = Number(process.env.VUE_APP_ROLE_SUPERADMIN);\r\n        if (JSON.parse(localStorage.getItem('user')).idrole === roleId || JSON.parse(localStorage.getItem('user')).idrole === roleId2 ) {\r\n            this.buttonStatus = false;\r\n        } else {\r\n            this.buttonStatus = true;\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import '../../../assets/scss/variables';\r\n\r\n.card-base {\r\n    padding: 20px;\r\n}\r\n\r\n.el-row {\r\n    padding: 0px 10px;\r\n\r\n    &:last-child {\r\n        margin-bottom: 0;\r\n    }\r\n}\r\n\r\n.el-col {\r\n    border-radius: 5px;\r\n}\r\n</style>\r\n<style lang=\"scss\">\r\n.sixsix {\r\n    .el-input__inner {\r\n        color: #666666 !important;\r\n    }\r\n\r\n    .el-textarea__inner {\r\n        color: #666666 !important;\r\n    }\r\n}\r\n</style>\r\n"]}]}