{"remainingRequest":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/src/views/pages/attendance/list-attendance-driver.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/src/views/pages/attendance/list-attendance-driver.vue","mtime":1641485046393},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/cache-loader/dist/cjs.js","mtime":1640440446558},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/babel-loader/lib/index.js","mtime":1640440446305},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/cache-loader/dist/cjs.js","mtime":1640440446558},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/vue-loader/lib/index.js","mtime":1640440454211}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport moment from \"moment\";\nimport Affix from \"@/components/Affix\";\nimport { mapGetters, mapActions } from \"vuex\";\nimport * as getter from \"../../../store/getters-types\";\nimport * as action from \"../../../store/action-types\";\nimport * as mutation from \"../../../store/mutation-types\";\nimport swal from \"sweetalert2\";\n\nexport default {\n  name: \"Attendance\",\n  data() {\n    return {\n      dialogVisible: false,\n      currentPage: 1,\n      input: \"\",\n      affixEnabled: true,\n      indexT: \"\",\n      userid: null,\n      date: null,\n      radio: null,\n      month: null,\n      tableData: null,\n      totalData: null,\n      mapMark: null,\n      markers: [],\n      mapLine: null,\n      path: [],\n      markDefault: {\n        lat: -6.21462,\n        lng: 106.84513,\n      },\n      resultTrack: null,\n      image_url: null,\n      info_marker: null,\n      infowindow: {\n        lat: 0,\n        lng: 0,\n        name: null,\n      },\n      orangeIcon: require(\"@/assets/images/orange-dot.png\"),\n      redIcon: require(\"@/assets/images/red-dot.png\"),\n      blueDot: require(\"@/assets/images/blue-dot.png\"),\n      window_open: false,\n    };\n  },\n  components: {\n    Affix,\n  },\n  computed: {\n    ...mapGetters({\n      listData: getter.GET_LIST_ATT,\n      paginate: getter.GET_PAGINATE_ATT,\n      dropDown: getter.GET_DROPDOWN_DRIVER,\n      filterAttendance: getter.GET_FILTER_ATT,\n      attTotal: getter.GET_ATT_TOTAL,\n      filterTotal: getter.GET_FILTER_TOTAL,\n      button: getter.GET_BUTTON,\n      loading: getter.GET_LOADING,\n      attendance: getter.GET_TRACKING_ATTENDANCE,\n    }),\n    paginator() {\n      return this.paginate;\n    },\n    indexTam() {\n      return this.indexT;\n    },\n    disableRadio1() {\n      if (this.radio == 2) {\n        return true;\n      } else if (this.radio == 1) {\n        return false;\n      } else {\n        return true;\n      }\n    },\n    disableRadio2() {\n      if (this.radio == 1) {\n        return true;\n      } else if (this.radio == 2) {\n        return false;\n      } else {\n        return true;\n      }\n    },\n    dateExport() {\n      if (this.date) {\n        const foo = {\n          startdate: this.date[0],\n          duedate: this.date[1],\n        };\n        return foo;\n      } else if (this.month == 99) {\n        const foo = {\n          startdate: this.forToday,\n          duedate: this.forToday,\n        };\n        return foo;\n      } else {\n        return null;\n      }\n    },\n    forToday() {\n      let today = new Date();\n      let dd = String(today.getDate()).padStart(2, \"0\");\n      let mm = String(today.getMonth() + 1).padStart(2, \"0\"); //January is 0!\n      let yyyy = today.getFullYear();\n      today = yyyy + \"-\" + mm + \"-\" + dd;\n      return today;\n    },\n  },\n  async mounted() {\n    await this.$store.commit(mutation.BUTTON_STATUS, false);\n    await this.$store.commit(mutation.SET_LOADING, true);\n    await this.$store.dispatch(action.LIST_ATT_DRIVER, this.currentPage);\n    this.tableData = this.listData;\n    console.log(\"listData \", this.listData);\n    this.totalData = this.attTotal;\n    this.$store.dispatch(action.DROPDOWN_DRIVER);\n  },\n  methods: {\n    removeDate2() {\n      this.month = null;\n    },\n    removeDate() {\n      this.date = null;\n    },\n    openWindow(position) {\n      this.window_open = true;\n      this.infowindow.lat = position.lat;\n      this.infowindow.lng = position.lng;\n      this.infowindow.name = position.name;\n    },\n    Dialog(foo, e) {\n      e.stopPropagation();\n      this.image_url = foo;\n      this.dialogVisible = true;\n    },\n    async exportExcel() {\n      let data = \"\";\n      if (this.dateExport == null) {\n        swal(\"Please select a start date\", \"\", \"error\");\n      } else {\n        if (this.userid) {\n          let obj = {\n            date: this.dateExport,\n            path: \"driver\",\n            userid: this.userid,\n          };\n          this.$store.commit(mutation.BUTTON_STATUS, true);\n          data = await this.$store.dispatch(action.EXPORT_ATTENDANCE, obj);\n          let firstD = data.slice(1);\n          let secondD = firstD.slice(0, firstD.length - 1);\n          window.open(secondD);\n        } else if ((this.userid == null) | (this.userid == 0)) {\n          let obj = {\n            date: this.dateExport,\n            path: \"driver\",\n            userid: null,\n          };\n          this.$store.commit(mutation.BUTTON_STATUS, true);\n          data = await this.$store.dispatch(action.EXPORT_ATTENDANCE, obj);\n          let firstD = data.slice(1);\n          let secondD = firstD.slice(0, firstD.length - 1);\n          window.open(secondD);\n        }\n      }\n    },\n    async onFind() {\n      if (this.userid == null) {\n        this.currentPage = 1;\n        await this.$store.commit(mutation.BUTTON_STATUS, true);\n        await this.$store.dispatch(action.FILTER_DRIVER, {\n          radio: this.radio,\n          iduser: 0,\n          today: this.forToday,\n          idmonth: this.month,\n          startdate: this.date ? this.date[0] : null,\n          duedate: this.date ? this.date[1] : null,\n          page: 1,\n        });\n      } else {\n        this.currentPage = 1;\n        await this.$store.commit(mutation.BUTTON_STATUS, true);\n        await this.$store.dispatch(action.FILTER_DRIVER, {\n          radio: this.radio,\n          iduser: this.userid,\n          today: this.forToday,\n          idmonth: this.month,\n          startdate: this.date ? this.date[0] : null,\n          duedate: this.date ? this.date[1] : null,\n          page: 1,\n        });\n      }\n      this.tableData = this.filterAttendance;\n      this.totalData = this.filterTotal;\n      this.markers = [];\n      this.path = [];\n      this.window_open = false;\n      for (var i = 0; i < this.tableData.length; i++) {\n        const marker = {\n          lat: parseFloat(this.tableData[i].clock_in_latitude),\n          lng: parseFloat(this.tableData[i].clock_in_longitude),\n          name:\n            this.tableData[i].name +\n            \", \" +\n            this.tableData[i].clock_in +\n            \" (CLOCK IN)\",\n          icon: this.redIcon,\n        };\n        this.markDefault.lat = parseFloat(this.tableData[i].clock_in_latitude);\n        this.markDefault.lng = parseFloat(this.tableData[i].clock_in_longitude);\n        this.markers.push({\n          position: marker,\n        });\n        this.mapMark = 1;\n      }\n      for (var i = 0; i < this.tableData.length; i++) {\n        const marker = {\n          lat: parseFloat(this.tableData[i].clock_out_latitude),\n          lng: parseFloat(this.tableData[i].clock_out_longitude),\n          name:\n            this.tableData[i].name +\n            \", \" +\n            this.tableData[i].clock_out +\n            \" (CLOCK OUT)\",\n          icon: this.orangeIcon,\n        };\n        this.markers.push({\n          position: marker,\n        });\n      }\n    },\n    async handlePageChange(currentpage) {\n      this.currentPage = currentpage;\n      if (this.userid == null) {\n        await this.$store.commit(mutation.SET_LOADING, true);\n        await this.$store.dispatch(action.FILTER_DRIVER, {\n          radio: this.radio,\n          iduser: 0,\n          idmonth: this.month,\n          today: this.forToday,\n          startdate: this.date ? this.date[0] : null,\n          duedate: this.date ? this.date[1] : null,\n          page: this.currentPage,\n        });\n      } else {\n        await this.$store.commit(mutation.SET_LOADING, true);\n        await this.$store.dispatch(action.FILTER_DRIVER, {\n          radio: this.radio,\n          iduser: this.userid,\n          idmonth: this.month,\n          today: this.forToday,\n          startdate: this.date ? this.date[0] : null,\n          duedate: this.date ? this.date[1] : null,\n          page: this.currentPage,\n        });\n      }\n      this.tableData = this.filterAttendance;\n      this.totalData = this.filterTotal;\n      this.markers = [];\n      this.path = [];\n      this.window_open = false;\n      for (var i = 0; i < this.tableData.length; i++) {\n        const marker = {\n          lat: parseFloat(this.tableData[i].clock_in_latitude),\n          lng: parseFloat(this.tableData[i].clock_in_longitude),\n          name:\n            this.tableData[i].name +\n            \", \" +\n            this.tableData[i].clock_in +\n            \" (CLOCK IN)\",\n          icon: this.redIcon,\n        };\n        this.markDefault.lat = parseFloat(this.tableData[i].clock_in_latitude);\n        this.markDefault.lng = parseFloat(this.tableData[i].clock_in_longitude);\n        this.markers.push({\n          position: marker,\n        });\n        this.mapMark = 1;\n      }\n      for (var i = 0; i < this.tableData.length; i++) {\n        const marker = {\n          lat: parseFloat(this.tableData[i].clock_out_latitude),\n          lng: parseFloat(this.tableData[i].clock_out_longitude),\n          name:\n            this.tableData[i].name +\n            \", \" +\n            this.tableData[i].clock_out +\n            \" (CLOCK OUT)\",\n          icon: this.orangeIcon,\n        };\n        this.markers.push({\n          position: marker,\n        });\n      }\n    },\n    async getId(id) {\n      await this.$store.commit(mutation.SET_LOADING, true);\n      await this.$store.dispatch(action.TRACKING_ATTENDANCE, id.id);\n      await this.attendance;\n      if (this.attendance.length == 0) {\n        swal(\"This user does not have any tracking yet\", \"\", \"\");\n      } else {\n        this.markers = [];\n        this.path = [];\n        this.window_open = false;\n        for (var i = 0; i < this.attendance.length; i++) {\n          const marker = {\n            lat: parseFloat(this.attendance[i].latitude),\n            lng: parseFloat(this.attendance[i].longitude),\n            name: id.name + \", \" + this.attendance[i].created_at,\n            icon: this.blueDot,\n          };\n          this.markDefault.lat = parseFloat(this.attendance[i].latitude);\n          this.markDefault.lng = parseFloat(this.attendance[i].longitude);\n          this.markers.push({\n            position: marker,\n          });\n          this.path.push({\n            lat: parseFloat(this.attendance[i].latitude),\n            lng: parseFloat(this.attendance[i].longitude),\n          });\n          this.mapLine = 1;\n          this.mapMark = 1;\n        }\n      }\n      var self = this;\n      setTimeout(function () {\n        self.$refs.topside.scrollTop = 0;\n      }, 900);\n    },\n    indexMethod(index) {\n      return index + this.paginator.fromP;\n    },\n  },\n  async created() {\n    await this.$store.dispatch(action.LIST_ATT_DRIVER, this.currentPage);\n    await this.listData;\n    this.markers = [];\n    this.path = [];\n    this.window_open = false;\n    for (var i = 0; i < this.listData.length; i++) {\n      const marker = {\n        lat: parseFloat(this.listData[i].clock_in_latitude),\n        lng: parseFloat(this.listData[i].clock_in_longitude),\n        name:\n          this.listData[i].name +\n          \", \" +\n          this.listData[i].clock_in +\n          \" (CLOCK IN)\",\n        icon: this.redIcon,\n      };\n      this.markDefault.lat = parseFloat(this.listData[i].clock_in_latitude);\n      this.markDefault.lng = parseFloat(this.listData[i].clock_in_longitude);\n      this.markers.push({\n        position: marker,\n      });\n      this.mapMark = 1;\n    }\n    for (var i = 0; i < this.listData.length; i++) {\n      const marker = {\n        lat: parseFloat(this.listData[i].clock_out_latitude),\n        lng: parseFloat(this.listData[i].clock_out_longitude),\n        name:\n          this.listData[i].name +\n          \", \" +\n          this.listData[i].clock_out +\n          \" (CLOCK OUT)\",\n        icon: this.orangeIcon,\n      };\n      this.markers.push({\n        position: marker,\n      });\n    }\n  },\n};\n",{"version":3,"sources":["list-attendance-driver.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"list-attendance-driver.vue","sourceRoot":"src/views/pages/attendance","sourcesContent":["<template>\n  <div class=\"page-table scrollable only-y\" ref=\"topside\" id=\"affix-container\">\n    <div class=\"card-base card-shadow--medium bg-white\" v-loading=\"loading\">\n      <gmap-map\n        :center=\"markDefault\"\n        :zoom=\"16\"\n        map-type-id=\"terrain\"\n        style=\"width: 100%; height: 500px\"\n      >\n        <div v-if=\"mapMark\">\n          <gmap-marker\n            :key=\"index\"\n            v-for=\"(m, index) in markers\"\n            :icon=\"{ url: m.position.icon }\"\n            :position=\"m.position\"\n            :clickable=\"true\"\n            @click=\"openWindow(m.position)\"\n          ></gmap-marker>\n          <gmap-info-window\n            @closeclick=\"window_open = false\"\n            :opened=\"window_open\"\n            :position=\"infowindow\"\n            :options=\"{ pixelOffset: { width: 0, height: -35 } }\"\n          >\n            {{ infowindow.name }}\n          </gmap-info-window>\n        </div>\n        <div v-if=\"mapLine\">\n          <gmap-polyline\n            :path=\"path\"\n            v-bind:options=\"{ strokeColor: '#BB0000' }\"\n          >\n          </gmap-polyline>\n        </div>\n      </gmap-map>\n      <el-row style=\"margin-top: 20px; margin-left: 3px\" :gutter=\"20\">\n        <el-col :span=\"1\">\n          <p style=\"margin-top: 7px\">Driver:</p>\n        </el-col>\n        <el-col :span=\"6\">\n          <el-select\n            style=\"width: 100%; margin-left: 20px\"\n            v-model=\"userid\"\n            filterable\n            placeholder=\"Driver Name\"\n          >\n            <el-option label=\"All Drivers\" value=\"0\">All Drivers</el-option>\n            <el-option\n              v-for=\"item in dropDown\"\n              :key=\"item.id\"\n              :label=\"item.name\"\n              :value=\"item.id\"\n            ></el-option>\n          </el-select>\n        </el-col>\n        <el-col :span=\"1\">\n          <p style=\"margin-top: 7px; margin-left: 15px\">Time:</p>\n        </el-col>\n        <el-col :span=\"1\">\n          <el-radio\n            style=\"margin-top: 10px; margin-left: 25px\"\n            v-model=\"radio\"\n            label=\"1\"\n            ><br\n          /></el-radio>\n        </el-col>\n        <el-col :span=\"4\">\n          <el-select\n            style=\"width: 100%; margin-left: 15px\"\n            v-model=\"month\"\n            placeholder=\"Select\"\n            @change=\"removeDate\"\n            :disabled=\"disableRadio1\"\n          >\n            <el-option label=\"Today\" selected value=\"99\">Today</el-option>\n            <el-option label=\"All Months\" selected value=\"0\"\n              >All Months</el-option\n            >\n            <el-option label=\"January\" selected value=\"1\">January</el-option>\n            <el-option label=\"February\" value=\"2\">February</el-option>\n            <el-option label=\"March\" value=\"3\">March</el-option>\n            <el-option label=\"April\" value=\"4\">April</el-option>\n            <el-option label=\"May\" value=\"5\">May</el-option>\n            <el-option label=\"June\" value=\"6\">June</el-option>\n            <el-option label=\"July\" value=\"7\">July</el-option>\n            <el-option label=\"August\" value=\"8\">August</el-option>\n            <el-option label=\"September\" value=\"9\">September</el-option>\n            <el-option label=\"October\" value=\"10\">October</el-option>\n            <el-option label=\"November\" value=\"11\">November</el-option>\n            <el-option label=\"December\" value=\"12\">December</el-option>\n          </el-select>\n        </el-col>\n        <el-col :span=\"1\">\n          <el-radio\n            style=\"margin-top: 10px; margin-left: 10px\"\n            v-model=\"radio\"\n            label=\"2\"\n          >\n            <p><br /></p>\n          </el-radio>\n        </el-col>\n        <el-col :span=\"8\">\n          <el-date-picker\n            style=\"width: 100%\"\n            value-format=\"yyyy-MM-dd\"\n            :disabled=\"disableRadio2\"\n            @change=\"removeDate2\"\n            v-model=\"date\"\n            type=\"daterange\"\n          >\n          </el-date-picker>\n        </el-col>\n        <el-col :span=\"1\">\n          <el-button\n            icon=\"el-icon-search\"\n            style=\"background: #d50000; font-size: 17px; color: white\"\n            :loading=\"button\"\n            @click=\"onFind\"\n            square\n            size=\"small\"\n          ></el-button>\n        </el-col>\n      </el-row>\n      <el-row :gutter=\"10\">\n        <el-col :span=\"24\">\n          <el-table :data=\"tableData\" style=\"width: 100%\" @row-click=\"getId\">\n            <el-table-column\n              type=\"index\"\n              :index=\"indexMethod\"\n              align=\"center\"\n              label=\"NO\"\n              width=\"60\"\n            ></el-table-column>\n            <el-table-column align=\"center\" width=\"100\" label=\"PHOTO\">\n              <template slot-scope=\"scope\">\n                <img\n                  style=\"width: 35px; height: 35px; border-radius: 50%\"\n                  :src=\"scope.row.profile_picture\"\n                />\n              </template>\n            </el-table-column>\n            <el-table-column\n              prop=\"name\"\n              align=\"center\"\n              label=\"DRIVER INFO\"\n            ></el-table-column>\n            <el-table-column\n              prop=\"clock_in\"\n              header-align=\"center\"\n              label=\"CHECK IN\"\n            ></el-table-column>\n            <el-table-column\n              prop=\"clock_out\"\n              header-align=\"center\"\n              label=\"CHECK OUT\"\n            ></el-table-column>\n            <el-table-column\n              prop=\"remark\"\n              header-align=\"center\"\n              label=\"MESSAGE\"\n            ></el-table-column>\n            <el-table-column align=\"center\" label=\"\">\n              <template slot-scope=\"scope\">\n                <img\n                  style=\"width: 35px; height: 35px\"\n                  @click=\"Dialog(scope.row.image_url, $event)\"\n                  :src=\"scope.row.image_url\"\n                />\n              </template>\n            </el-table-column>\n          </el-table>\n        </el-col>\n      </el-row>\n      <div v-if=\"date || month == 99\">\n        <el-col :span=\"3\">\n          <el-button\n            style=\"\n              width: 100%;\n              margin-left: 30px;\n              margin-bottom: 5px;\n              background-color: #d50000;\n            \"\n            :loading=\"button\"\n            type=\"danger\"\n            @click=\"exportExcel\"\n          >\n            Export\n          </el-button>\n        </el-col>\n      </div>\n      <div align=\"right\" style=\"margin-bottom: 10px\">\n        <el-pagination\n          background\n          layout=\"prev, pager, next\"\n          :current-page.sync=\"currentPage\"\n          @current-change=\"handlePageChange\"\n          :total=\"totalData\"\n        ></el-pagination>\n      </div>\n    </div>\n    <el-dialog :visible.sync=\"dialogVisible\" width=\"25%\">\n      <center>\n        <div v-if=\"image_url\">\n          <img style=\"max-width: 250px; max-height: 250px\" :src=\"image_url\" />\n        </div>\n      </center>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport moment from \"moment\";\nimport Affix from \"@/components/Affix\";\nimport { mapGetters, mapActions } from \"vuex\";\nimport * as getter from \"../../../store/getters-types\";\nimport * as action from \"../../../store/action-types\";\nimport * as mutation from \"../../../store/mutation-types\";\nimport swal from \"sweetalert2\";\n\nexport default {\n  name: \"Attendance\",\n  data() {\n    return {\n      dialogVisible: false,\n      currentPage: 1,\n      input: \"\",\n      affixEnabled: true,\n      indexT: \"\",\n      userid: null,\n      date: null,\n      radio: null,\n      month: null,\n      tableData: null,\n      totalData: null,\n      mapMark: null,\n      markers: [],\n      mapLine: null,\n      path: [],\n      markDefault: {\n        lat: -6.21462,\n        lng: 106.84513,\n      },\n      resultTrack: null,\n      image_url: null,\n      info_marker: null,\n      infowindow: {\n        lat: 0,\n        lng: 0,\n        name: null,\n      },\n      orangeIcon: require(\"@/assets/images/orange-dot.png\"),\n      redIcon: require(\"@/assets/images/red-dot.png\"),\n      blueDot: require(\"@/assets/images/blue-dot.png\"),\n      window_open: false,\n    };\n  },\n  components: {\n    Affix,\n  },\n  computed: {\n    ...mapGetters({\n      listData: getter.GET_LIST_ATT,\n      paginate: getter.GET_PAGINATE_ATT,\n      dropDown: getter.GET_DROPDOWN_DRIVER,\n      filterAttendance: getter.GET_FILTER_ATT,\n      attTotal: getter.GET_ATT_TOTAL,\n      filterTotal: getter.GET_FILTER_TOTAL,\n      button: getter.GET_BUTTON,\n      loading: getter.GET_LOADING,\n      attendance: getter.GET_TRACKING_ATTENDANCE,\n    }),\n    paginator() {\n      return this.paginate;\n    },\n    indexTam() {\n      return this.indexT;\n    },\n    disableRadio1() {\n      if (this.radio == 2) {\n        return true;\n      } else if (this.radio == 1) {\n        return false;\n      } else {\n        return true;\n      }\n    },\n    disableRadio2() {\n      if (this.radio == 1) {\n        return true;\n      } else if (this.radio == 2) {\n        return false;\n      } else {\n        return true;\n      }\n    },\n    dateExport() {\n      if (this.date) {\n        const foo = {\n          startdate: this.date[0],\n          duedate: this.date[1],\n        };\n        return foo;\n      } else if (this.month == 99) {\n        const foo = {\n          startdate: this.forToday,\n          duedate: this.forToday,\n        };\n        return foo;\n      } else {\n        return null;\n      }\n    },\n    forToday() {\n      let today = new Date();\n      let dd = String(today.getDate()).padStart(2, \"0\");\n      let mm = String(today.getMonth() + 1).padStart(2, \"0\"); //January is 0!\n      let yyyy = today.getFullYear();\n      today = yyyy + \"-\" + mm + \"-\" + dd;\n      return today;\n    },\n  },\n  async mounted() {\n    await this.$store.commit(mutation.BUTTON_STATUS, false);\n    await this.$store.commit(mutation.SET_LOADING, true);\n    await this.$store.dispatch(action.LIST_ATT_DRIVER, this.currentPage);\n    this.tableData = this.listData;\n    console.log(\"listData \", this.listData);\n    this.totalData = this.attTotal;\n    this.$store.dispatch(action.DROPDOWN_DRIVER);\n  },\n  methods: {\n    removeDate2() {\n      this.month = null;\n    },\n    removeDate() {\n      this.date = null;\n    },\n    openWindow(position) {\n      this.window_open = true;\n      this.infowindow.lat = position.lat;\n      this.infowindow.lng = position.lng;\n      this.infowindow.name = position.name;\n    },\n    Dialog(foo, e) {\n      e.stopPropagation();\n      this.image_url = foo;\n      this.dialogVisible = true;\n    },\n    async exportExcel() {\n      let data = \"\";\n      if (this.dateExport == null) {\n        swal(\"Please select a start date\", \"\", \"error\");\n      } else {\n        if (this.userid) {\n          let obj = {\n            date: this.dateExport,\n            path: \"driver\",\n            userid: this.userid,\n          };\n          this.$store.commit(mutation.BUTTON_STATUS, true);\n          data = await this.$store.dispatch(action.EXPORT_ATTENDANCE, obj);\n          let firstD = data.slice(1);\n          let secondD = firstD.slice(0, firstD.length - 1);\n          window.open(secondD);\n        } else if ((this.userid == null) | (this.userid == 0)) {\n          let obj = {\n            date: this.dateExport,\n            path: \"driver\",\n            userid: null,\n          };\n          this.$store.commit(mutation.BUTTON_STATUS, true);\n          data = await this.$store.dispatch(action.EXPORT_ATTENDANCE, obj);\n          let firstD = data.slice(1);\n          let secondD = firstD.slice(0, firstD.length - 1);\n          window.open(secondD);\n        }\n      }\n    },\n    async onFind() {\n      if (this.userid == null) {\n        this.currentPage = 1;\n        await this.$store.commit(mutation.BUTTON_STATUS, true);\n        await this.$store.dispatch(action.FILTER_DRIVER, {\n          radio: this.radio,\n          iduser: 0,\n          today: this.forToday,\n          idmonth: this.month,\n          startdate: this.date ? this.date[0] : null,\n          duedate: this.date ? this.date[1] : null,\n          page: 1,\n        });\n      } else {\n        this.currentPage = 1;\n        await this.$store.commit(mutation.BUTTON_STATUS, true);\n        await this.$store.dispatch(action.FILTER_DRIVER, {\n          radio: this.radio,\n          iduser: this.userid,\n          today: this.forToday,\n          idmonth: this.month,\n          startdate: this.date ? this.date[0] : null,\n          duedate: this.date ? this.date[1] : null,\n          page: 1,\n        });\n      }\n      this.tableData = this.filterAttendance;\n      this.totalData = this.filterTotal;\n      this.markers = [];\n      this.path = [];\n      this.window_open = false;\n      for (var i = 0; i < this.tableData.length; i++) {\n        const marker = {\n          lat: parseFloat(this.tableData[i].clock_in_latitude),\n          lng: parseFloat(this.tableData[i].clock_in_longitude),\n          name:\n            this.tableData[i].name +\n            \", \" +\n            this.tableData[i].clock_in +\n            \" (CLOCK IN)\",\n          icon: this.redIcon,\n        };\n        this.markDefault.lat = parseFloat(this.tableData[i].clock_in_latitude);\n        this.markDefault.lng = parseFloat(this.tableData[i].clock_in_longitude);\n        this.markers.push({\n          position: marker,\n        });\n        this.mapMark = 1;\n      }\n      for (var i = 0; i < this.tableData.length; i++) {\n        const marker = {\n          lat: parseFloat(this.tableData[i].clock_out_latitude),\n          lng: parseFloat(this.tableData[i].clock_out_longitude),\n          name:\n            this.tableData[i].name +\n            \", \" +\n            this.tableData[i].clock_out +\n            \" (CLOCK OUT)\",\n          icon: this.orangeIcon,\n        };\n        this.markers.push({\n          position: marker,\n        });\n      }\n    },\n    async handlePageChange(currentpage) {\n      this.currentPage = currentpage;\n      if (this.userid == null) {\n        await this.$store.commit(mutation.SET_LOADING, true);\n        await this.$store.dispatch(action.FILTER_DRIVER, {\n          radio: this.radio,\n          iduser: 0,\n          idmonth: this.month,\n          today: this.forToday,\n          startdate: this.date ? this.date[0] : null,\n          duedate: this.date ? this.date[1] : null,\n          page: this.currentPage,\n        });\n      } else {\n        await this.$store.commit(mutation.SET_LOADING, true);\n        await this.$store.dispatch(action.FILTER_DRIVER, {\n          radio: this.radio,\n          iduser: this.userid,\n          idmonth: this.month,\n          today: this.forToday,\n          startdate: this.date ? this.date[0] : null,\n          duedate: this.date ? this.date[1] : null,\n          page: this.currentPage,\n        });\n      }\n      this.tableData = this.filterAttendance;\n      this.totalData = this.filterTotal;\n      this.markers = [];\n      this.path = [];\n      this.window_open = false;\n      for (var i = 0; i < this.tableData.length; i++) {\n        const marker = {\n          lat: parseFloat(this.tableData[i].clock_in_latitude),\n          lng: parseFloat(this.tableData[i].clock_in_longitude),\n          name:\n            this.tableData[i].name +\n            \", \" +\n            this.tableData[i].clock_in +\n            \" (CLOCK IN)\",\n          icon: this.redIcon,\n        };\n        this.markDefault.lat = parseFloat(this.tableData[i].clock_in_latitude);\n        this.markDefault.lng = parseFloat(this.tableData[i].clock_in_longitude);\n        this.markers.push({\n          position: marker,\n        });\n        this.mapMark = 1;\n      }\n      for (var i = 0; i < this.tableData.length; i++) {\n        const marker = {\n          lat: parseFloat(this.tableData[i].clock_out_latitude),\n          lng: parseFloat(this.tableData[i].clock_out_longitude),\n          name:\n            this.tableData[i].name +\n            \", \" +\n            this.tableData[i].clock_out +\n            \" (CLOCK OUT)\",\n          icon: this.orangeIcon,\n        };\n        this.markers.push({\n          position: marker,\n        });\n      }\n    },\n    async getId(id) {\n      await this.$store.commit(mutation.SET_LOADING, true);\n      await this.$store.dispatch(action.TRACKING_ATTENDANCE, id.id);\n      await this.attendance;\n      if (this.attendance.length == 0) {\n        swal(\"This user does not have any tracking yet\", \"\", \"\");\n      } else {\n        this.markers = [];\n        this.path = [];\n        this.window_open = false;\n        for (var i = 0; i < this.attendance.length; i++) {\n          const marker = {\n            lat: parseFloat(this.attendance[i].latitude),\n            lng: parseFloat(this.attendance[i].longitude),\n            name: id.name + \", \" + this.attendance[i].created_at,\n            icon: this.blueDot,\n          };\n          this.markDefault.lat = parseFloat(this.attendance[i].latitude);\n          this.markDefault.lng = parseFloat(this.attendance[i].longitude);\n          this.markers.push({\n            position: marker,\n          });\n          this.path.push({\n            lat: parseFloat(this.attendance[i].latitude),\n            lng: parseFloat(this.attendance[i].longitude),\n          });\n          this.mapLine = 1;\n          this.mapMark = 1;\n        }\n      }\n      var self = this;\n      setTimeout(function () {\n        self.$refs.topside.scrollTop = 0;\n      }, 900);\n    },\n    indexMethod(index) {\n      return index + this.paginator.fromP;\n    },\n  },\n  async created() {\n    await this.$store.dispatch(action.LIST_ATT_DRIVER, this.currentPage);\n    await this.listData;\n    this.markers = [];\n    this.path = [];\n    this.window_open = false;\n    for (var i = 0; i < this.listData.length; i++) {\n      const marker = {\n        lat: parseFloat(this.listData[i].clock_in_latitude),\n        lng: parseFloat(this.listData[i].clock_in_longitude),\n        name:\n          this.listData[i].name +\n          \", \" +\n          this.listData[i].clock_in +\n          \" (CLOCK IN)\",\n        icon: this.redIcon,\n      };\n      this.markDefault.lat = parseFloat(this.listData[i].clock_in_latitude);\n      this.markDefault.lng = parseFloat(this.listData[i].clock_in_longitude);\n      this.markers.push({\n        position: marker,\n      });\n      this.mapMark = 1;\n    }\n    for (var i = 0; i < this.listData.length; i++) {\n      const marker = {\n        lat: parseFloat(this.listData[i].clock_out_latitude),\n        lng: parseFloat(this.listData[i].clock_out_longitude),\n        name:\n          this.listData[i].name +\n          \", \" +\n          this.listData[i].clock_out +\n          \" (CLOCK OUT)\",\n        icon: this.orangeIcon,\n      };\n      this.markers.push({\n        position: marker,\n      });\n    }\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.el-row {\n  padding: 0px 10px;\n  margin-bottom: 20px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n}\n\n.el-col {\n  border-radius: 5px;\n}\n\n.el-select {\n  width: 100%;\n}\n\n#map {\n  height: 100%;\n}\n</style>\n"]}]}