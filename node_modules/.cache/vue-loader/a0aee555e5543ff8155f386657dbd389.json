{"remainingRequest":"C:\\Users\\ASUS\\Documents\\GitHub\\update-request-driver-automation-update\\oper-customer\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ASUS\\Documents\\GitHub\\update-request-driver-automation-update\\oper-customer\\src\\views\\pages\\employee\\assigntask-employee.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\update-request-driver-automation-update\\oper-customer\\src\\views\\pages\\employee\\assigntask-employee.vue","mtime":1647032353996},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\update-request-driver-automation-update\\oper-customer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\update-request-driver-automation-update\\oper-customer\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\update-request-driver-automation-update\\oper-customer\\node_modules\\babel-loader\\lib\\index.js","mtime":1646338474621},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\update-request-driver-automation-update\\oper-customer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\update-request-driver-automation-update\\oper-customer\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport { mapGetters } from 'vuex'\nimport * as getter from '../../../store/getters-types'\nimport * as action from '../../../store/action-types'\nimport * as mutation from '../../../store/mutation-types'\n\nexport default {\n    data() {\n        return {\n            dropDown: null,\n            fullscreen_loading  : false,\n            form: {\n                task_template_id    : '',\n                booking_time        : '',\n                employee_userid     : '',\n                message             : '',\n            },\n            rules: {\n                task_template_id: [\n                    { required: true, message:'Please Input Task Template', trigger: ['blur','change']}\n                ],\n                booking_time: [\n                    { required: true, message:'Please Select Booking Time', trigger: 'blur'}\n                ],\n                employee_userid:  [\n                    { required: true, message:'Please Select Employee', trigger: ['blur', 'change']},\n                ],\n                message:  [\n                    { required: true, message:'Please Input Message', trigger: 'blur'},\n                ],\n            }\n        }\n    },\n    methods: {\n        onSubmit(formName) {\n            this.$refs[formName].validate((valid) => {\n                if (valid) {\n                    this.$store.commit(mutation.BUTTON_STATUS, true)\n                    this.$store.dispatch(action.ASSIGN_EMPLOYEE_TASK, this.form)\n                } else {\n                    return false;\n                }\n            });\n        },\n        async remoteMethod2(query) {\n            let trimName = query.trim()\n        if (trimName.length > 0) {\n            await this.$store.commit(mutation.SET_LOADING, true);\n            await this.$store.dispatch(action.DROPDOWN_EMPLOYEE, trimName);\n        } else {\n            await this.$store.commit(mutation.SET_LOADING, true);\n            await this.$store.dispatch(action.DROPDOWN_EMPLOYEE, trimName);\n        }\n         this.dropDown = this.employeeList;\n        },\n        isCancel(){\n            this.$router.push(`/employee/inprogress`)\n        },\n        taskT(value){\n            this.$store.dispatch(action.TEMPLATE_ID, value)\n        },\n        remoteMethod(query) {\n        },\n    },\n    computed: {\n        ...mapGetters({\n            error           : getter.GET_ERROR,\n            loading         : getter.GET_LOADING,\n            button          : getter.GET_BUTTON,\n            templateTasks   : getter.GET_TEMPLATE_LIST,\n            data            : getter.GET_TEMPLATE_ID,\n            employeeList    : getter.GET_DROPDOWN_EMPLOYEE,\n            clearInput      : getter.GET_CLEAR_INPUT\n        }),\n        buttonStatuz: function () {\n            return this.form.fullscreen_loading = this.button\n        },\n        dataTAsk() {\n            return(this.data != null) ? this.form.tasks = this.data.tasks : this.form.tasks = []\n        },\n        clearinput(){\n            if(clearInput){\n                this.form.birthdate = ''\n            }\n        }\n    },\n    created(){\n        this.$store.commit(mutation.SET_TEMPLATE_ID, null);\n        this.$store.dispatch(action.DROPDOWN_TEMPLATE, { page : 1 });\n    },\n    async mounted() {\n        await this.$store.dispatch(action.DROPDOWN_EMPLOYEE, null)\n        this.dropDown = this.employeeList\n    },\n}\n",{"version":3,"sources":["assigntask-employee.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuHA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"assigntask-employee.vue","sourceRoot":"src/views/pages/employee","sourcesContent":["<template>\r\n    <div class=\"page-table scrollable only-y\" id=\"affix-container\">\r\n        <div class=\"card-base card-shadow--medium bg-white\">\r\n            <el-form ref=\"form\" :rules=\"rules\" :model=\"form\">\r\n                <el-row :gutter=\"20\">\r\n                    <el-col :span=\"12\">\r\n                        <div class=\"grid-content\">\r\n                            <el-form-item prop=\"booking_time\">\r\n                                <el-date-picker\r\n                                        v-model=\"form.booking_time\"\r\n                                        type=\"datetime\"\r\n                                        placeholder=\"Booking Time\"\r\n                                        value-format=\"yyyy-MM-dd HH:mm:ss\"\r\n                                        size=\"large\"\r\n                                        popper-class=\"mantap\"\r\n                                        prefix-icon=\"el-icon-date\">\r\n                                </el-date-picker>\r\n                            </el-form-item>\r\n                        </div>\r\n                    </el-col >\r\n                    \r\n                    <el-col :span=\"12\">\r\n                        <div class=\"grid-content\">\r\n                            <el-form-item prop=\"employee_userid\">\r\n                                <el-select\r\n                                filterable\r\n                                remote\r\n                                reserve-keyword   \r\n                                :loading=\"loading\"                          \r\n                                :remote-method=\"remoteMethod2\"\r\n                                v-model=\"form.employee_userid\"\r\n                                placeholder=\"Select Employee\" >\r\n                                    <el-option\r\n                                            v-for=\"item in dropDown\"\r\n                                            :key=\"item.id\"\r\n                                            :label=\"item.name\"\r\n                                            :value=\"item.id\"></el-option>\r\n                                </el-select>\r\n                            </el-form-item>\r\n                        </div>\r\n                    </el-col>\r\n                </el-row>\r\n\r\n                <el-row :gutter=\"20\">\r\n                    <el-col :span=\"24\">\r\n                        <div class=\"grid-content\">\r\n                            <el-form-item prop=\"message\" >\r\n                                <el-input\r\n                                        type=\"textarea\"\r\n                                        v-model=\"form.message\"\r\n                                        placeholder=\"Input Message\"\r\n                                        :autosize=\"{ minRows: 5, maxRows: 7}\"></el-input>\r\n                            </el-form-item>\r\n                        </div>\r\n                    </el-col>\r\n                </el-row>\r\n\r\n                <el-row :gutter=\"20\">\r\n                    <el-col :span=\"24\">\r\n                        <div class=\"grid-content\">\r\n                            <el-form-item prop=\"task_template_id\">\r\n                                <el-select\r\n                                        v-model=\"form.task_template_id\"\r\n                                        @change=\"taskT\"\r\n                                        :remote-method=\"remoteMethod\"\r\n                                        placeholder=\"Select Template\" >\r\n                                    <el-option\r\n                                            v-for=\"item in templateTasks\"\r\n                                            :key=\"item.task_template_id\"\r\n                                            :label=\"item.task_template_name\"\r\n                                            :value=\"item.task_template_id\"></el-option>\r\n                                </el-select>\r\n                            </el-form-item>\r\n                        </div>\r\n                    </el-col>\r\n                </el-row>\r\n\r\n                <el-row>\r\n                    <el-col :span=\"24\">\r\n                        <el-table\r\n                                :data=\"dataTAsk\"\r\n                                stripe\r\n                                style=\"width: 100%\">\r\n                            <el-table-column\r\n                                    prop=\"name\"\r\n                                    label=\"Task Name\">\r\n                            </el-table-column>\r\n                            <el-table-column\r\n                                    prop=\"description\"\r\n                                    label=\"Task Description\">\r\n                            </el-table-column>\r\n                            <el-table-column\r\n                                    prop=\"updated_at\"\r\n                                    label=\"Last Update\">\r\n                            </el-table-column>\r\n                        </el-table>\r\n                    </el-col>\r\n                </el-row>\r\n\r\n                <el-row >\r\n                    <el-col :lg=\"{offset:18, span:6}\" style=\"display: flex; justify-content: flex-end; margin-top: 14px\">\r\n                        <div class=\"grid-content\">\r\n                            <el-form-item>\r\n                                <el-button @click=\"isCancel\">Cancel</el-button>\r\n                                <el-button\r\n                                        type=\"success\"\r\n                                        v-loading.fullscreen.lock=\"button\"\r\n                                        @click=\"onSubmit('form')\">Save</el-button>\r\n                            </el-form-item>\r\n                        </div>\r\n                    </el-col>\r\n                </el-row>\r\n            </el-form>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n\r\n    import { mapGetters } from 'vuex'\r\n    import * as getter from '../../../store/getters-types'\r\n    import * as action from '../../../store/action-types'\r\n    import * as mutation from '../../../store/mutation-types'\r\n\r\n    export default {\r\n        data() {\r\n            return {\r\n                dropDown: null,\r\n                fullscreen_loading  : false,\r\n                form: {\r\n                    task_template_id    : '',\r\n                    booking_time        : '',\r\n                    employee_userid     : '',\r\n                    message             : '',\r\n                },\r\n                rules: {\r\n                    task_template_id: [\r\n                        { required: true, message:'Please Input Task Template', trigger: ['blur','change']}\r\n                    ],\r\n                    booking_time: [\r\n                        { required: true, message:'Please Select Booking Time', trigger: 'blur'}\r\n                    ],\r\n                    employee_userid:  [\r\n                        { required: true, message:'Please Select Employee', trigger: ['blur', 'change']},\r\n                    ],\r\n                    message:  [\r\n                        { required: true, message:'Please Input Message', trigger: 'blur'},\r\n                    ],\r\n                }\r\n            }\r\n        },\r\n        methods: {\r\n            onSubmit(formName) {\r\n                this.$refs[formName].validate((valid) => {\r\n                    if (valid) {\r\n                        this.$store.commit(mutation.BUTTON_STATUS, true)\r\n                        this.$store.dispatch(action.ASSIGN_EMPLOYEE_TASK, this.form)\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                });\r\n            },\r\n            async remoteMethod2(query) {\r\n                let trimName = query.trim()\r\n            if (trimName.length > 0) {\r\n                await this.$store.commit(mutation.SET_LOADING, true);\r\n                await this.$store.dispatch(action.DROPDOWN_EMPLOYEE, trimName);\r\n            } else {\r\n                await this.$store.commit(mutation.SET_LOADING, true);\r\n                await this.$store.dispatch(action.DROPDOWN_EMPLOYEE, trimName);\r\n            }\r\n             this.dropDown = this.employeeList;\r\n            },\r\n            isCancel(){\r\n                this.$router.push(`/employee/inprogress`)\r\n            },\r\n            taskT(value){\r\n                this.$store.dispatch(action.TEMPLATE_ID, value)\r\n            },\r\n            remoteMethod(query) {\r\n            },\r\n        },\r\n        computed: {\r\n            ...mapGetters({\r\n                error           : getter.GET_ERROR,\r\n                loading         : getter.GET_LOADING,\r\n                button          : getter.GET_BUTTON,\r\n                templateTasks   : getter.GET_TEMPLATE_LIST,\r\n                data            : getter.GET_TEMPLATE_ID,\r\n                employeeList    : getter.GET_DROPDOWN_EMPLOYEE,\r\n                clearInput      : getter.GET_CLEAR_INPUT\r\n            }),\r\n            buttonStatuz: function () {\r\n                return this.form.fullscreen_loading = this.button\r\n            },\r\n            dataTAsk() {\r\n                return(this.data != null) ? this.form.tasks = this.data.tasks : this.form.tasks = []\r\n            },\r\n            clearinput(){\r\n                if(clearInput){\r\n                    this.form.birthdate = ''\r\n                }\r\n            }\r\n        },\r\n        created(){\r\n            this.$store.commit(mutation.SET_TEMPLATE_ID, null);\r\n            this.$store.dispatch(action.DROPDOWN_TEMPLATE, { page : 1 });\r\n        },\r\n        async mounted() {\r\n            await this.$store.dispatch(action.DROPDOWN_EMPLOYEE, null)\r\n            this.dropDown = this.employeeList\r\n        },\r\n    }\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n    .card-base {\r\n        padding: 20px;\r\n    }\r\n    .el-row {\r\n        padding: 0px 10px;\r\n        &:last-child {\r\n            margin-bottom: 0;\r\n        }\r\n    }\r\n    .el-col {\r\n        border-radius: 5px;\r\n    }\r\n</style>\r\n"]}]}