{"remainingRequest":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/src/views/pages/dispathcer/dispatcher.vue?vue&type=style&index=0&id=7ded5494&lang=scss&scoped=true&","dependencies":[{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/src/views/pages/dispathcer/dispatcher.vue","mtime":1640440454000},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/css-loader/index.js","mtime":1641690455692},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1641690456354},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/postcss-loader/src/index.js","mtime":1641690456676},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/sass-loader/dist/cjs.js","mtime":1641690460431},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/cache-loader/dist/cjs.js","mtime":1641690455583},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/vue-loader/lib/index.js","mtime":1641690456354}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.table-box {\n    overflow: auto;\n}\n.el-pagination {\n    padding-top: 20px;\n}\n.el-input {\n    width: 300px !important;\n}\n.card-base {\n    padding: 20px;\n}\n.el-row {\n    padding: 0px 10px 10px;\n    &:last-child {\n        margin-bottom: 0;\n    }\n}\n.el-col {\n    border-radius: 5px;\n}\n\n",{"version":3,"sources":["dispatcher.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"dispatcher.vue","sourceRoot":"src/views/pages/dispathcer","sourcesContent":["<template>\n    <div class=\"page-table scrollable only-y\" id=\"affix-container\">\n        <dispatcher-count />\n    </div>\n</template>\n\n<script>\n    import DispatcherCount from '@/components/dispatcher/total-acount'\n    import Affix from '@/components/Affix'\n    import { mapGetters } from 'vuex'\n    import * as getter from '../../../store/getters-types'\n    import * as mutation from '../../../store/mutation-types'\n    import * as action from '../../../store/action-types'\n\n    export default {\n        name: 'Table',\n        data() {\n            return {\n                currentPage: 1,\n                input:'',\n                affixEnabled: true,\n                indexT: 1,\n                status:1 ,\n                select: [\n                {\n                    name: \"ACTIVE\",\n                    status: 1,\n                },\n                {\n                    name: \"INACTIVE\",\n                    status: 2,\n                },\n                {\n                    name: \"SUSPENDED\",\n                    status: 3\n                }\n            ],\n                type : '',\n                dispatcher_type: [\n                    {\n                        name: \"REGULER\",\n                        status: 4\n                    },\n                    {\n                        name: \"PLUS\",\n                        status: 5\n                    }\n                ]\n            }\n        },\n        components: {\n            Affix,\n            DispatcherCount\n        },\n        computed: {\n            ...mapGetters({\n                listData : getter.GET_LIST_DISPATCHER,\n                paginate : getter.GET_PAGINATE_DISPATCHER,\n                loading  : getter.GET_BUTTON\n            }),\n            paginato(){\n                return this.paginate\n            },\n            indexTam(){\n                return this.indexT\n            }\n        },\n    //    async created(){\n    //         this.$store.commit(mutation.BUTTON_STATUS, true);\n    //         await this.$store.dispatch(action.LIST_DISPATCHER,{\n    //             page: this.currentPage,\n    //             typedispatcher : this.type,\n    //             status: this.status});\n    //         },\n        methods: {\n            newCorp()   {\n                this.$router.replace('new-dispatcher')\n            },\n            handlePageChange(page) {\n                this.currentPage = page\n                this.$store.commit(mutation.BUTTON_STATUS, true);\n                this.$store.dispatch( action.LIST_DISPATCHER,\n                    {\n                        page: this.currentPage,\n                        typedispatcher : this.type,\n                        status: this.status\n                    });\n                },\n            search(){\n                this.$store.dispatch( action.LIST_DATA_COR, this.input.trim() )\n            },\n            async getId(id){\n                await this.$store.dispatch(action.DATA_ID_DISPATCHER, id.id)\n                this.$router.replace({ path: '/detail-dispatcher' })\n            },\n            indexMethod(index) {\n                return index + this.paginato.fromP;\n            },\n            filterStatus(status){\n                this.$store.commit(mutation.BUTTON_STATUS, true);\n                this.status = status;\n                this.$store.dispatch(action.LIST_DISPATCHER,\n                    {\n                        page: 1,\n                        typedispatcher : this.type,\n                        status: this.status\n                    });\n            },\n            filterTypeDispatcher(type){\n                this.$store.commit(mutation.BUTTON_STATUS, true);\n                this.type = type;\n                this.$store.dispatch(action.LIST_DISPATCHER,\n                    {\n                        page: 1,\n                        typedispatcher : this.type,\n                        status: this.status\n                    });\n            }\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n\n    .table-box {\n        overflow: auto;\n    }\n    .el-pagination {\n        padding-top: 20px;\n    }\n    .el-input {\n        width: 300px !important;\n    }\n    .card-base {\n        padding: 20px;\n    }\n    .el-row {\n        padding: 0px 10px 10px;\n        &:last-child {\n            margin-bottom: 0;\n        }\n    }\n    .el-col {\n        border-radius: 5px;\n    }\n\n</style>\n\n"]}]}