{"remainingRequest":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\src\\views\\pages\\enterprise\\edit-location-enterprise.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\src\\views\\pages\\enterprise\\edit-location-enterprise.vue","mtime":1647032353883},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\babel-loader\\lib\\index.js","mtime":1646338474621},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport router from \"../../../router\";\r\nimport moment from \"moment\";\r\nimport Affix from \"@/components/Affix\";\r\nimport {\r\n    mapGetters,\r\n    mapActions,\r\n    mapState\r\n} from \"vuex\";\r\nimport * as mutation from '../../../store/mutation-types';\r\nimport * as getter from \"../../../store/getters-types\";\r\nimport * as action from \"../../../store/action-types\";\r\nexport default {\r\n    name: \"NewLocation\",\r\n    data() {\r\n        return {\r\n            currentPlace: null,\r\n            markers: {\r\n                lat: -6.193619252954559,\r\n                lng: 106.76330885229345,\r\n            },\r\n            center: {\r\n                lat: -6.193619252954559,\r\n                lng: 106.76330885229345,\r\n            },\r\n            form: {\r\n                name: \"\",\r\n                birthdate: \"\",\r\n                address: \"\",\r\n                longitude: \"\",\r\n                latitude: \"\",\r\n                identerprise: \"\",\r\n            },\r\n            payload: {\r\n                identerprise: null,\r\n                page: 1,\r\n            },\r\n            rules: {\r\n                name: [{\r\n                    required: true,\r\n                    message: \"Location Name is required!\",\r\n                    trigger: \"blur\"\r\n                }],\r\n                latitude: [{\r\n                    required: true,\r\n                    message: \"Location Latitude is required!\",\r\n                    trigger: \"blur\"\r\n                }],\r\n                longitude: [{\r\n                    required: true,\r\n                    message: \"Location Longitude is required!\",\r\n                    trigger: \"blur\"\r\n                }],\r\n                address: [{\r\n                    required: true,\r\n                    message: \"Address is required!\",\r\n                    trigger: \"blur\"\r\n                }],\r\n            }\r\n        };\r\n    },\r\n    methods: {\r\n        onSubmit(formName) {\r\n            let obj = {\r\n                name: this.form.name,\r\n                birthdate: this.form.birthdate,\r\n                address: this.form.address,\r\n                longitude: this.form.longitude,\r\n                latitude: this.form.latitude,\r\n                identerprise: this.form.identerprise,\r\n            };\r\n            this.$refs[formName].validate(valid => {\r\n                if (valid) {\r\n                    this.$store.commit(mutation.BUTTON_STATUS, true)\r\n                    this.$store.dispatch(action.UPDATE_DATA_LOCATION, this.form);\r\n                } else {\r\n                    return false;\r\n                }\r\n            });\r\n        },\r\n        dialogTrack() {\r\n            this.$store.commit(mutation.SET_DIALOG_VISIBLE, true)\r\n        },\r\n        updateCoordinates(location) {\r\n            const geocoder = new google.maps.Geocoder()\r\n            geocoder.geocode({\r\n                'latLng': location.latLng\r\n            }, (result, status) => {\r\n                if (status === google.maps.GeocoderStatus.OK) {\r\n                    this.markers = {\r\n                        lat: location.latLng.lat(),\r\n                        lng: location.latLng.lng(),\r\n                    };\r\n                    this.form.latitude = location.latLng.lat()\r\n                    this.form.longitude = location.latLng.lng()\r\n                    this.form.address = result[0].formatted_address\r\n                }\r\n            })\r\n        },\r\n        setPlace(place) {\r\n          if (place) {\r\n            this.updateCoordinates(place.geometry.location)\r\n\r\n            this.markers = {\r\n              lat: place.geometry.location.lat(),\r\n              lng: place.geometry.location.lng(),\r\n            };\r\n\r\n            this.center = {\r\n              lat: place.geometry.location.lat(),\r\n              lng: place.geometry.location.lng(),\r\n            };\r\n\r\n            this.form.latitude = place.geometry.location.lat()\r\n            this.form.longitude = place.geometry.location.lng()\r\n            this.form.address = place.formatted_address\r\n          }\r\n        },\r\n        Cancel() {\r\n            this.$store.dispatch(action.LIST_LOCATION, this.payload);\r\n            this.$router.push({\r\n                path: \"/location-enterprise/\" + this.enterprise.identerprise\r\n            });\r\n        },\r\n        closeDialog() {\r\n            this.$store.commit(mutation.SET_DIALOG_VISIBLE, false)\r\n        },\r\n        handleClose(done) {\r\n            this.$confirm('Are you sure to close this map?')\r\n                .then(_ => {\r\n                    this.$store.commit(mutation.SET_DIALOG_VISIBLE, false)\r\n                })\r\n                .catch(_ => {});\r\n        }\r\n    },\r\n    computed: {\r\n        ...mapGetters({\r\n            enterprise: getter.ENTERPRISE,\r\n            button: getter.GET_BUTTON,\r\n            dialogV: getter.GET_DIALOG_VISIBLE,\r\n            location: getter.GET_LOCATION_DETAIL\r\n        }),\r\n    },\r\n    async created() {\r\n        await this.location\r\n        this.form.identerprise = this.enterprise.identerprise;\r\n        this.form.name = this.location.name;\r\n        this.form.address = this.location.address;\r\n        this.form.latitude = this.location.latitude;\r\n        this.form.longitude = this.location.longitude;\r\n        this.form.idplaces = this.location.idplaces;\r\n        this.markers.lat = parseFloat(this.location.latitude);\r\n        this.markers.lng = parseFloat(this.location.longitude);\r\n        this.center.lat = parseFloat(this.location.latitude);\r\n        this.center.lng = parseFloat(this.location.longitude);\r\n    },\r\n    // mounted(){\r\n    //     console.log(this.$route.params);\r\n    //     this.$store.dispatch(action.DETAIL_LOCATION, this.$route.params.id);\r\n    //     console.log(this.location);\r\n    // },\r\n    // watch:{\r\n    //     locationdetail(newValue, oldValue){\r\n    //         console.log('cus', newValue);\r\n    //     }\r\n    // }\r\n};\r\n",{"version":3,"sources":["edit-location-enterprise.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"edit-location-enterprise.vue","sourceRoot":"src/views/pages/enterprise","sourcesContent":["<template>\r\n<div class=\"page-table scrollable only-y\" id=\"affix-container\">\r\n    <div class=\"card-base card-shadow--medium bg-white\">\r\n        <el-form ref=\"form\" :rules=\"rules\" :model=\"form\">\r\n            <el-row :gutter=\"20\">\r\n                <el-col :lg=\"12\">\r\n                    <el-form-item prop=\"name\">\r\n                        <el-input placeholder=\"Location Name\" v-model=\"form.name\"></el-input>\r\n                    </el-form-item>\r\n                </el-col>\r\n                <el-col :lg=\"12\">\r\n                    <el-form-item prop=\"address\">\r\n                        <el-input placeholder=\"Address\" disabled v-model=\"form.address\"></el-input>\r\n                    </el-form-item>\r\n                </el-col>\r\n            </el-row>\r\n            <el-row :gutter=\"20\">\r\n                <el-col :lg=\"12\">\r\n                    <el-form-item prop=\"latitude\">\r\n                        <el-input placeholder=\"Latitude\"  disabled v-model=\"form.latitude\"></el-input>\r\n                    </el-form-item>\r\n                </el-col>\r\n                <el-col :lg=\"10\">\r\n                    <el-form-item prop=\"longitude\">\r\n                        <el-input placeholder=\"Longitude\" disabled v-model=\"form.longitude\"></el-input>\r\n                    </el-form-item>\r\n                </el-col>\r\n                <el-col :span=\"2\">\r\n                    <el-button type=\"primary\" @click=\"dialogTrack\" icon=\"el-icon-location\" circle></el-button>\r\n                </el-col>\r\n            </el-row>\r\n        </el-form>\r\n        <el-row>\r\n            <el-col :offset=\"20\" :lg=\"2\">\r\n                <el-button :loading=\"button\" @click=\"onSubmit('form')\" type=\"success\">Save</el-button>\r\n            </el-col>\r\n            <el-col :lg=\"2\">\r\n                <el-button @click=\"Cancel()\" type=\"succes\">Cancel</el-button>\r\n            </el-col>\r\n        </el-row>\r\n    </div>\r\n    <el-dialog :visible.sync=\"dialogV\" :before-close=\"handleClose\" width=\"70%\">\r\n        <div class=\"card-base card-shadow--medium\">\r\n            <div class=\"gmap-location-search-bar\">\r\n              <gmap-autocomplete @place_changed=\"setPlace\"></gmap-autocomplete>\r\n            </div>\r\n            <gmap-map ref=\"map\" :center=\"center\" :zoom=\"12\" :options=\"{gestureHandling:'cooperative'}\" map-type-id=\"roadmap\" style=\"width: 100%; height: 500px\">\r\n                <GmapMarker @drag=\"updateCoordinates\" :draggable=\"true\" :position=\"markers\" label=\"S\" />\r\n            </gmap-map>\r\n        </div>\r\n        <el-button @click=\"closeDialog\" class=\"mt-10\">Save</el-button>\r\n    </el-dialog>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport router from \"../../../router\";\r\nimport moment from \"moment\";\r\nimport Affix from \"@/components/Affix\";\r\nimport {\r\n    mapGetters,\r\n    mapActions,\r\n    mapState\r\n} from \"vuex\";\r\nimport * as mutation from '../../../store/mutation-types';\r\nimport * as getter from \"../../../store/getters-types\";\r\nimport * as action from \"../../../store/action-types\";\r\nexport default {\r\n    name: \"NewLocation\",\r\n    data() {\r\n        return {\r\n            currentPlace: null,\r\n            markers: {\r\n                lat: -6.193619252954559,\r\n                lng: 106.76330885229345,\r\n            },\r\n            center: {\r\n                lat: -6.193619252954559,\r\n                lng: 106.76330885229345,\r\n            },\r\n            form: {\r\n                name: \"\",\r\n                birthdate: \"\",\r\n                address: \"\",\r\n                longitude: \"\",\r\n                latitude: \"\",\r\n                identerprise: \"\",\r\n            },\r\n            payload: {\r\n                identerprise: null,\r\n                page: 1,\r\n            },\r\n            rules: {\r\n                name: [{\r\n                    required: true,\r\n                    message: \"Location Name is required!\",\r\n                    trigger: \"blur\"\r\n                }],\r\n                latitude: [{\r\n                    required: true,\r\n                    message: \"Location Latitude is required!\",\r\n                    trigger: \"blur\"\r\n                }],\r\n                longitude: [{\r\n                    required: true,\r\n                    message: \"Location Longitude is required!\",\r\n                    trigger: \"blur\"\r\n                }],\r\n                address: [{\r\n                    required: true,\r\n                    message: \"Address is required!\",\r\n                    trigger: \"blur\"\r\n                }],\r\n            }\r\n        };\r\n    },\r\n    methods: {\r\n        onSubmit(formName) {\r\n            let obj = {\r\n                name: this.form.name,\r\n                birthdate: this.form.birthdate,\r\n                address: this.form.address,\r\n                longitude: this.form.longitude,\r\n                latitude: this.form.latitude,\r\n                identerprise: this.form.identerprise,\r\n            };\r\n            this.$refs[formName].validate(valid => {\r\n                if (valid) {\r\n                    this.$store.commit(mutation.BUTTON_STATUS, true)\r\n                    this.$store.dispatch(action.UPDATE_DATA_LOCATION, this.form);\r\n                } else {\r\n                    return false;\r\n                }\r\n            });\r\n        },\r\n        dialogTrack() {\r\n            this.$store.commit(mutation.SET_DIALOG_VISIBLE, true)\r\n        },\r\n        updateCoordinates(location) {\r\n            const geocoder = new google.maps.Geocoder()\r\n            geocoder.geocode({\r\n                'latLng': location.latLng\r\n            }, (result, status) => {\r\n                if (status === google.maps.GeocoderStatus.OK) {\r\n                    this.markers = {\r\n                        lat: location.latLng.lat(),\r\n                        lng: location.latLng.lng(),\r\n                    };\r\n                    this.form.latitude = location.latLng.lat()\r\n                    this.form.longitude = location.latLng.lng()\r\n                    this.form.address = result[0].formatted_address\r\n                }\r\n            })\r\n        },\r\n        setPlace(place) {\r\n          if (place) {\r\n            this.updateCoordinates(place.geometry.location)\r\n\r\n            this.markers = {\r\n              lat: place.geometry.location.lat(),\r\n              lng: place.geometry.location.lng(),\r\n            };\r\n\r\n            this.center = {\r\n              lat: place.geometry.location.lat(),\r\n              lng: place.geometry.location.lng(),\r\n            };\r\n\r\n            this.form.latitude = place.geometry.location.lat()\r\n            this.form.longitude = place.geometry.location.lng()\r\n            this.form.address = place.formatted_address\r\n          }\r\n        },\r\n        Cancel() {\r\n            this.$store.dispatch(action.LIST_LOCATION, this.payload);\r\n            this.$router.push({\r\n                path: \"/location-enterprise/\" + this.enterprise.identerprise\r\n            });\r\n        },\r\n        closeDialog() {\r\n            this.$store.commit(mutation.SET_DIALOG_VISIBLE, false)\r\n        },\r\n        handleClose(done) {\r\n            this.$confirm('Are you sure to close this map?')\r\n                .then(_ => {\r\n                    this.$store.commit(mutation.SET_DIALOG_VISIBLE, false)\r\n                })\r\n                .catch(_ => {});\r\n        }\r\n    },\r\n    computed: {\r\n        ...mapGetters({\r\n            enterprise: getter.ENTERPRISE,\r\n            button: getter.GET_BUTTON,\r\n            dialogV: getter.GET_DIALOG_VISIBLE,\r\n            location: getter.GET_LOCATION_DETAIL\r\n        }),\r\n    },\r\n    async created() {\r\n        await this.location\r\n        this.form.identerprise = this.enterprise.identerprise;\r\n        this.form.name = this.location.name;\r\n        this.form.address = this.location.address;\r\n        this.form.latitude = this.location.latitude;\r\n        this.form.longitude = this.location.longitude;\r\n        this.form.idplaces = this.location.idplaces;\r\n        this.markers.lat = parseFloat(this.location.latitude);\r\n        this.markers.lng = parseFloat(this.location.longitude);\r\n        this.center.lat = parseFloat(this.location.latitude);\r\n        this.center.lng = parseFloat(this.location.longitude);\r\n    },\r\n    // mounted(){\r\n    //     console.log(this.$route.params);\r\n    //     this.$store.dispatch(action.DETAIL_LOCATION, this.$route.params.id);\r\n    //     console.log(this.location);\r\n    // },\r\n    // watch:{\r\n    //     locationdetail(newValue, oldValue){\r\n    //         console.log('cus', newValue);\r\n    //     }\r\n    // }\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import \"../../../assets/scss/_variables\";\r\n\r\n.card-base {\r\n    padding: 20px;\r\n}\r\n\r\n.gmap-location-search-bar {\r\n  margin: 0 0 20px 0;\r\n}\r\n\r\n.el-row {\r\n    // display: flex;\r\n    // align-items: center;\r\n    // justify-content: center;\r\n    padding: 0px 10px;\r\n    margin-bottom: 10px;\r\n\r\n    &:last-child {\r\n        margin-bottom: 0;\r\n    }\r\n}\r\n\r\n.el-col {\r\n    border-radius: 5px;\r\n}\r\n\r\n.el-radio {\r\n    margin: 0 160px 0 10px;\r\n}\r\n\r\n.el-select {\r\n    width: 100%;\r\n}\r\n\r\n.thumbnail {\r\n    position: relative;\r\n    width: 300px;\r\n    height: 300px;\r\n    overflow: hidden;\r\n}\r\n\r\n.thumbnail img {\r\n    position: absolute;\r\n    left: 50%;\r\n    top: 50%;\r\n    height: 100%;\r\n    width: auto;\r\n    -webkit-transform: translate(-50%, -50%);\r\n    -ms-transform: translate(-50%, -50%);\r\n    transform: translate(-50%, -50%);\r\n}\r\n\r\n.thumbnail img.portrait {\r\n    width: 100%;\r\n    height: auto;\r\n}\r\n\r\na {\r\n    border-style: dotted;\r\n    border-radius: 15px;\r\n    padding: 10px;\r\n    height: 150px;\r\n}\r\n\r\ntd {\r\n    padding: 10px;\r\n}\r\n\r\n\r\n.pac-target-input {\r\n    -webkit-appearance: none;\r\n    background-color: #FFFFFF;\r\n    background-image: none;\r\n    border-radius: 4px;\r\n    border: 1px solid #DCDFE6;\r\n    -webkit-box-sizing: border-box;\r\n    box-sizing: border-box;\r\n    color: #606266;\r\n    display: inline-block;\r\n    font-size: inherit;\r\n    height: 40px;\r\n    line-height: 40px;\r\n    outline: none;\r\n    padding: 0 15px;\r\n    -webkit-transition: border-color 0.2s cubic-bezier(0.645, 0.045, 0.355, 1);\r\n    transition: border-color 0.2s cubic-bezier(0.645, 0.045, 0.355, 1);\r\n    width: 100%;\r\n}\r\n</style>\r\n"]}]}