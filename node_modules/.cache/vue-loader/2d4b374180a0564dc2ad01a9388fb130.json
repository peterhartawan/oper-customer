{"remainingRequest":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/src/views/pages/dispathcer/detail-dispatcher.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/src/views/pages/dispathcer/detail-dispatcher.vue","mtime":1628175042619},{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport router from '../../../router'\nimport {\n    mapGetters\n} from 'vuex'\nimport * as getter from '../../../store/getters-types'\nimport * as action from '../../../store/action-types'\nimport * as mutation from '../../../store/mutation-types'\nimport Swal from 'sweetalert2'\n\nexport default {\n    data() {\n        return {\n            payload: {\n                reason_suspend: \"\",\n                users_id: null,\n                iddispatcher: \"\",\n            },\n            alt: require(\"@/assets/images/avatar-2.jpg\")\n        };\n    },\n    computed: {\n        ...mapGetters({\n            dispatcher: getter.DISPATCHER,\n            button: getter.GET_BUTTON,\n        }),\n        profilepicture() {\n            if (this.dispatcher.profile_picture == null) {\n                return this.alt\n            } else {\n                return this.dispatcher.profile_picture\n            }\n        }\n    },\n    created() {\n        this.payload.iddispatcher = this.dispatcher.dispatcher_profile.iddispatcher\n    },\n    methods: {\n        inspector() {\n            router.replace('/pic-task-list')\n            this.$store.commit(mutation.SET_ID_ENTERPRISE, this.enterprise.identerprise)\n        },\n        templateTask() {\n            router.replace('/template-list')\n            this.$store.commit(mutation.SET_ID_ENTERPRISE, this.enterprise.identerprise)\n        },\n        editAdmin() {\n            router.replace('/edit-admin')\n            this.$store.commit(mutation.SET_ID_ENTERPRISE, this.enterprise.identerprise)\n        },\n        resendActivation(){\n            let obj ={\n                page : '/dispatcher',\n                iddispatcher   : this.payload.iddispatcher\n            }\n            this.$store.commit(mutation.BUTTON_STATUS, true)\n            this.$store.dispatch(action.RESEND_LINK_ACTIVATION, obj)\n        },\n        deleteB() {\n            Swal.fire({\n                title: 'Are you sure?',\n                text: \"You won't be able to revert this!\",\n                type: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#3085d6',\n                cancelButtonColor: '#d33',\n                confirmButtonText: 'Yes, delete it!'\n            }).then((result) => {\n                if (result.value) {\n                    this.$store.commit(mutation.BUTTON_STATUS, true)\n                    this.$store.dispatch(action.DELETE_DISPATCHER, this.dispatcher.id)\n                }\n            })\n        },\n        activeButton() {\n            Swal.fire({\n                title: \"Are you sure?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonColor: \"#3085d6\",\n                cancelButtonColor: \"#d33\",\n                confirmButtonText: \"Yes, activate it!\"\n            }).then(result => {\n                if (result.value) {\n                    this.$store.commit(mutation.BUTTON_STATUS, true)\n                    this.$store.dispatch(action.ACTIVATE_DISPATCHER, this.dispatcher.id);\n                }\n            });\n        },\n        async suspendButton() {\n            const {\n                value: reason\n            } = await Swal.fire({\n                title: 'Enter the reason of suspending',\n                input: 'text',\n                showCancelButton: true,\n                confirmButtonColor: '#3085d6',\n                cancelButtonColor: '#d33',\n                confirmButtonText: 'Yes, suspend it!',\n                inputValidator: (value) => {\n                    if (!value) {\n                        return 'You need to write something!'\n                    }\n                }\n            })\n            if (reason) {\n                this.payload.reason_suspend = reason;\n                this.payload.users_id = this.dispatcher.id;\n                this.$store.commit(mutation.BUTTON_STATUS, true)\n                this.$store.dispatch(action.SUSPEND_DISPATCHER, this.payload)\n            }\n        },\n        async editButton() {\n            console.log('mantap :', this.dispatcher)\n            await this.$store.commit(mutation.SET_ID_DISPATCHER, this.dispatcher.id)\n            router.push({\n                path: `/edit-dispatcher`\n            })\n        },\n        backButton() {\n            router.replace('/dispatcher')\n        },\n        imgAlt(event) {\n            event.target.src = require(\"@/assets/images/avatar-2.jpg\");\n        }\n    }\n}\n",{"version":3,"sources":["detail-dispatcher.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"detail-dispatcher.vue","sourceRoot":"src/views/pages/dispathcer","sourcesContent":["<template>\n<div class=\"page-table scrollable only-y\" id=\"affix-container\">\n    <div class=\"card-base card-shadow--medium bg-white\">\n        <el-row :gutter=\"20\">\n            <el-col :lg=\"8\" :xl=\"3\">\n                <div class=\"thumbnail\">\n                    <img class=\"potrait\" :src=\"profilepicture\" @error=\"imgAlt\">\n                    </div>\n            </el-col>\n            <el-col :lg=\"16\" :xl=\"21\">\n                <div class=\"flex center demo-box\">\n                    <div class=\"right-box box grow\">\n                        <dl>\n                            <dt>Dispatcher Name</dt>\n                            <dd> {{ dispatcher.name }}</dd>\n                            <dt>Dispatcher Email</dt>\n                            <dd>{{ dispatcher.email }}</dd>\n                            <dt>Dispatcher Gender</dt>\n                            <dd>{{ (dispatcher.gender = 1) ? 'Male' : 'Female' }}</dd>\n                            <dt>Dispatcher Birth Date</dt>\n                            <dd>{{ (dispatcher.dispatcher_profile.birthdate || dispatcher.birthdate ) }}</dd>\n                        </dl>\n                    </div>\n                    <div class=\"left-box box grow\">\n                        <dl>\n                            <dt>Dispatcher NIK</dt>\n                            <dd>{{ dispatcher.dispatcher_profile.nik }}</dd>\n                            <dt>Dispatcher Phone Number</dt>\n                            <dd>{{ dispatcher.phonenumber }}</dd>\n                            <dt>Dispatcher Type</dt>\n                            <dd>{{ (dispatcher.role.idrole === 4) ? 'REGULER' : 'PLUS' }}</dd>\n                            <dt>Dispatcher Address</dt>\n                            <dd>{{ dispatcher.dispatcher_profile.address }}</dd>\n                        </dl>\n                    </div>\n                </div>\n            </el-col>\n        </el-row>\n        <el-row>\n            <el-col :span=\"10\">\n                <div class=\"grid-content\">\n                    <el-button @click=\"backButton\"> Back</el-button>\n                    <el-button @click=\"editButton\" style=\"margin-left: 70px\" type=\"primary\"> Edit </el-button>\n                </div>\n            </el-col>\n            <div v-if=\"dispatcher.status==1\">\n                <el-col :offset=\"11\" :lg=\"3\">\n                    <el-button :loading=\"button\" type=\"danger\" @click=\"suspendButton\">Suspend</el-button>\n                </el-col>\n            </div>\n            <div v-else-if=\"dispatcher.status==2\">\n                <el-col :offset=\"10\" :lg=\"3\">\n                   <el-button type=\"success\" :loading=\"button\" @click=\"resendActivation\">Resend Activation</el-button>\n                </el-col>\n            </div>\n            <div v-else-if=\"dispatcher.status==3\">\n                <el-col :offset=\"8\" :lg=\"3\">\n                    <el-button :loading=\"button\" @click=\"deleteB\" type=\"danger\"> Delete </el-button>\n                </el-col>\n                <el-col :lg=\"3\">\n                    <el-button :loading=\"button\" @click=\"activeButton\" type=\"primary\">Active</el-button>\n                </el-col>\n            </div>\n        </el-row>\n    </div>\n</div>\n</template>\n\n<script>\nimport router from '../../../router'\nimport {\n    mapGetters\n} from 'vuex'\nimport * as getter from '../../../store/getters-types'\nimport * as action from '../../../store/action-types'\nimport * as mutation from '../../../store/mutation-types'\nimport Swal from 'sweetalert2'\n\nexport default {\n    data() {\n        return {\n            payload: {\n                reason_suspend: \"\",\n                users_id: null,\n                iddispatcher: \"\",\n            },\n            alt: require(\"@/assets/images/avatar-2.jpg\")\n        };\n    },\n    computed: {\n        ...mapGetters({\n            dispatcher: getter.DISPATCHER,\n            button: getter.GET_BUTTON,\n        }),\n        profilepicture() {\n            if (this.dispatcher.profile_picture == null) {\n                return this.alt\n            } else {\n                return this.dispatcher.profile_picture\n            }\n        }\n    },\n    created() {\n        this.payload.iddispatcher = this.dispatcher.dispatcher_profile.iddispatcher\n    },\n    methods: {\n        inspector() {\n            router.replace('/pic-task-list')\n            this.$store.commit(mutation.SET_ID_ENTERPRISE, this.enterprise.identerprise)\n        },\n        templateTask() {\n            router.replace('/template-list')\n            this.$store.commit(mutation.SET_ID_ENTERPRISE, this.enterprise.identerprise)\n        },\n        editAdmin() {\n            router.replace('/edit-admin')\n            this.$store.commit(mutation.SET_ID_ENTERPRISE, this.enterprise.identerprise)\n        },\n        resendActivation(){\n            let obj ={\n                page : '/dispatcher',\n                iddispatcher   : this.payload.iddispatcher\n            }\n            this.$store.commit(mutation.BUTTON_STATUS, true)\n            this.$store.dispatch(action.RESEND_LINK_ACTIVATION, obj)\n        },\n        deleteB() {\n            Swal.fire({\n                title: 'Are you sure?',\n                text: \"You won't be able to revert this!\",\n                type: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#3085d6',\n                cancelButtonColor: '#d33',\n                confirmButtonText: 'Yes, delete it!'\n            }).then((result) => {\n                if (result.value) {\n                    this.$store.commit(mutation.BUTTON_STATUS, true)\n                    this.$store.dispatch(action.DELETE_DISPATCHER, this.dispatcher.id)\n                }\n            })\n        },\n        activeButton() {\n            Swal.fire({\n                title: \"Are you sure?\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonColor: \"#3085d6\",\n                cancelButtonColor: \"#d33\",\n                confirmButtonText: \"Yes, activate it!\"\n            }).then(result => {\n                if (result.value) {\n                    this.$store.commit(mutation.BUTTON_STATUS, true)\n                    this.$store.dispatch(action.ACTIVATE_DISPATCHER, this.dispatcher.id);\n                }\n            });\n        },\n        async suspendButton() {\n            const {\n                value: reason\n            } = await Swal.fire({\n                title: 'Enter the reason of suspending',\n                input: 'text',\n                showCancelButton: true,\n                confirmButtonColor: '#3085d6',\n                cancelButtonColor: '#d33',\n                confirmButtonText: 'Yes, suspend it!',\n                inputValidator: (value) => {\n                    if (!value) {\n                        return 'You need to write something!'\n                    }\n                }\n            })\n            if (reason) {\n                this.payload.reason_suspend = reason;\n                this.payload.users_id = this.dispatcher.id;\n                this.$store.commit(mutation.BUTTON_STATUS, true)\n                this.$store.dispatch(action.SUSPEND_DISPATCHER, this.payload)\n            }\n        },\n        async editButton() {\n            console.log('mantap :', this.dispatcher)\n            await this.$store.commit(mutation.SET_ID_DISPATCHER, this.dispatcher.id)\n            router.push({\n                path: `/edit-dispatcher`\n            })\n        },\n        backButton() {\n            router.replace('/dispatcher')\n        },\n        imgAlt(event) {\n            event.target.src = require(\"@/assets/images/avatar-2.jpg\");\n        }\n    }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.card-base {\n    padding: 20px;\n}\n\n.el-row {\n    padding: 0px 10px;\n\n    &:last-child {\n        margin-bottom: 0;\n    }\n}\n\n.el-col {\n    border-radius: 5px;\n}\n\n.thumbnail {\n    position: relative;\n    width: 220px;\n    height: 250px;\n    overflow: hidden;\n}\n\n.thumbnail img {\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    height: 100%;\n    width: auto;\n    -webkit-transform: translate(-50%, -50%);\n    -ms-transform: translate(-50%, -50%);\n    transform: translate(-50%, -50%);\n}\n\n.thumbnail img.portrait {\n    width: 100%;\n    height: auto;\n}\n</style>\n"]}]}