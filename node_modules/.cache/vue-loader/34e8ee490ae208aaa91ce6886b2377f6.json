{"remainingRequest":"C:\\Users\\ASUS\\Documents\\GitHub\\update-cancel-order-ui\\oper-customer\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ASUS\\Documents\\GitHub\\update-cancel-order-ui\\oper-customer\\src\\components\\employee\\total-account.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\update-cancel-order-ui\\oper-customer\\src\\components\\employee\\total-account.vue","mtime":1644413760060},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\update-cancel-order-ui\\oper-customer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\update-cancel-order-ui\\oper-customer\\node_modules\\babel-loader\\lib\\index.js","mtime":1646338474621},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\update-cancel-order-ui\\oper-customer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\update-cancel-order-ui\\oper-customer\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport router from '../../router'\r\nimport Swal from 'sweetalert2'\r\nimport Contacts from '@/assets/data/CONTACTS_MOCK_DATA.json'\r\nimport {\r\n    mapGetters,\r\n    mapActions\r\n} from 'vuex'\r\nimport * as getter from '../../store/getters-types'\r\nimport * as action from '../../store/action-types'\r\nimport * as mutation from '../../store/mutation-types'\r\n\r\nexport default {\r\n    name: 'Contacts',\r\n    data() {\r\n        return {\r\n            currentPage: 1,\r\n            status: 1,\r\n            type: '',\r\n            search: '',\r\n            dialogvisible: false,\r\n            pageWidth: 0,\r\n            userdata: {},\r\n            contacts: Contacts.slice(0, 30),\r\n            options: [{\r\n                value: 'Option1',\r\n                label: 'Option1'\r\n            }, {\r\n                value: 'Option2',\r\n                label: 'Option2',\r\n                disabled: true\r\n            }, {\r\n                value: 'Option3',\r\n                label: 'Option3'\r\n            }, {\r\n                value: 'Option4',\r\n                label: 'Option4'\r\n            }, {\r\n                value: 'Option5',\r\n                label: 'Option5'\r\n            }],\r\n            alt: 'require(\"@/assets/images/avatar-2.jpg\");',\r\n            value: '',\r\n            input4: '',\r\n            centerDialogVisible: false,\r\n            form: {\r\n                name: '',\r\n                photo: '',\r\n                photo_2: '',\r\n                status: '',\r\n                company: '',\r\n                phone: '',\r\n                email: '',\r\n                address: '',\r\n                nik: '',\r\n                id: '',\r\n                users_id: '',\r\n                gender: '',\r\n                job: '',\r\n            },\r\n            payload: {\r\n                reason_suspend: \"\",\r\n                users_id: null,\r\n                status: null,\r\n                page: 1,\r\n            },\r\n            select: [{\r\n                    name: \"ACTIVE\",\r\n                    status: 1,\r\n                },\r\n                {\r\n                    name: \"INACTIVE\",\r\n                    status: 2,\r\n                },\r\n                {\r\n                    name: \"SUSPENDED\",\r\n                    status: 3\r\n                }\r\n            ],\r\n        }\r\n    },\r\n    methods: {\r\n        searchChange(v) {\r\n            let trimName = this.input4.trim()\r\n            if (trimName.length > 0) {\r\n                this.$store.commit(mutation.BUTTON_STATUS, true);\r\n                this.$store.dispatch(action.LIST_EMPLOYEE, {\r\n                    page: 1,\r\n                    employee_search: trimName,\r\n                    status: this.status\r\n                });\r\n            } else {\r\n                this.$store.commit(mutation.BUTTON_STATUS, true);\r\n                this.$store.dispatch(action.LIST_EMPLOYEE, {\r\n                    page: 1,\r\n                    employee_search: trimName,\r\n                    status: this.status\r\n                });\r\n            }\r\n        },\r\n        newDispatcher() {\r\n            this.$router.replace('new-dispatcher')\r\n        },\r\n        imgAlt(event) {\r\n            event.target.src = require(\"../../assets/images/avatar-2.jpg\");\r\n        },\r\n        handlePageChange(page) {\r\n            this.currentPage = page\r\n            this.$store.commit(mutation.BUTTON_STATUS, true);\r\n            this.$store.dispatch(action.LIST_EMPLOYEE, {\r\n                page: this.currentPage,\r\n                status: this.status\r\n            });\r\n        },\r\n        async filterStatus(status) {\r\n            this.$store.commit(mutation.BUTTON_STATUS, true);\r\n            this.status = status;\r\n            await this.$store.dispatch(action.LIST_EMPLOYEE, {\r\n                page: 1,\r\n                status: this.status\r\n            });\r\n            this.formData()\r\n        },\r\n        openDialog(data) {\r\n            // this.form.photos = data.profile_pictures;\r\n            this.form.phone = data.phonenumber;\r\n            this.form.email = data.email;\r\n            this.form.nik = data.nik;\r\n            this.form.photo = data.profile_picture;\r\n            this.form.id = data.idemployee;\r\n            this.form.name = data.name;\r\n            this.form.address = data.address;\r\n            this.form.birthdate = data.birthdate;\r\n            this.form.users_id = data.users_id;\r\n            this.form.status = data.status;\r\n            this.form.job = data.employee_position.job_name;\r\n            this.form.gender = data.gender;\r\n            this.form.photo_2 = data.profil_picture_2;\r\n        },\r\n        additionalImage(){\r\n            if(this.form.photo_2 === null){ this.form.photo_2 = this.alt}\r\n            this.centerDialogVisible = true\r\n        },\r\n        async deleteB() {\r\n            await Swal.fire({\r\n                title: 'Are you sure?',\r\n                text: \"You won't be able to revert this!\",\r\n                type: 'warning',\r\n                showCancelButton: true,\r\n                confirmButtonColor: '#3085d6',\r\n                cancelButtonColor: '#d33',\r\n                confirmButtonText: 'Yes, delete it!'\r\n            }).then( async result => {\r\n                if (result.value) {\r\n                    this.payload.users_id = this.form.users_id;\r\n                    this.payload.status = this.form.status;\r\n                    this.$store.commit(mutation.BUTTON_STATUS, true);\r\n                    this.$store.commit(mutation.SET_BUTTON_DELETE, true);\r\n                    this.$store.dispatch(action.DELETE_EMPLOYEE, this.payload)\r\n                    await this.dataBeforeCreated();\r\n                }\r\n            });\r\n        },\r\n        resendActivation() {\r\n            let obj = {\r\n                pin_type: \"/employee/resend-pin\",\r\n                id: this.form.users_id\r\n            };\r\n            this.$store.commit(mutation.BUTTON_STATUS, true)\r\n            this.$store.dispatch(action.RESEND_PIN, obj);\r\n        },\r\n        async activeButton() {\r\n            await Swal.fire({\r\n                title: \"Are you sure?\",\r\n                type: \"warning\",\r\n                showCancelButton: true,\r\n                confirmButtonColor: \"#3085d6\",\r\n                cancelButtonColor: \"#d33\",\r\n                confirmButtonText: \"Yes, activate it!\"\r\n            }).then( async result => {\r\n                if (result.value) {\r\n                    this.payload.users_id = this.form.users_id;\r\n                    this.payload.status = this.form.status;\r\n                    this.$store.commit(mutation.BUTTON_STATUS, true);\r\n                    this.$store.commit(mutation.SET_BUTTON_ACTIVE, true);\r\n                    await this.$store.dispatch(action.ACTIVATE_EMPLOYEE, this.payload);\r\n                    this.dataBeforeCreated();\r\n                }\r\n            });\r\n        },\r\n        CreateEmployee() {\r\n            this.$store.commit(mutation.BUTTON_STATUS, false)\r\n            this.$router.push({\r\n                name: \"NewEmployee\"\r\n            });\r\n        },\r\n        Position() {\r\n            this.$router.push({\r\n                name: \"ListPosition\"\r\n            });\r\n        },\r\n        async suspendButton() {\r\n            const {\r\n                value: reason\r\n            } = await Swal.fire({\r\n                title: 'Enter the reason of suspending',\r\n                input: 'text',\r\n                showCancelButton: true,\r\n                confirmButtonColor: '#3085d6',\r\n                cancelButtonColor: '#d33',\r\n                confirmButtonText: 'Yes, suspend it!',\r\n                inputValidator: (value) => {\r\n                    if (!value) {\r\n                        return 'You need to write something!'\r\n                    }\r\n                }\r\n            });\r\n            if (reason) {\r\n                this.payload.reason_suspend = reason;\r\n                this.payload.users_id = this.form.users_id;\r\n                this.payload.status = this.form.status;\r\n                this.$store.commit(mutation.BUTTON_STATUS, true);\r\n                await this.$store.dispatch(action.SUSPEND_EMPLOYEE, this.payload);\r\n                this.dataBeforeCreated();\r\n            }\r\n        },\r\n        async editButton() {\r\n            this.$store.commit(mutation.BUTTON_STATUS, false);\r\n            await this.$store.dispatch(action.DETAIL_EMPLOYEE, this.form.id);\r\n            router.push({\r\n                path: `/edit-employee/` + this.form.id\r\n            });\r\n        },\r\n        formData(){\r\n            // this.form.photos = this.listData[0].profile_pictures;\r\n            this.form.phone = this.listData[0].phonenumber;\r\n            this.form.email = this.listData[0].email;\r\n            this.form.id = this.listData[0].idemployee;\r\n            this.form.nik = this.listData[0].nik;\r\n            this.form.photo = this.listData[0].profile_picture;\r\n            this.form.name = this.listData[0].name;\r\n            this.form.address = this.listData[0].address;\r\n            this.form.birthdate = this.listData[0].birthdate;\r\n            this.form.users_id = this.listData[0].id;\r\n            this.form.status = this.listData[0].status;\r\n            this.form.job = this.listData[0].employee_position.job_name;\r\n            this.form.gender = parseInt(this.listData[0].gender);\r\n            this.form.photo_2 = this.listData[0].profil_picture_2;\r\n        },\r\n        async dataBeforeCreated(){\r\n            await this.$store.dispatch(action.LIST_EMPLOYEE, {\r\n                page: this.currentPage,\r\n                status: this.status\r\n            });\r\n            if (this.listData !== null) {\r\n                if (this.listData.length > 0) {\r\n                    this.formData();\r\n                }\r\n            }\r\n        }\r\n    },\r\n    async created() {\r\n        this.$store.commit(mutation.BUTTON_STATUS, true);\r\n            this.dataBeforeCreated()\r\n    },\r\n    async mounted() {\r\n        await this.$store.dispatch(action.ACCOUNT_EMPLOYEE)\r\n        if (this.listData !== null) {\r\n            if (this.listData.length > 0) {\r\n                this.formData();\r\n            }\r\n        }\r\n    },\r\n    computed: {\r\n        ...mapGetters({\r\n            total           : getter.GET_EMPLOYEE_TOTAL,\r\n            listData        : getter.GET_LIST_EMPLOYEE,\r\n            paginate        : getter.GET_PAGINATE_EMPLOYEE,\r\n            loading         : getter.GET_BUTTON,\r\n            totalEmployee   : getter.GET_ACCOUNT_EMPLOYEE,\r\n            buttonDelete    : getter.GET_BUTTON_DELETE,\r\n            buttonResendPIN : getter.GET_BUTTON_RESEND_PIN,\r\n            buttonActive    : getter.GET_BUTTON_ACTIVE,\r\n            buttonSuspend   : getter.GET_BUTTON_SUSPEND,\r\n            buttonEdit      : getter.GET_BUTTON_EDIT\r\n        }),\r\n        contactsFiltered() {\r\n            return this.contacts.filter(({\r\n                full_name,\r\n                email,\r\n                phone\r\n            }) => (full_name + email + phone).toString().toLowerCase().indexOf(this.search.toString().toLowerCase()) !== -1)\r\n        },\r\n        contactsClass() {\r\n            return this.pageWidth >= 870 ? 'large' : this.pageWidth >= 760 ? 'medium' : 'small'\r\n        },\r\n        forTotal() {\r\n            if (this.listData) {\r\n                return this.total;\r\n            }\r\n        }\r\n    },\r\n    paginato() {\r\n        return this.paginate\r\n    },\r\n    indexTam() {\r\n        return this.indexT\r\n    }\r\n}\r\n",{"version":3,"sources":["total-account.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"total-account.vue","sourceRoot":"src/components/employee","sourcesContent":["<template>\r\n<div class=\"container mb-200\">\r\n    <p class=\"font-weight-600\">ACCOUNT</p>\r\n    <el-row :gutter=\"50\">\r\n        <el-col :span=\"17\">\r\n            <el-card shadow=\"always\" :body-style=\"{padding: '5px'}\" class=\"card-border\">\r\n                <el-row :gutter=\"20\" v-if=\"totalEmployee !== null\">\r\n                    <el-col :span=\"8\">\r\n                        <div class=\"line\">\r\n                            <p class=\"pb-20 font-weight-600 mt-8\">TOTAL EMPLOYEE</p>\r\n                            <span class=\"font-size-44 font-weight-600\">{{totalEmployee.total_driver}}</span>\r\n                        </div>\r\n                    </el-col>\r\n                    <el-col :span=\"8\">\r\n                        <div class=\"line\">\r\n                            <p class=\"pb-20 font-weight-600 mt-8\">ACTIVE ACCOUNT</p>\r\n                            <span class=\"font-size-44 font-weight-600\">{{totalEmployee.total_driver_active}}</span>\r\n                        </div>\r\n                    </el-col>\r\n                    <el-col :span=\"8\">\r\n                        <div class=\"text-center\">\r\n                            <p class=\"pb-20 font-weight-600 mt-8\">SUSPENDED ACCOUNT</p>\r\n                            <span class=\"font-size-44 font-weight-600\">{{totalEmployee.total_driver_suspend}}</span>\r\n                        </div>\r\n                    </el-col>\r\n                </el-row>\r\n            </el-card>\r\n        </el-col>\r\n        <el-col :span=\"3\">\r\n            <el-button @click=\"CreateEmployee\" shadow=\"always\" :body-style=\"{padding: '10px'}\" class=\"card-border plus-bg text-center\">\r\n                <i class=\"mdi mdi-plus font-size-60 font-weight-500 white-text\"></i>\r\n                <span class=\"text-p\">Add New</span>\r\n                <span class=\"text-p\">Employee</span>\r\n            </el-button>\r\n        </el-col>\r\n         <el-col :span=\"2\">\r\n            <el-button @click=\"Position\" shadow=\"always\" :body-style=\"{padding: '10px'}\" class=\"card-border plus-bg2 text-center\">\r\n                <i class=\"mdi mdi-clipboard-account font-size-60 font-weight-500 white-text\"></i>\r\n                <span class=\"text-p\">List</span>\r\n                <span class=\"text-p\">Position</span>\r\n            </el-button>\r\n        </el-col>\r\n    </el-row>\r\n\r\n    <p class=\"font-weight-600 mt-40\">INFO</p>\r\n    <el-row class=\"mt-20\">\r\n        <el-card shadow=\"always\" class=\"card-border\">\r\n            <el-row :gutter=\"20\">\r\n                <el-col :span=\"12\" class=\"line-not-center\">\r\n                    <div class=\"avatar2 align-vertical text-center\">\r\n                        <img :src=\"form.photo\" class=\"align-vertical-middle\" alt=\"user avatar\" @error=\"imgAlt\">\r\n                        <h1 class=\"name-of\">{{ form.name }}</h1>\r\n                        <span>\r\n                            <h3>{{form.status == 1 ? 'ACTIVE' : (form.status == 2 ? 'INACTIVE' : 'SUSPENDED')}}</h3>\r\n                        </span>\r\n                    </div>\r\n                    <el-row type=\"flex\" justify=\"center\">\r\n                        <el-col :span=\"9\">\r\n                            <div>\r\n                                <dl>\r\n                                    <dt>PHONE</dt>\r\n                                    <dd>{{ form.phone }}</dd>\r\n                                    <dt>TYPE</dt>\r\n                                    <dd>{{ form.job }}</dd>\r\n                                    <dt>GENDER</dt>\r\n                                    <dd>{{form.gender == 1 ? 'Male' : 'Female'}}</dd>\r\n                                    <dt>EMAIL</dt>\r\n                                    <dd>{{ form.email }}</dd>\r\n                                </dl>\r\n                            </div>\r\n                        </el-col>\r\n                        <el-col :span=\"9\">\r\n                            <div>\r\n                                <dl>\r\n                                    <dt>BIRTHDATE</dt>\r\n                                    <dd>{{ form.birthdate }}</dd>\r\n                                    <dt v-if=\"form.address !== ''\">ADDRESS</dt>\r\n                                    <dd>{{ form.address }}</dd>\r\n                                    <dt>NIK</dt>\r\n                                    <dd>{{ form.nik }}</dd>\r\n                                </dl>\r\n                            </div>\r\n                        </el-col>\r\n                    </el-row>\r\n                    <el-row type=\"flex\" justify=\"center\" class=\"mt-10\">\r\n                        <el-col :span=\"12\">\r\n                            <el-button @click=\"editButton\" type=\"info\" size=\"small\" class=\"small-edit\">Edit</el-button>\r\n                            <el-button @click=\"additionalImage\" plain type=\"success\" size=\"small\" >Additional Image</el-button>\r\n                        </el-col>\r\n                        <el-col :span=\"12\">\r\n                            <el-button type=\"danger\" size=\"small\" @click=\"suspendButton\" :loading=\"buttonSuspend\" v-if=\"status === 1\">Suspend</el-button>\r\n                            <el-button type=\"success\" size=\"small\" @click=\"resendActivation\" :loading=\"buttonResendPIN\" v-if=\"status === 2\">Resend Activation</el-button>\r\n                            <el-button type=\"danger\" size=\"small\" @click=\"deleteB\" :loading=\"buttonDelete\" v-if=\"status === 3\"> Delete </el-button>\r\n                            <el-button type=\"primary\" size=\"small\" @click=\"activeButton\" :loading=\"buttonActive\" v-if=\"status === 3\">Activate</el-button>\r\n                        </el-col>\r\n                    </el-row>\r\n                </el-col>\r\n                <el-col :span=\"12\">\r\n                    <el-row type=\"flex\" justify=\"center\" :gutter=\"20\" class=\"mt-10\">\r\n                        <el-col :span=\"10\">\r\n                            <el-input size=\"mini\" placeholder=\"Search\" @keyup.native=\"searchChange\" v-model=\"input4\">\r\n                                <i slot=\"suffix\" class=\"el-input__icon el-icon-search\"></i>\r\n                            </el-input>\r\n                        </el-col>\r\n                        <el-col :span=\"6\">\r\n                            <el-select @change=\"filterStatus\" v-model=\"status\" filterable size=\"mini\" placeholder=\"All Status\">\r\n                                <el-option v-for=\"item in select\" :key=\"item.status\" :label=\"item.name\" :value=\"item.status\">\r\n                                </el-option>\r\n                            </el-select>\r\n                        </el-col>\r\n                    </el-row>\r\n                    <div class=\"contacts-list box grow scrollable only-y\" v-loading=\"loading\">\r\n                        <el-row :gutter=\"20\">\r\n                            <div v-for=\"c in listData\" :key=\"c.id\" class=\"flex contact\" @click=\"openDialog(c)\">\r\n                                <div class=\"avatar align-vertical el-col el-col-4\">\r\n                                    <img :src=\"c.profile_picture\" class=\"align-vertical-middle\" alt=\"user avatar\" @error=\"imgAlt\">\r\n                                </div>\r\n                                <div class=\"info box grow flex el-col el-col-20\">\r\n                                            <div class=\"name box grow flex column justify-center p-10 scrollable only-x\">\r\n                                                <div class=\"fullname fs-18\"><strong>{{c.name}}</strong></div>\r\n                                                <div class=\"phone fs-14 secondary-text\">{{c.phonenumber}}</div>\r\n                                                <div class=\"email fs-14 secondary-text\">{{c.email}}</div>\r\n                                            </div>\r\n                                            <div class=\"phone align-vertical p-10\" style=\"color: green\" v-if=\"c.status === 1\"><span class=\"align-vertical-middle font-weight-600\">ACTIVE</span></div>\r\n                                            <div class=\"phone align-vertical p-10\" v-if=\"c.status === 2\"><span class=\"align-vertical-middle font-weight-600\">IN ACTIVE</span></div>\r\n                                            <div class=\"phone align-vertical p-10\" style=\"color: red\" v-if=\"c.status === 3\"><span class=\"align-vertical-middle font-weight-600\">SUSPENDED</span></div>\r\n                                </div>\r\n                            </div>\r\n                        </el-row>\r\n                        <div class=\"grid-content\">\r\n                            <el-pagination background layout=\"prev, pager, next\" @current-change=\"handlePageChange\" :total=\"forTotal\">\r\n                            </el-pagination>\r\n                        </div>\r\n                    </div>\r\n                </el-col>\r\n            </el-row>\r\n        </el-card>\r\n    </el-row>\r\n    <el-dialog\r\n            :visible.sync=\"centerDialogVisible\"\r\n            width=\"20%\"\r\n            center>\r\n            <img\r\n                    style=\"width: 100%\"\r\n                    :src=\"form.photo_2\"\r\n                    alt=\"user avatar\"\r\n                    @error=\"imgAlt\">\r\n    </el-dialog>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport router from '../../router'\r\nimport Swal from 'sweetalert2'\r\nimport Contacts from '@/assets/data/CONTACTS_MOCK_DATA.json'\r\nimport {\r\n    mapGetters,\r\n    mapActions\r\n} from 'vuex'\r\nimport * as getter from '../../store/getters-types'\r\nimport * as action from '../../store/action-types'\r\nimport * as mutation from '../../store/mutation-types'\r\n\r\nexport default {\r\n    name: 'Contacts',\r\n    data() {\r\n        return {\r\n            currentPage: 1,\r\n            status: 1,\r\n            type: '',\r\n            search: '',\r\n            dialogvisible: false,\r\n            pageWidth: 0,\r\n            userdata: {},\r\n            contacts: Contacts.slice(0, 30),\r\n            options: [{\r\n                value: 'Option1',\r\n                label: 'Option1'\r\n            }, {\r\n                value: 'Option2',\r\n                label: 'Option2',\r\n                disabled: true\r\n            }, {\r\n                value: 'Option3',\r\n                label: 'Option3'\r\n            }, {\r\n                value: 'Option4',\r\n                label: 'Option4'\r\n            }, {\r\n                value: 'Option5',\r\n                label: 'Option5'\r\n            }],\r\n            alt: 'require(\"@/assets/images/avatar-2.jpg\");',\r\n            value: '',\r\n            input4: '',\r\n            centerDialogVisible: false,\r\n            form: {\r\n                name: '',\r\n                photo: '',\r\n                photo_2: '',\r\n                status: '',\r\n                company: '',\r\n                phone: '',\r\n                email: '',\r\n                address: '',\r\n                nik: '',\r\n                id: '',\r\n                users_id: '',\r\n                gender: '',\r\n                job: '',\r\n            },\r\n            payload: {\r\n                reason_suspend: \"\",\r\n                users_id: null,\r\n                status: null,\r\n                page: 1,\r\n            },\r\n            select: [{\r\n                    name: \"ACTIVE\",\r\n                    status: 1,\r\n                },\r\n                {\r\n                    name: \"INACTIVE\",\r\n                    status: 2,\r\n                },\r\n                {\r\n                    name: \"SUSPENDED\",\r\n                    status: 3\r\n                }\r\n            ],\r\n        }\r\n    },\r\n    methods: {\r\n        searchChange(v) {\r\n            let trimName = this.input4.trim()\r\n            if (trimName.length > 0) {\r\n                this.$store.commit(mutation.BUTTON_STATUS, true);\r\n                this.$store.dispatch(action.LIST_EMPLOYEE, {\r\n                    page: 1,\r\n                    employee_search: trimName,\r\n                    status: this.status\r\n                });\r\n            } else {\r\n                this.$store.commit(mutation.BUTTON_STATUS, true);\r\n                this.$store.dispatch(action.LIST_EMPLOYEE, {\r\n                    page: 1,\r\n                    employee_search: trimName,\r\n                    status: this.status\r\n                });\r\n            }\r\n        },\r\n        newDispatcher() {\r\n            this.$router.replace('new-dispatcher')\r\n        },\r\n        imgAlt(event) {\r\n            event.target.src = require(\"../../assets/images/avatar-2.jpg\");\r\n        },\r\n        handlePageChange(page) {\r\n            this.currentPage = page\r\n            this.$store.commit(mutation.BUTTON_STATUS, true);\r\n            this.$store.dispatch(action.LIST_EMPLOYEE, {\r\n                page: this.currentPage,\r\n                status: this.status\r\n            });\r\n        },\r\n        async filterStatus(status) {\r\n            this.$store.commit(mutation.BUTTON_STATUS, true);\r\n            this.status = status;\r\n            await this.$store.dispatch(action.LIST_EMPLOYEE, {\r\n                page: 1,\r\n                status: this.status\r\n            });\r\n            this.formData()\r\n        },\r\n        openDialog(data) {\r\n            // this.form.photos = data.profile_pictures;\r\n            this.form.phone = data.phonenumber;\r\n            this.form.email = data.email;\r\n            this.form.nik = data.nik;\r\n            this.form.photo = data.profile_picture;\r\n            this.form.id = data.idemployee;\r\n            this.form.name = data.name;\r\n            this.form.address = data.address;\r\n            this.form.birthdate = data.birthdate;\r\n            this.form.users_id = data.users_id;\r\n            this.form.status = data.status;\r\n            this.form.job = data.employee_position.job_name;\r\n            this.form.gender = data.gender;\r\n            this.form.photo_2 = data.profil_picture_2;\r\n        },\r\n        additionalImage(){\r\n            if(this.form.photo_2 === null){ this.form.photo_2 = this.alt}\r\n            this.centerDialogVisible = true\r\n        },\r\n        async deleteB() {\r\n            await Swal.fire({\r\n                title: 'Are you sure?',\r\n                text: \"You won't be able to revert this!\",\r\n                type: 'warning',\r\n                showCancelButton: true,\r\n                confirmButtonColor: '#3085d6',\r\n                cancelButtonColor: '#d33',\r\n                confirmButtonText: 'Yes, delete it!'\r\n            }).then( async result => {\r\n                if (result.value) {\r\n                    this.payload.users_id = this.form.users_id;\r\n                    this.payload.status = this.form.status;\r\n                    this.$store.commit(mutation.BUTTON_STATUS, true);\r\n                    this.$store.commit(mutation.SET_BUTTON_DELETE, true);\r\n                    this.$store.dispatch(action.DELETE_EMPLOYEE, this.payload)\r\n                    await this.dataBeforeCreated();\r\n                }\r\n            });\r\n        },\r\n        resendActivation() {\r\n            let obj = {\r\n                pin_type: \"/employee/resend-pin\",\r\n                id: this.form.users_id\r\n            };\r\n            this.$store.commit(mutation.BUTTON_STATUS, true)\r\n            this.$store.dispatch(action.RESEND_PIN, obj);\r\n        },\r\n        async activeButton() {\r\n            await Swal.fire({\r\n                title: \"Are you sure?\",\r\n                type: \"warning\",\r\n                showCancelButton: true,\r\n                confirmButtonColor: \"#3085d6\",\r\n                cancelButtonColor: \"#d33\",\r\n                confirmButtonText: \"Yes, activate it!\"\r\n            }).then( async result => {\r\n                if (result.value) {\r\n                    this.payload.users_id = this.form.users_id;\r\n                    this.payload.status = this.form.status;\r\n                    this.$store.commit(mutation.BUTTON_STATUS, true);\r\n                    this.$store.commit(mutation.SET_BUTTON_ACTIVE, true);\r\n                    await this.$store.dispatch(action.ACTIVATE_EMPLOYEE, this.payload);\r\n                    this.dataBeforeCreated();\r\n                }\r\n            });\r\n        },\r\n        CreateEmployee() {\r\n            this.$store.commit(mutation.BUTTON_STATUS, false)\r\n            this.$router.push({\r\n                name: \"NewEmployee\"\r\n            });\r\n        },\r\n        Position() {\r\n            this.$router.push({\r\n                name: \"ListPosition\"\r\n            });\r\n        },\r\n        async suspendButton() {\r\n            const {\r\n                value: reason\r\n            } = await Swal.fire({\r\n                title: 'Enter the reason of suspending',\r\n                input: 'text',\r\n                showCancelButton: true,\r\n                confirmButtonColor: '#3085d6',\r\n                cancelButtonColor: '#d33',\r\n                confirmButtonText: 'Yes, suspend it!',\r\n                inputValidator: (value) => {\r\n                    if (!value) {\r\n                        return 'You need to write something!'\r\n                    }\r\n                }\r\n            });\r\n            if (reason) {\r\n                this.payload.reason_suspend = reason;\r\n                this.payload.users_id = this.form.users_id;\r\n                this.payload.status = this.form.status;\r\n                this.$store.commit(mutation.BUTTON_STATUS, true);\r\n                await this.$store.dispatch(action.SUSPEND_EMPLOYEE, this.payload);\r\n                this.dataBeforeCreated();\r\n            }\r\n        },\r\n        async editButton() {\r\n            this.$store.commit(mutation.BUTTON_STATUS, false);\r\n            await this.$store.dispatch(action.DETAIL_EMPLOYEE, this.form.id);\r\n            router.push({\r\n                path: `/edit-employee/` + this.form.id\r\n            });\r\n        },\r\n        formData(){\r\n            // this.form.photos = this.listData[0].profile_pictures;\r\n            this.form.phone = this.listData[0].phonenumber;\r\n            this.form.email = this.listData[0].email;\r\n            this.form.id = this.listData[0].idemployee;\r\n            this.form.nik = this.listData[0].nik;\r\n            this.form.photo = this.listData[0].profile_picture;\r\n            this.form.name = this.listData[0].name;\r\n            this.form.address = this.listData[0].address;\r\n            this.form.birthdate = this.listData[0].birthdate;\r\n            this.form.users_id = this.listData[0].id;\r\n            this.form.status = this.listData[0].status;\r\n            this.form.job = this.listData[0].employee_position.job_name;\r\n            this.form.gender = parseInt(this.listData[0].gender);\r\n            this.form.photo_2 = this.listData[0].profil_picture_2;\r\n        },\r\n        async dataBeforeCreated(){\r\n            await this.$store.dispatch(action.LIST_EMPLOYEE, {\r\n                page: this.currentPage,\r\n                status: this.status\r\n            });\r\n            if (this.listData !== null) {\r\n                if (this.listData.length > 0) {\r\n                    this.formData();\r\n                }\r\n            }\r\n        }\r\n    },\r\n    async created() {\r\n        this.$store.commit(mutation.BUTTON_STATUS, true);\r\n            this.dataBeforeCreated()\r\n    },\r\n    async mounted() {\r\n        await this.$store.dispatch(action.ACCOUNT_EMPLOYEE)\r\n        if (this.listData !== null) {\r\n            if (this.listData.length > 0) {\r\n                this.formData();\r\n            }\r\n        }\r\n    },\r\n    computed: {\r\n        ...mapGetters({\r\n            total           : getter.GET_EMPLOYEE_TOTAL,\r\n            listData        : getter.GET_LIST_EMPLOYEE,\r\n            paginate        : getter.GET_PAGINATE_EMPLOYEE,\r\n            loading         : getter.GET_BUTTON,\r\n            totalEmployee   : getter.GET_ACCOUNT_EMPLOYEE,\r\n            buttonDelete    : getter.GET_BUTTON_DELETE,\r\n            buttonResendPIN : getter.GET_BUTTON_RESEND_PIN,\r\n            buttonActive    : getter.GET_BUTTON_ACTIVE,\r\n            buttonSuspend   : getter.GET_BUTTON_SUSPEND,\r\n            buttonEdit      : getter.GET_BUTTON_EDIT\r\n        }),\r\n        contactsFiltered() {\r\n            return this.contacts.filter(({\r\n                full_name,\r\n                email,\r\n                phone\r\n            }) => (full_name + email + phone).toString().toLowerCase().indexOf(this.search.toString().toLowerCase()) !== -1)\r\n        },\r\n        contactsClass() {\r\n            return this.pageWidth >= 870 ? 'large' : this.pageWidth >= 760 ? 'medium' : 'small'\r\n        },\r\n        forTotal() {\r\n            if (this.listData) {\r\n                return this.total;\r\n            }\r\n        }\r\n    },\r\n    paginato() {\r\n        return this.paginate\r\n    },\r\n    indexTam() {\r\n        return this.indexT\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import \"../../assets/scss/_variables\";\r\n\r\n.card-border {\r\n    border-radius: 11px;\r\n}\r\n\r\n.line-not-center {\r\n    border-right: 3px solid #3333;\r\n}\r\n\r\n.line {\r\n    border-right: 3px solid #3333;\r\n    text-align: center;\r\n}\r\n\r\n.text-p {\r\n    display: block;\r\n    color: white;\r\n    font-weight: 600;\r\n}\r\n\r\n.plus-bg {\r\n    background-color: #a31424;\r\n    height: 139px;\r\n\r\n}\r\n.plus-bg2 {\r\n    background-color: #e64a19\r\n\r\n;\r\n    height: 139px;\r\n\r\n}\r\n\r\n.avatar {\r\n    img {\r\n        border: 1px solid transparentize($text-color, .9);\r\n        box-sizing: border-box;\r\n        width: 60px;\r\n        height: 60px;\r\n        border-radius: 50%;\r\n        transition: all .5s .25s;\r\n    }\r\n}\r\n\r\n.avatar2 {\r\n    img {\r\n        border: 1px solid transparentize($text-color, .9);\r\n        box-sizing: border-box;\r\n        width: 120px;\r\n        height: 120px;\r\n        border-radius: 50%;\r\n        transition: all .5s .25s;\r\n    }\r\n}\r\n\r\n.name-of {\r\n    margin-bottom: 10px;\r\n    color: #a31424;\r\n}\r\n\r\n.contacts-list {\r\n    //margin: 0 auto;\r\n    height: 600px;\r\n    width: 100%;\r\n    max-width: 965px;\r\n    padding: 0px 30px;\r\n    box-sizing: border-box;\r\n\r\n    .contact {\r\n        margin: 10px 0;\r\n        padding: 5px;\r\n        box-sizing: border-box;\r\n        cursor: pointer;\r\n        border-bottom: 1px solid $text-color-info;\r\n    }\r\n}\r\n\r\n.small-edit {\r\n    width: 90px;\r\n}\r\n</style>\r\n<style lang=\"scss\">\r\n.el-pagination.is-background .el-pager li:not(.disabled).active {\r\n    background-color: #D50000 !important;\r\n}\r\n</style>\r\n"]}]}