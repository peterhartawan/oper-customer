{"remainingRequest":"C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\src\\components\\enterprise\\popup_multi_dispatcher.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\src\\components\\enterprise\\popup_multi_dispatcher.vue","mtime":1652829068516},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\node_modules\\babel-loader\\lib\\index.js","mtime":1646338474621},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport {\r\n    mapGetters\r\n} from 'vuex'\r\nimport * as getter from '../../store/getters-types'\r\nimport * as action from '../../store/action-types'\r\nimport Swal from 'sweetalert2'\r\nimport * as mutation from '../../store/mutation-types'\r\n\r\nexport default {\r\n    props: ['identerprise', 'picture'],\r\n    data() {\r\n        return {\r\n            currentPage: 1,\r\n            dialogTableVisible: false,\r\n            form: {\r\n                assignEnterprise: this.identerprise,\r\n                search: ''\r\n            },\r\n            firstLoad: true,\r\n            buttonSearchPress: false,\r\n            showFinalList: false,\r\n            applyDisabled: true,\r\n            selected_dispatcher_ids: [],\r\n            unassign_dispatcher_ids: [],\r\n            final_dispatcher_list: []\r\n        };\r\n    },\r\n    computed: {\r\n        ...mapGetters({\r\n            paginate: getter.GET_PAGINATE_DISPATCHER,\r\n            listData: getter.GET_DISPATCHER_AVAILABLE,\r\n            loading: getter.GET_BUTTON,\r\n            default_dispatchers: getter.GET_SELECTED_DISPATCHERS\r\n        }),\r\n        paginato() {\r\n            return this.paginate\r\n        },\r\n        indexTam() {\r\n            return this.indexT\r\n        },\r\n        vendor() {\r\n            let idrole = JSON.parse(localStorage.getItem('user')).idrole\r\n            if (idrole === 2) {\r\n                return true\r\n            } else {\r\n                return false\r\n            }\r\n        }\r\n    },\r\n    methods: {\r\n        apply(){\r\n            this.final_dispatcher_list = []\r\n\r\n            let ld = this.listData\r\n            let dd = this.default_dispatchers\r\n            let ud = this.unassign_dispatcher_ids\r\n            let sd = this.selected_dispatcher_ids\r\n\r\n            let lenLd = ld.length\r\n            let lenDd = dd.length\r\n            let lenUd = ud.length\r\n            let lenSd = sd.length\r\n\r\n            //get unchanged dispatchers\r\n            //default dispatchers - unassigned dispatchers\r\n            let count\r\n            for(let i = 0; i < lenDd; i++){\r\n                count = 0\r\n                for(let j = 0; j < lenUd; j++){\r\n                    if(dd[i].id == ud[j]){\r\n                        count++\r\n                    }\r\n                }\r\n                //doesn't exist\r\n                if(count == 0)\r\n                    this.final_dispatcher_list.push(dd[i])\r\n            }\r\n\r\n            //push assigned dispatchers\r\n            for(let i = 0; i < lenSd; i++){\r\n                for(let j = 0; j < lenLd; j++){\r\n                    //exists\r\n                    if(sd[i] == ld[j].id)\r\n                        this.final_dispatcher_list.push(ld[j])\r\n                }\r\n            }\r\n\r\n            this.dialogTableVisible = false\r\n            this.showFinalList = true\r\n        },\r\n        confirm(){\r\n            this.showFinalList = false\r\n            let obj = {\r\n                // id: id.id,\r\n                assign_ids  : this.selected_dispatcher_ids,\r\n                unassign_ids: this.unassign_dispatcher_ids,\r\n                identerprise: this.identerprise\r\n            };\r\n            this.$store.dispatch(action.MULTI_TO_ENTERPRISE, obj);\r\n        },\r\n        cancel(){\r\n            this.showFinalList = false\r\n        },\r\n        renderDialog(){\r\n            this.dialogTableVisible = true\r\n            if(this.firstLoad){\r\n                this.selected_dispatcher_ids = []\r\n                this.unassign_dispatcher_ids = []\r\n                this.$store.commit(mutation.BUTTON_STATUS, true)\r\n                setTimeout(\r\n                    () => {\r\n                        this.$refs.tableRef.clearSelection()\r\n                        this.default_dispatchers.forEach((element) => {\r\n                            this.$refs.tableRef.toggleRowSelection(element)\r\n                        })\r\n                        this.firstLoad = false\r\n                        this.$store.commit(mutation.BUTTON_STATUS, false)\r\n                        // console.log(this.selected_dispatcher_ids)\r\n                    }, \r\n                    1000\r\n                )\r\n            }\r\n        },\r\n        async handlePageChange(page) {\r\n            this.currentPage = page;\r\n            let obj = {\r\n                role: 4,\r\n                page: this.currentPage\r\n            };\r\n            this.$store.commit(mutation.BUTTON_STATUS, true)\r\n            await this.$store.dispatch(action.LIST_DISPATCHER_ROLE, obj);\r\n        },\r\n        indexMethod(index) {\r\n            return index + 1;\r\n        },\r\n        async buttonSearch() {\r\n            this.buttonSearchPress = true\r\n\r\n            this.$store.commit(mutation.BUTTON_STATUS, true);\r\n            await this.$store.dispatch(action.MULTI_DISPATCHER_AVAILABLE, this.form)\r\n\r\n            let ld = this.listData\r\n            let sd = []\r\n            this.default_dispatchers.forEach((element) => {\r\n                sd.push(element.id)\r\n            })\r\n            this.selected_dispatcher_ids.forEach((element) => {\r\n                sd.push(element)\r\n            })\r\n            let lenLd = ld.length\r\n            let lenSd = sd.length\r\n\r\n            //check the box of selected dispatchers\r\n            for(let i = 0; i < lenLd; i++){\r\n                for(let j = 0; j < lenSd; j++){\r\n                    if(ld[i].id == sd[j]){\r\n                        this.$refs.tableRef.toggleRowSelection(ld[i])\r\n                    }\r\n                }\r\n            }\r\n            this.buttonSearchPress = false\r\n        },\r\n        handleSelectionChange(val) {\r\n            if(this.firstLoad)\r\n                return\r\n            \r\n            if(this.buttonSearchPress)\r\n                return\r\n                \r\n            var count\r\n            this.selected_dispatcher_ids = []\r\n            this.unassign_dispatcher_ids = []\r\n\r\n            let s = val\r\n            let d = this.default_dispatchers\r\n            let lenS = s.length\r\n            let lenD = d.length\r\n\r\n            //newly added dispatchers\r\n            for(let i = 0; i < lenS; i++){\r\n                count = 0\r\n                for(let j = 0; j < lenD; j++){\r\n                    if(s[i].id == d[j].id)\r\n                        count++\r\n                }\r\n                if(count == 0)\r\n                    this.selected_dispatcher_ids.push(s[i].id)\r\n            }\r\n\r\n            //removed dispatchers\r\n            for(let j = 0; j < lenD; j++){\r\n                count = 0\r\n                for(let i = 0; i < lenS; i++){\r\n                    if(s[i].id == d[j].id)\r\n                        count++\r\n                }\r\n                if(count == 0)\r\n                    this.unassign_dispatcher_ids.push(d[j].id)\r\n            }\r\n\r\n            if(this.selected_dispatcher_ids.length != 0 || this.unassign_dispatcher_ids.length != 0 ){\r\n                this.applyDisabled = false\r\n            } else {\r\n                this.applyDisabled = true\r\n            }\r\n        }\r\n    },\r\n};\r\n",{"version":3,"sources":["popup_multi_dispatcher.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2EA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"popup_multi_dispatcher.vue","sourceRoot":"src/components/enterprise","sourcesContent":["<template>\r\n<span>\r\n    <div class=\"hoverhand\" slot=\"reference\">\r\n        <el-button @click=\"renderDialog\" style=\"width: 100%; border-color: #f4f4f5;\" type=\"info\" plain>\r\n            <span style=\" text-align: justify;\">\r\n                <h2><img src=\"../../../src/assets/oper_asset/employee.png\" class=\"drive-acount\">&nbsp; Dispatcher List</h2>\r\n            </span>\r\n        </el-button>\r\n    </div>\r\n    <el-dialog :visible.sync=\"dialogTableVisible\" title=\"Assign Dispatcher Plus\" width=\"70%\">\r\n        <el-form :model=\"form\" @submit.prevent.native>\r\n            <el-row :gutter=\"20\">\r\n                <el-col :span=\"20\">\r\n                    <el-form-item>\r\n                        <el-input placeholder=\"Search\" clearable v-model=\"form.search\"></el-input>\r\n                    </el-form-item>\r\n                </el-col>\r\n                <el-col :span=\"4\">\r\n                    <el-button @click=\"buttonSearch\" icon=\"el-icon-search\"></el-button>\r\n                </el-col>\r\n            </el-row>\r\n        </el-form>\r\n        <el-row>\r\n            <el-table \r\n                ref=\"tableRef\"\r\n                v-loading=\"loading\" \r\n                :data=\"listData\" \r\n                height=\"280\"\r\n                @selection-change=\"handleSelectionChange\"\r\n            >\r\n\r\n                <el-table-column type=\"index\" :index=\"indexMethod\" label=\"No\" width=\"80\"/>\r\n                <el-table-column prop=\"name\" label=\"Name\"/>\r\n                <el-table-column prop=\"phonenumber\" label=\"Mobile\"/>\r\n                <el-table-column type=\"selection\"/>\r\n\r\n            </el-table>\r\n        </el-row>\r\n        <el-row style=\"margin-top: 20px; width: 100%;\">\r\n            <el-button \r\n                @click=\"apply\"\r\n                :disabled=\"applyDisabled\"\r\n                style=\"float: right;\"\r\n                type=\"success\">\r\n                Apply\r\n            </el-button>\r\n        </el-row>\r\n    </el-dialog>\r\n    <el-dialog :visible.sync=\"showFinalList\" title=\"Dispatcher List\" width=\"70%\">\r\n        <el-row v-if=\"final_dispatcher_list.length != 0\">\r\n            <el-table :data=\"final_dispatcher_list\">\r\n                <el-table-column type=\"index\" label=\"No\" width=\"80\"/>\r\n                <el-table-column prop=\"name\" label=\"Name\"/>\r\n                <el-table-column prop=\"phonenumber\" label=\"Mobile\"/>\r\n            </el-table>\r\n        </el-row>\r\n        <el-row v-if=\"final_dispatcher_list.length != 0\">\r\n            <p class=\"font-weight-600\" align=\"center\">Apakah anda yakin untuk assign dispatcher?</p>\r\n        </el-row>\r\n        <el-row v-else>\r\n            <p class=\"font-weight-600\" align=\"center\">Apakah anda yakin untuk mengosongkan dispatcher?</p>\r\n        </el-row>\r\n        <el-row type=\"flex\" justify=\"center\">\r\n            <el-button @click=\"confirm\" type=\"success\" size=\"medium\">\r\n                Ya\r\n            </el-button>\r\n            <el-button @click=\"cancel\" type=\"danger\" size=\"medium\">\r\n                Tidak\r\n            </el-button>\r\n        </el-row>\r\n    </el-dialog>\r\n</span>\r\n</template>\r\n\r\n<script>\r\nimport {\r\n    mapGetters\r\n} from 'vuex'\r\nimport * as getter from '../../store/getters-types'\r\nimport * as action from '../../store/action-types'\r\nimport Swal from 'sweetalert2'\r\nimport * as mutation from '../../store/mutation-types'\r\n\r\nexport default {\r\n    props: ['identerprise', 'picture'],\r\n    data() {\r\n        return {\r\n            currentPage: 1,\r\n            dialogTableVisible: false,\r\n            form: {\r\n                assignEnterprise: this.identerprise,\r\n                search: ''\r\n            },\r\n            firstLoad: true,\r\n            buttonSearchPress: false,\r\n            showFinalList: false,\r\n            applyDisabled: true,\r\n            selected_dispatcher_ids: [],\r\n            unassign_dispatcher_ids: [],\r\n            final_dispatcher_list: []\r\n        };\r\n    },\r\n    computed: {\r\n        ...mapGetters({\r\n            paginate: getter.GET_PAGINATE_DISPATCHER,\r\n            listData: getter.GET_DISPATCHER_AVAILABLE,\r\n            loading: getter.GET_BUTTON,\r\n            default_dispatchers: getter.GET_SELECTED_DISPATCHERS\r\n        }),\r\n        paginato() {\r\n            return this.paginate\r\n        },\r\n        indexTam() {\r\n            return this.indexT\r\n        },\r\n        vendor() {\r\n            let idrole = JSON.parse(localStorage.getItem('user')).idrole\r\n            if (idrole === 2) {\r\n                return true\r\n            } else {\r\n                return false\r\n            }\r\n        }\r\n    },\r\n    methods: {\r\n        apply(){\r\n            this.final_dispatcher_list = []\r\n\r\n            let ld = this.listData\r\n            let dd = this.default_dispatchers\r\n            let ud = this.unassign_dispatcher_ids\r\n            let sd = this.selected_dispatcher_ids\r\n\r\n            let lenLd = ld.length\r\n            let lenDd = dd.length\r\n            let lenUd = ud.length\r\n            let lenSd = sd.length\r\n\r\n            //get unchanged dispatchers\r\n            //default dispatchers - unassigned dispatchers\r\n            let count\r\n            for(let i = 0; i < lenDd; i++){\r\n                count = 0\r\n                for(let j = 0; j < lenUd; j++){\r\n                    if(dd[i].id == ud[j]){\r\n                        count++\r\n                    }\r\n                }\r\n                //doesn't exist\r\n                if(count == 0)\r\n                    this.final_dispatcher_list.push(dd[i])\r\n            }\r\n\r\n            //push assigned dispatchers\r\n            for(let i = 0; i < lenSd; i++){\r\n                for(let j = 0; j < lenLd; j++){\r\n                    //exists\r\n                    if(sd[i] == ld[j].id)\r\n                        this.final_dispatcher_list.push(ld[j])\r\n                }\r\n            }\r\n\r\n            this.dialogTableVisible = false\r\n            this.showFinalList = true\r\n        },\r\n        confirm(){\r\n            this.showFinalList = false\r\n            let obj = {\r\n                // id: id.id,\r\n                assign_ids  : this.selected_dispatcher_ids,\r\n                unassign_ids: this.unassign_dispatcher_ids,\r\n                identerprise: this.identerprise\r\n            };\r\n            this.$store.dispatch(action.MULTI_TO_ENTERPRISE, obj);\r\n        },\r\n        cancel(){\r\n            this.showFinalList = false\r\n        },\r\n        renderDialog(){\r\n            this.dialogTableVisible = true\r\n            if(this.firstLoad){\r\n                this.selected_dispatcher_ids = []\r\n                this.unassign_dispatcher_ids = []\r\n                this.$store.commit(mutation.BUTTON_STATUS, true)\r\n                setTimeout(\r\n                    () => {\r\n                        this.$refs.tableRef.clearSelection()\r\n                        this.default_dispatchers.forEach((element) => {\r\n                            this.$refs.tableRef.toggleRowSelection(element)\r\n                        })\r\n                        this.firstLoad = false\r\n                        this.$store.commit(mutation.BUTTON_STATUS, false)\r\n                        // console.log(this.selected_dispatcher_ids)\r\n                    }, \r\n                    1000\r\n                )\r\n            }\r\n        },\r\n        async handlePageChange(page) {\r\n            this.currentPage = page;\r\n            let obj = {\r\n                role: 4,\r\n                page: this.currentPage\r\n            };\r\n            this.$store.commit(mutation.BUTTON_STATUS, true)\r\n            await this.$store.dispatch(action.LIST_DISPATCHER_ROLE, obj);\r\n        },\r\n        indexMethod(index) {\r\n            return index + 1;\r\n        },\r\n        async buttonSearch() {\r\n            this.buttonSearchPress = true\r\n\r\n            this.$store.commit(mutation.BUTTON_STATUS, true);\r\n            await this.$store.dispatch(action.MULTI_DISPATCHER_AVAILABLE, this.form)\r\n\r\n            let ld = this.listData\r\n            let sd = []\r\n            this.default_dispatchers.forEach((element) => {\r\n                sd.push(element.id)\r\n            })\r\n            this.selected_dispatcher_ids.forEach((element) => {\r\n                sd.push(element)\r\n            })\r\n            let lenLd = ld.length\r\n            let lenSd = sd.length\r\n\r\n            //check the box of selected dispatchers\r\n            for(let i = 0; i < lenLd; i++){\r\n                for(let j = 0; j < lenSd; j++){\r\n                    if(ld[i].id == sd[j]){\r\n                        this.$refs.tableRef.toggleRowSelection(ld[i])\r\n                    }\r\n                }\r\n            }\r\n            this.buttonSearchPress = false\r\n        },\r\n        handleSelectionChange(val) {\r\n            if(this.firstLoad)\r\n                return\r\n            \r\n            if(this.buttonSearchPress)\r\n                return\r\n                \r\n            var count\r\n            this.selected_dispatcher_ids = []\r\n            this.unassign_dispatcher_ids = []\r\n\r\n            let s = val\r\n            let d = this.default_dispatchers\r\n            let lenS = s.length\r\n            let lenD = d.length\r\n\r\n            //newly added dispatchers\r\n            for(let i = 0; i < lenS; i++){\r\n                count = 0\r\n                for(let j = 0; j < lenD; j++){\r\n                    if(s[i].id == d[j].id)\r\n                        count++\r\n                }\r\n                if(count == 0)\r\n                    this.selected_dispatcher_ids.push(s[i].id)\r\n            }\r\n\r\n            //removed dispatchers\r\n            for(let j = 0; j < lenD; j++){\r\n                count = 0\r\n                for(let i = 0; i < lenS; i++){\r\n                    if(s[i].id == d[j].id)\r\n                        count++\r\n                }\r\n                if(count == 0)\r\n                    this.unassign_dispatcher_ids.push(d[j].id)\r\n            }\r\n\r\n            if(this.selected_dispatcher_ids.length != 0 || this.unassign_dispatcher_ids.length != 0 ){\r\n                this.applyDisabled = false\r\n            } else {\r\n                this.applyDisabled = true\r\n            }\r\n        }\r\n    },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.table-box {\r\n    overflow: auto;\r\n}\r\n\r\n.el-pagination {\r\n    padding-top: 20px;\r\n}\r\n\r\n.card-base {\r\n    padding: 20px;\r\n}\r\n\r\n.el-row {\r\n    padding: 0px 10px;\r\n\r\n    &:last-child {\r\n        margin-bottom: 0;\r\n    }\r\n}\r\n\r\n.el-col {\r\n    border-radius: 5px;\r\n}\r\n\r\n.image {\r\n    max-width: 100%;\r\n    height: 150px;\r\n    display: block;\r\n}\r\n\r\n.vl {\r\n    border-left: 3px solid #f2f2f2;\r\n    height: 90%;\r\n    position: absolute;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n}\r\n\r\n.avatar {\r\n    border-radius: 50%;\r\n    max-width: 80px;\r\n    height: 80px;\r\n    border: 1px solid #fff;\r\n    box-sizing: border-box;\r\n    display: block;\r\n    box-shadow: 0 2px 5px 0 rgba(49, 49, 93, 0.1),\r\n        0 1px 2px 0 rgba(0, 0, 0, 0.08);\r\n    transition: box-shadow 0.5s;\r\n}\r\n\r\n.left {\r\n    text-align: left;\r\n    position: absolute;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n}\r\n\r\n.middle {\r\n    margin-top: -30px\r\n}\r\n\r\n.drive-acount {\r\n    height: 39px;\r\n    margin-top: -11px;\r\n    margin-bottom: -10px;\r\n}\r\n\r\n.hoverhand:hover {\r\n    cursor: pointer;\r\n}\r\n</style>\r\n"]}]}