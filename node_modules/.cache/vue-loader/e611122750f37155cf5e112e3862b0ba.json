{"remainingRequest":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\src\\views\\pages\\inspector\\pic-task-list-page.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\src\\views\\pages\\inspector\\pic-task-list-page.vue","mtime":1647032353994},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\babel-loader\\lib\\index.js","mtime":1646338474621},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport router from '../../../router'\nimport { mapGetters, mapMutations } from 'vuex'\nimport * as getter from '../../../store/getters-types'\nimport * as action from '../../../store/action-types'\nimport * as mutation from '../../../store/mutation-types'\nimport Swal from 'sweetalert2'\n\nexport default {\n    name: 'Table',\n    data() {\n        return {\n            currentPage: 1,\n            input:'',\n            affixEnabled: true,\n            indexT: 1\n\n        }\n    },\n    computed: {\n        ...mapGetters({\n            listData : getter.GET_PICTASK_LIST,\n            paginate : getter.GET_PICTASK_PAGINATE,\n            identer  : getter.GET_ID_ENTERPRISE,\n            loading  : getter.GET_LOADING\n        }),\n        paginat(){\n            return this.paginate\n        },\n        indexTam(){\n            return this.indexT\n        }\n    },\n   async created(){\n        let obj = {\n            currentP        : 1,\n            identerpriseS   : this.identer\n        };\n        await this.$store.dispatch(action.PICTASK_LIST, obj)\n    },\n    methods: {\n        ...mapMutations({\n            setIdEnt : mutation.SET_ID_ENTERPRISE,\n            idInspec : mutation.SET_ID_INSPECTOR\n        }),\n\n        newCorp()   {\n            this.$router.push('/new-pic')\n            this.$store.commit(mutation.SET_ID_ENTERPRISE, this.identer)\n        },\n        handlePageChange(page) {\n            this.currentPage = page\n            let obj = {\n                currentP        : this.currentPage,\n                identerpriseS   : this.identer\n            }\n            this.$store.dispatch( action.PICTASK_LIST, obj)\n        },\n        search(){\n        },\n        delButton(e){\n            let obj = {\n                idList: e,\n                currPage: this.currentPage,\n                identer : this.identer\n            }\n            Swal.fire({\n                title: 'Are you sure?',\n                text: \"You won't be able to revert this!\",\n                type: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#3085d6',\n                cancelButtonColor: '#d33',\n                confirmButtonText: 'Yes, delete it!'\n            }).then((result) => {\n                if (result.value) {\n                    this.$store.dispatch(action.DELETE_INSPECTOR, obj)\n                    // router.push('/pic-task-list')\n                    // this.$store.dispatch(action.PICTASK_LIST, this.currentPage)\n\n                }\n            })\n        },\n        indexMethod(index) {\n            return index + this.paginat.fromP;\n        },\n        async handleEdit(e){\n            await this.setIdEnt(this.identer)\n            await this.idInspec(e)\n            this.$router.push('/edit-inspector')\n        },\n        onBackButton() {\n            router.push(`/detail-enterprise/${this.identer}`)\n        }\n    }\n}\n",{"version":3,"sources":["pic-task-list-page.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoFA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"pic-task-list-page.vue","sourceRoot":"src/views/pages/inspector","sourcesContent":["<template>\r\n    <div class=\"page-table scrollable only-y\" id=\"affix-container\">\r\n        <div class=\"card-base card-shadow--medium bg-white\">\r\n            <el-row :gutter=\"20\">\r\n                <el-col :span=\"16\">\r\n                    <el-button\r\n                            @click=\"onBackButton\"\r\n                    >\r\n                        Back\r\n                    </el-button>\r\n                    <el-button\r\n                            @click=\"newCorp\"\r\n                            type=\"primary\">\r\n                        New Pic\r\n                    </el-button>\r\n                </el-col>\r\n                <el-col :span=\"8\">\r\n                    <el-input placeholder=\"Search\" v-model=\"input\" @change=\"search\">\r\n                    </el-input>\r\n                </el-col>\r\n            </el-row>\r\n\r\n            <el-row>\r\n                <el-col :span=\"24\">\r\n                    <el-table\r\n                            v-loading=\"loading\"\r\n                            :data=\"listData\"\r\n                            stripe\r\n                            style=\"width: 100%\">\r\n                        <el-table-column\r\n                                type=\"index\"\r\n                                label=\"No\"\r\n                                :index=\"indexMethod\"\r\n                                width=\"80\">\r\n                        </el-table-column>\r\n                        <el-table-column\r\n                                prop=\"name\"\r\n                                label=\"PIC Name\">\r\n                        </el-table-column>\r\n                        <el-table-column\r\n                                prop=\"phonenumber\"\r\n                                label=\"PIC Mobile Phone\">\r\n                        </el-table-column>\r\n                        <el-table-column\r\n                                fixed=\"right\"\r\n                                width=\"120\">\r\n                            <template slot-scope=\"scope\">\r\n                                <el-button\r\n                                        type=\"danger\"\r\n                                        icon=\"el-icon-delete\"\r\n                                        size=\"mini\"\r\n                                        @click=\"delButton(scope.row.idinspector)\"\r\n                                        style=\"margin-top: 10px;\">\r\n                                </el-button>\r\n                                <el-button\r\n                                        type=\"success\"\r\n                                        icon=\"el-icon-edit\"\r\n                                        @click=\"handleEdit(scope.row.idinspector)\"\r\n                                        size=\"mini\"></el-button>\r\n                            </template>\r\n                        </el-table-column>\r\n                    </el-table>\r\n                </el-col>\r\n            </el-row>\r\n\r\n            <el-row>\r\n                <el-col :span=\"24\">\r\n                    <div class=\"grid-content\">\r\n                        <el-pagination\r\n                                background\r\n                                layout=\"prev, pager, next\"\r\n                                @current-change=\"handlePageChange\"\r\n                                :total=\"paginat.totalP\">\r\n\r\n                        </el-pagination>\r\n                    </div>\r\n                </el-col>\r\n            </el-row>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n\r\n    import router from '../../../router'\r\n    import { mapGetters, mapMutations } from 'vuex'\r\n    import * as getter from '../../../store/getters-types'\r\n    import * as action from '../../../store/action-types'\r\n    import * as mutation from '../../../store/mutation-types'\r\n    import Swal from 'sweetalert2'\r\n\r\n    export default {\r\n        name: 'Table',\r\n        data() {\r\n            return {\r\n                currentPage: 1,\r\n                input:'',\r\n                affixEnabled: true,\r\n                indexT: 1\r\n\r\n            }\r\n        },\r\n        computed: {\r\n            ...mapGetters({\r\n                listData : getter.GET_PICTASK_LIST,\r\n                paginate : getter.GET_PICTASK_PAGINATE,\r\n                identer  : getter.GET_ID_ENTERPRISE,\r\n                loading  : getter.GET_LOADING\r\n            }),\r\n            paginat(){\r\n                return this.paginate\r\n            },\r\n            indexTam(){\r\n                return this.indexT\r\n            }\r\n        },\r\n       async created(){\r\n            let obj = {\r\n                currentP        : 1,\r\n                identerpriseS   : this.identer\r\n            };\r\n            await this.$store.dispatch(action.PICTASK_LIST, obj)\r\n        },\r\n        methods: {\r\n            ...mapMutations({\r\n                setIdEnt : mutation.SET_ID_ENTERPRISE,\r\n                idInspec : mutation.SET_ID_INSPECTOR\r\n            }),\r\n\r\n            newCorp()   {\r\n                this.$router.push('/new-pic')\r\n                this.$store.commit(mutation.SET_ID_ENTERPRISE, this.identer)\r\n            },\r\n            handlePageChange(page) {\r\n                this.currentPage = page\r\n                let obj = {\r\n                    currentP        : this.currentPage,\r\n                    identerpriseS   : this.identer\r\n                }\r\n                this.$store.dispatch( action.PICTASK_LIST, obj)\r\n            },\r\n            search(){\r\n            },\r\n            delButton(e){\r\n                let obj = {\r\n                    idList: e,\r\n                    currPage: this.currentPage,\r\n                    identer : this.identer\r\n                }\r\n                Swal.fire({\r\n                    title: 'Are you sure?',\r\n                    text: \"You won't be able to revert this!\",\r\n                    type: 'warning',\r\n                    showCancelButton: true,\r\n                    confirmButtonColor: '#3085d6',\r\n                    cancelButtonColor: '#d33',\r\n                    confirmButtonText: 'Yes, delete it!'\r\n                }).then((result) => {\r\n                    if (result.value) {\r\n                        this.$store.dispatch(action.DELETE_INSPECTOR, obj)\r\n                        // router.push('/pic-task-list')\r\n                        // this.$store.dispatch(action.PICTASK_LIST, this.currentPage)\r\n\r\n                    }\r\n                })\r\n            },\r\n            indexMethod(index) {\r\n                return index + this.paginat.fromP;\r\n            },\r\n            async handleEdit(e){\r\n                await this.setIdEnt(this.identer)\r\n                await this.idInspec(e)\r\n                this.$router.push('/edit-inspector')\r\n            },\r\n            onBackButton() {\r\n                router.push(`/detail-enterprise/${this.identer}`)\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n    @import '../../../assets/scss/variables';\r\n\r\n    .table-box {\r\n        overflow: auto;\r\n    }\r\n    .el-pagination {\r\n        padding-top: 20px;\r\n    }\r\n    .el-input {\r\n        width: 300px !important;\r\n    }\r\n    .card-base {\r\n        padding: 20px;\r\n    }\r\n    .el-row {\r\n        padding: 0px 10px;\r\n        &:last-child {\r\n            margin-bottom: 0;\r\n        }\r\n    }\r\n    .el-col {\r\n        border-radius: 5px;\r\n    }\r\n</style>\r\n\r\n"]}]}