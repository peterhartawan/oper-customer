{"remainingRequest":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/src/views/pages/enterprise/location-enterprise.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/src/views/pages/enterprise/location-enterprise.vue","mtime":1628175042625},{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport router from \"../../../router\";\n\nimport Affix from \"@/components/Affix\";\nimport {\n    mapGetters,\n    mapActions\n} from \"vuex\";\nimport * as mutation from '../../../store/mutation-types';\nimport * as getter from \"../../../store/getters-types\";\nimport * as action from \"../../../store/action-types\";\nimport Swal from \"sweetalert2\";\n\nexport default {\n    name: \"ListDriver\",\n    data() {\n        return {\n            visible2: false,\n            mapMark: null,\n            affixEnabled: true,\n            resultTrack: null,\n            image_url: null,\n            info_marker: null,\n            markers: [],\n            infowindow: {\n                lat: 0,\n                lng: 0,\n                name: null,\n            },\n            markDefault: {\n                lat: -6.21462,\n                lng: 106.84513\n            },\n            indexT: 1,\n            idplaces: \"\",\n            payload: {\n                idplaces: null,\n                identerprise: null,\n                page: 1,\n            },\n            tableData: null,\n            input4: null,\n            place: null,\n        };\n    },\n    components: {\n        Affix\n    },\n    computed: {\n        ...mapGetters({\n            listData: getter.GET_LIST_LOCATION,\n            paginate: getter.GET_PAGINATE_LOCATION,\n            enterprise: getter.ENTERPRISE,\n            total: getter.GET_LOCATION_TOTAL\n        }),\n        paginator() {\n            return this.paginate;\n        },\n        indexTam() {\n            return this.indexT;\n        },\n        forTotal() {\n            if (this.listData) {\n                return this.total;\n            }\n        }\n    },\n\n    methods: {\n        openWindow(position) {\n            this.window_open = true\n            this.infowindow.lat = position.lat;\n            this.infowindow.lng = position.lng;\n            this.infowindow.name = position.name;\n        },\n        async searchChange(v) {\n            let trimName = this.input4.trim()\n            if (trimName.length > 0) {\n                this.$store.commit(mutation.BUTTON_STATUS, true);\n                await this.$store.dispatch(action.LIST_LOCATION, {\n                    page: 1,\n                    q: trimName,\n                    identerprise: this.enterprise.identerprise\n                });\n                await this.listData\n                this.markers = [];\n                for (var i = 0; i < this.listData.length; i++) {\n                    const marker = {\n                        lat: parseFloat(this.listData[i].latitude),\n                        lng: parseFloat(this.listData[i].longitude),\n                        name: this.listData[i].name + ', ' + this.listData[i].address,\n                        popover: false,\n                        id: this.listData[i].idplaces,\n                    };\n                    this.markDefault.lat = parseFloat(this.listData[i].latitude)\n                    this.markDefault.lng = parseFloat(this.listData[i].longitude)\n                    this.markers.push({\n                        position: marker\n                    });\n                    this.mapMark = 1;\n                }\n            } else {\n                this.$store.commit(mutation.BUTTON_STATUS, true);\n                await this.$store.dispatch(action.LIST_LOCATION, {\n                    page: 1,\n                    q: trimName,\n                    identerprise: this.enterprise.identerprise\n                });\n                await this.listData\n                this.markers = [];\n                for (var i = 0; i < this.listData.length; i++) {\n                    const marker = {\n                        lat: parseFloat(this.listData[i].latitude),\n                        lng: parseFloat(this.listData[i].longitude),\n                        name: this.listData[i].name + ', ' + this.listData[i].address,\n                        popover: false,\n                        id: this.listData[i].idplaces,\n                    };\n                    this.markDefault.lat = parseFloat(this.listData[i].latitude)\n                    this.markDefault.lng = parseFloat(this.listData[i].longitude)\n                    this.markers.push({\n                        position: marker\n                    });\n                    this.mapMark = 1;\n                }\n            }\n        },\n        async handlePageChange(page) {\n            this.markers = [];\n            this.payload.page = page;\n            await this.$store.dispatch(action.LIST_LOCATION, {\n                page: page,\n                q: this.input4,\n                identerprise: this.enterprise.identerprise\n            });\n            for (var i = 0; i < this.listData.length; i++) {\n                const marker = {\n                    lat: parseFloat(this.listData[i].latitude),\n                    lng: parseFloat(this.listData[i].longitude),\n                    name: this.listData[i].name + ', ' + this.listData[i].address,\n                    popover: false,\n                    id: this.listData[i].idplaces,\n                };\n                this.markDefault.lat = parseFloat(this.listData[i].latitude)\n                this.markDefault.lng = parseFloat(this.listData[i].longitude)\n                this.markers.push({\n                    position: marker\n                });\n                this.mapMark = 1;\n            }\n        },\n\n        Create() {\n            this.$store.commit(mutation.BUTTON_STATUS, false)\n            this.$router.push({\n                name: \"NewLocation\"\n            });\n        },\n        clearMarkers() {\n            this.markers = [];\n        },\n        async getId(id) {\n            await this.clearMarkers();\n            const marker = {\n                lat: parseFloat(id.latitude),\n                lng: parseFloat(id.longitude),\n                name: id.name + ', ' + id.address,\n                popover: false,\n\n            }\n            this.markDefault.lat = parseFloat(id.latitude)\n            this.markDefault.lng = parseFloat(id.longitude)\n            this.markers.push({\n                position: marker\n            });\n            this.mapMark = 1;\n\n        },\n        Cancel() {\n            this.$store.dispatch(action.DATA_ID_CORP, this.enterprise.identerprise);\n            this.$router.replace({\n                path: \"/detail-enterprise/\" + this.enterprise.identerprise\n            });\n        },\n        Edit(e) {\n            this.$store.commit(mutation.BUTTON_STATUS, false)\n            this.$store.dispatch(action.DETAIL_LOCATION, e.idplaces);\n        },\n        Delete(e) {\n            Swal.fire({\n                title: \"Are you sure?\",\n                text: \"You won't be able to revert this!\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonColor: \"#3085d6\",\n                cancelButtonColor: \"#d33\",\n                confirmButtonText: \"Yes, delete it!\"\n            }).then(result => {\n                if (result.value) {\n                    this.$store.dispatch(action.DELETE_LOCATION, e);\n                }\n            });\n        }\n    },\n    async created() {\n        this.payload.identerprise = await this.enterprise.identerprise\n        await this.$store.dispatch(action.LIST_LOCATION, this.payload);\n        await this.listData\n        this.markers = [];\n        for (var i = 0; i < this.listData.length; i++) {\n            const marker = {\n                lat: parseFloat(this.listData[i].latitude),\n                lng: parseFloat(this.listData[i].longitude),\n                name: this.listData[i].name + ', ' + this.listData[i].address,\n                popover: false,\n                id: this.listData[i].idplaces,\n            };\n            this.markDefault.lat = parseFloat(this.listData[i].latitude)\n            this.markDefault.lng = parseFloat(this.listData[i].longitude)\n            this.markers.push({\n                position: marker\n            });\n            this.mapMark = 1;\n        }\n    }\n};\n",{"version":3,"sources":["location-enterprise.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"location-enterprise.vue","sourceRoot":"src/views/pages/enterprise","sourcesContent":["<template>\n<div class=\"page-table scrollable only-y\" id=\"affix-container\">\n    <p class=\"font-weight-600 mt-40\">LOCATION</p>\n    <div class=\"card-base card-shadow--medium bg-white\">\n        <!-- <el-row :gutter=\"10\">\n            <el-col :span=\"4\" :xl=\"1\">\n                <el-button @click=\"Create()\" style=\"width: 100%\" type=\"primary\">New Location</el-button>\n            </el-col>\n        </el-row> -->\n        <el-row :gutter=\"10\">\n            <el-col :span=\"14\">\n                <gmap-map :center=\"markDefault\" :zoom=\"16\" map-type-id=\"terrain\" style=\"width: 100%; height: 490px\">\n                    <div v-if=\"mapMark\">\n                        <gmap-marker :key=\"index\" v-for=\"(m, index) in markers\" :position=\"m.position\" :clickable=\"true\" @click=\"openWindow(m.position)\"></gmap-marker>\n                        <gmap-info-window v-if=\"infowindow.name\" @closeclick=\"window_open=false\" :opened=\"window_open\" :position=\"infowindow\" :options=\"{ pixelOffset: { width: 0, height: -35},}\">\n                            {{infowindow.name}}\n                        </gmap-info-window>\n                    </div>\n                </gmap-map>\n            </el-col>\n            <el-col :span=\"9\">\n                <el-row style=\"margin-top: 10px\">\n                    <el-col :span=\"4\">\n                        <el-button @click=\"Cancel()\" size=\"mini\" type=\"info\">Back</el-button>\n                    </el-col>\n                    <el-col :offset=\"1\" :span=\"15\">\n                        <el-input placeholder=\"Search\" @keyup.native=\"searchChange\" v-model=\"input4\">\n                            <i slot=\"suffix\" class=\"el-input__icon el-icon-search\"></i>\n                        </el-input>\n                    </el-col>\n                    <el-col :offset=\"1\" :span=\"1\">\n                        <el-button @click=\"Create()\" style=\"text-align: center; background-color: #D50000;\" type=\"danger\"><i class=\"mdi mdi-plus\"></i></el-button>\n                    </el-col>\n                </el-row>\n                <el-row>\n                    <div class=\"contacts-list box grow scrollable only-y\">\n                        <div v-for=\"c in listData\" :key=\"c.id\" class=\"flex contact\" @click=\"getId(c)\">\n\n                            <div class=\"info box grow flex\">\n                                <div class=\"name box grow flex column justify-center p-10\">\n\n                                    <!-- <i class=\"mdi mdi-tooltip-edit mdi-36px;\"></i>\n                                    <br>\n                                    <i class=\"mdi mdi-delete mdi-24px\"></i> -->\n\n                                    <strong><i style=\"color: #D50000\" class=\"mdi mdi-map-marker-outline mdi-24px\"></i>&nbsp;{{c.name}} </strong>\n                                    <div class=\"phone fs-14 secondary-text\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{c.address}}</div>\n                                    <el-row :gutter=\"20\">\n                                        <el-col :offset=\"18\" :span=\"3\">\n                                            <i @click=\"Edit(c)\" class=\"mdi mdi-tooltip-edit mdi-24px\"></i>\n                                        </el-col>\n                                        <el-col :span=\"3\">\n                                            <i @click=\"Delete(c)\" class=\"mdi mdi-delete mdi-24px\"></i>\n                                        </el-col>\n                                    </el-row>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </el-row>\n                <div align=\"center\" class=\"grid-content\">\n                    <el-pagination background layout=\"prev, pager, next\" @current-change=\"handlePageChange\" :total=\"forTotal\"></el-pagination>\n                </div>\n            </el-col>\n        </el-row>\n\n    </div>\n</div>\n</template>\n\n<script>\nimport router from \"../../../router\";\n\nimport Affix from \"@/components/Affix\";\nimport {\n    mapGetters,\n    mapActions\n} from \"vuex\";\nimport * as mutation from '../../../store/mutation-types';\nimport * as getter from \"../../../store/getters-types\";\nimport * as action from \"../../../store/action-types\";\nimport Swal from \"sweetalert2\";\n\nexport default {\n    name: \"ListDriver\",\n    data() {\n        return {\n            visible2: false,\n            mapMark: null,\n            affixEnabled: true,\n            resultTrack: null,\n            image_url: null,\n            info_marker: null,\n            markers: [],\n            infowindow: {\n                lat: 0,\n                lng: 0,\n                name: null,\n            },\n            markDefault: {\n                lat: -6.21462,\n                lng: 106.84513\n            },\n            indexT: 1,\n            idplaces: \"\",\n            payload: {\n                idplaces: null,\n                identerprise: null,\n                page: 1,\n            },\n            tableData: null,\n            input4: null,\n            place: null,\n        };\n    },\n    components: {\n        Affix\n    },\n    computed: {\n        ...mapGetters({\n            listData: getter.GET_LIST_LOCATION,\n            paginate: getter.GET_PAGINATE_LOCATION,\n            enterprise: getter.ENTERPRISE,\n            total: getter.GET_LOCATION_TOTAL\n        }),\n        paginator() {\n            return this.paginate;\n        },\n        indexTam() {\n            return this.indexT;\n        },\n        forTotal() {\n            if (this.listData) {\n                return this.total;\n            }\n        }\n    },\n\n    methods: {\n        openWindow(position) {\n            this.window_open = true\n            this.infowindow.lat = position.lat;\n            this.infowindow.lng = position.lng;\n            this.infowindow.name = position.name;\n        },\n        async searchChange(v) {\n            let trimName = this.input4.trim()\n            if (trimName.length > 0) {\n                this.$store.commit(mutation.BUTTON_STATUS, true);\n                await this.$store.dispatch(action.LIST_LOCATION, {\n                    page: 1,\n                    q: trimName,\n                    identerprise: this.enterprise.identerprise\n                });\n                await this.listData\n                this.markers = [];\n                for (var i = 0; i < this.listData.length; i++) {\n                    const marker = {\n                        lat: parseFloat(this.listData[i].latitude),\n                        lng: parseFloat(this.listData[i].longitude),\n                        name: this.listData[i].name + ', ' + this.listData[i].address,\n                        popover: false,\n                        id: this.listData[i].idplaces,\n                    };\n                    this.markDefault.lat = parseFloat(this.listData[i].latitude)\n                    this.markDefault.lng = parseFloat(this.listData[i].longitude)\n                    this.markers.push({\n                        position: marker\n                    });\n                    this.mapMark = 1;\n                }\n            } else {\n                this.$store.commit(mutation.BUTTON_STATUS, true);\n                await this.$store.dispatch(action.LIST_LOCATION, {\n                    page: 1,\n                    q: trimName,\n                    identerprise: this.enterprise.identerprise\n                });\n                await this.listData\n                this.markers = [];\n                for (var i = 0; i < this.listData.length; i++) {\n                    const marker = {\n                        lat: parseFloat(this.listData[i].latitude),\n                        lng: parseFloat(this.listData[i].longitude),\n                        name: this.listData[i].name + ', ' + this.listData[i].address,\n                        popover: false,\n                        id: this.listData[i].idplaces,\n                    };\n                    this.markDefault.lat = parseFloat(this.listData[i].latitude)\n                    this.markDefault.lng = parseFloat(this.listData[i].longitude)\n                    this.markers.push({\n                        position: marker\n                    });\n                    this.mapMark = 1;\n                }\n            }\n        },\n        async handlePageChange(page) {\n            this.markers = [];\n            this.payload.page = page;\n            await this.$store.dispatch(action.LIST_LOCATION, {\n                page: page,\n                q: this.input4,\n                identerprise: this.enterprise.identerprise\n            });\n            for (var i = 0; i < this.listData.length; i++) {\n                const marker = {\n                    lat: parseFloat(this.listData[i].latitude),\n                    lng: parseFloat(this.listData[i].longitude),\n                    name: this.listData[i].name + ', ' + this.listData[i].address,\n                    popover: false,\n                    id: this.listData[i].idplaces,\n                };\n                this.markDefault.lat = parseFloat(this.listData[i].latitude)\n                this.markDefault.lng = parseFloat(this.listData[i].longitude)\n                this.markers.push({\n                    position: marker\n                });\n                this.mapMark = 1;\n            }\n        },\n\n        Create() {\n            this.$store.commit(mutation.BUTTON_STATUS, false)\n            this.$router.push({\n                name: \"NewLocation\"\n            });\n        },\n        clearMarkers() {\n            this.markers = [];\n        },\n        async getId(id) {\n            await this.clearMarkers();\n            const marker = {\n                lat: parseFloat(id.latitude),\n                lng: parseFloat(id.longitude),\n                name: id.name + ', ' + id.address,\n                popover: false,\n\n            }\n            this.markDefault.lat = parseFloat(id.latitude)\n            this.markDefault.lng = parseFloat(id.longitude)\n            this.markers.push({\n                position: marker\n            });\n            this.mapMark = 1;\n\n        },\n        Cancel() {\n            this.$store.dispatch(action.DATA_ID_CORP, this.enterprise.identerprise);\n            this.$router.replace({\n                path: \"/detail-enterprise/\" + this.enterprise.identerprise\n            });\n        },\n        Edit(e) {\n            this.$store.commit(mutation.BUTTON_STATUS, false)\n            this.$store.dispatch(action.DETAIL_LOCATION, e.idplaces);\n        },\n        Delete(e) {\n            Swal.fire({\n                title: \"Are you sure?\",\n                text: \"You won't be able to revert this!\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonColor: \"#3085d6\",\n                cancelButtonColor: \"#d33\",\n                confirmButtonText: \"Yes, delete it!\"\n            }).then(result => {\n                if (result.value) {\n                    this.$store.dispatch(action.DELETE_LOCATION, e);\n                }\n            });\n        }\n    },\n    async created() {\n        this.payload.identerprise = await this.enterprise.identerprise\n        await this.$store.dispatch(action.LIST_LOCATION, this.payload);\n        await this.listData\n        this.markers = [];\n        for (var i = 0; i < this.listData.length; i++) {\n            const marker = {\n                lat: parseFloat(this.listData[i].latitude),\n                lng: parseFloat(this.listData[i].longitude),\n                name: this.listData[i].name + ', ' + this.listData[i].address,\n                popover: false,\n                id: this.listData[i].idplaces,\n            };\n            this.markDefault.lat = parseFloat(this.listData[i].latitude)\n            this.markDefault.lng = parseFloat(this.listData[i].longitude)\n            this.markers.push({\n                position: marker\n            });\n            this.mapMark = 1;\n        }\n    }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../../../assets/scss/_variables\";\n\n.text-p {\n    display: block;\n    color: white;\n    font-weight: 600;\n}\n\n.plus-bg {\n    background-color: #a31424;\n    height: 139px;\n\n}\n\n.avatar {\n    img {\n        border: 1px solid transparentize($text-color, .9);\n        box-sizing: border-box;\n        width: 60px;\n        height: 60px;\n        border-radius: 50%;\n        transition: all .5s .25s;\n    }\n}\n\n.avatar2 {\n    img {\n        border: 1px solid transparentize($text-color, .9);\n        box-sizing: border-box;\n        width: 120px;\n        height: 120px;\n        border-radius: 50%;\n        transition: all .5s .25s;\n    }\n}\n\n.name-of {\n    margin-bottom: 10px;\n    color: #a31424;\n}\n\n.contacts-list {\n    //margin: 0 auto;\n    height: 400px;\n    width: 108%;\n    max-width: 965px;\n    padding: 0px 30px;\n    box-sizing: border-box;\n\n    .contact {\n        margin: 10px 0;\n        padding: 5px;\n        box-sizing: border-box;\n        cursor: pointer;\n\n    }\n}\n\n.small-edit {\n    width: 90px;\n}\n\n/*.card-base {*/\n/*padding: 20px;*/\n/*}*/\n\n/*.el-row {*/\n/*// display: flex;*/\n/*// align-items: center;*/\n/*// justify-content: center;*/\n/*padding: 0px 10px;*/\n/*margin-bottom: 20px;*/\n\n/*&:last-child {*/\n/*margin-bottom: 0;*/\n/*}*/\n/*}*/\n\n/*.el-col {*/\n/*border-radius: 5px;*/\n/*}*/\n\n/*.el-select {*/\n/*width: 100%;*/\n/*}*/\n</style>\n"]}]}