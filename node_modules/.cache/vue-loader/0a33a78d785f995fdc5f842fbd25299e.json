{"remainingRequest":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-frontend/src/views/pages/driver/detail-driver.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-frontend/src/views/pages/driver/detail-driver.vue","mtime":1628175042620},{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-frontend/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport router from \"../../../router\";\nimport moment from \"moment\";\nimport Affix from \"@/components/Affix\";\nimport {\n    mapGetters,\n    mapActions\n} from \"vuex\";\nimport * as getter from \"../../../store/getters-types\";\nimport * as action from \"../../../store/action-types\";\nimport * as mutation from '../../../store/mutation-types';\nimport Swal from \"sweetalert2\";\nexport default {\n    name: \"DetailDriver\",\n    data() {\n        return {\n            payload: {\n                reason_suspend: \"\",\n                users_id: null,\n                iddriver: \"\",\n\n            },\n            alt: require(\"@/assets/images/avatar-2.jpg\")\n        };\n    },\n    methods: {\n        Back() {\n            router.replace(\"/driver\");\n        },\n        imgAlt(event) {\n            event.target.src = this.alt;\n        },\n        resendPIN() {\n            let obj = {\n                pin_type: '/driver/resend-pin',\n                id: this.driver.users_id\n            };\n            this.$store.commit(mutation.SET_RESEND_PIN_BUTTON, true);\n            this.$store.dispatch(action.RESEND_PIN, obj)\n        },\n        editDriver() {\n            this.$store.commit(mutation.BUTTON_STATUS, false)\n            this.$store.dispatch(action.EDIT_DRIVER, this.driver.users_id);\n        },\n        deleteButton() {\n            Swal.fire({\n                title: \"Are you sure?\",\n                text: \"You won't be able to revert this!\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonColor: \"#3085d6\",\n                cancelButtonColor: \"#d33\",\n                confirmButtonText: \"Yes, delete it!\"\n            }).then(result => {\n                if (result.value) {\n                    this.$store.commit(mutation.BUTTON_STATUS, true)\n                    this.$store.dispatch(action.DELETE_DRIVER, this.driver.users_id);\n                }\n            });\n        },\n        activeButton() {\n            Swal.fire({\n                title: \"Are you sure?\",\n                text: \"You won't be able to revert this!\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonColor: \"#3085d6\",\n                cancelButtonColor: \"#d33\",\n                confirmButtonText: \"Yes, activate it!\"\n            }).then(result => {\n                if (result.value) {\n                    this.$store.commit(mutation.BUTTON_STATUS, true)\n                    this.$store.dispatch(action.ACTIVATE_DRIVER, this.driver.users_id);\n                }\n            });\n        },\n        async suspendButton() {\n            const {\n                value: reason\n            } = await Swal.fire({\n                title: 'Enter the reason of suspending',\n                input: 'text',\n                showCancelButton: true,\n                confirmButtonColor: '#3085d6',\n                cancelButtonColor: '#d33',\n                confirmButtonText: 'Yes, suspend it!',\n                inputValidator: (value) => {\n                    if (!value) {\n                        return 'You need to write something!'\n                    }\n                }\n            })\n            if (reason) {\n                this.$store.commit(mutation.BUTTON_STATUS, true)\n                this.payload.reason_suspend = reason;\n                this.payload.users_id = this.driver.users_id;\n                this.payload.iddriver = this.driver.iddriver;\n                this.$store.dispatch(action.SUSPEND_DRIVER, this.payload)\n            }\n        }\n    },\n    computed: {\n        ...mapGetters({\n            driver: getter.DRIVER,\n            button: getter.GET_BUTTON,\n            resendPinButton: getter.GET_BUTTON_RESEND_PIN\n\n        }),\n        profilepicture() {\n            if (this.driver.profile_picture == null) {\n                return this.alt\n            } else {\n                return this.driver.profile_picture\n            }\n        },\n        offsetSize() {\n            if (this.driver.is_first_login === 1) {\n                return 1\n            } else {\n                return 16\n            }\n        }\n    }\n};\n",{"version":3,"sources":["detail-driver.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"detail-driver.vue","sourceRoot":"src/views/pages/driver","sourcesContent":["<template>\n<div class=\"page-table scrollable only-y\" id=\"affix-container\">\n    <div class=\"card-base card-shadow--medium bg-white\">\n        <el-row :gutter=\"10\">\n            <el-col style=\"margin-top: 30px\" :lg=\"8\">\n                <div class=\"thumbnail\">\n                    <img class=\"potrait\" :src=\"profilepicture\" @error=\"imgAlt\">\n                </div>\n            </el-col>\n            <el-col :lg=\"8\">\n                <h3>Name</h3>\n                {{driver.name}}\n                <h3>Driver Birthdate</h3>\n                {{driver.birthdate}}\n                <h3>Driver Gender</h3>\n                <p v-if=\"driver.gender==1\">Male</p>\n                <p v-else>Female</p>\n                <h3>Driver Address</h3>\n                {{driver.address}}\n            </el-col>\n            <el-col :lg=\"8\">\n                <h3>Driver NIK</h3>\n                {{driver.nik}}\n                <h3>Driver Email</h3>\n                {{driver.email}}\n                <h3>Driver Phone Number</h3>\n                {{driver.phonenumber}}\n                <h3>Driver Type</h3>\n                <p v-if=\"driver.drivertype_iddrivertype==1\">PKWT</p>\n                <p v-else-if=\"driver.drivertype_iddrivertype==2\">PKWT BACKUP</p>\n                <p v-else>FREELANCE</p>\n            </el-col>\n        </el-row>\n        <el-row style=\"margin-top: 10px ;margin-bottom: 0px\" :gutter=\"10\">\n            <el-col :lg=\"3\">\n                <el-button @click=\"Back()\">Back</el-button>\n            </el-col>\n            <el-col :lg=\"4\">\n                <el-button @click=\"editDriver()\" type=\"primary\">Edit</el-button>\n            </el-col>\n            <div v-if=\"driver.status===1\">\n                <el-col :offset=\"13\" :lg=\"4\">\n                    <el-button :loading=\"button\" type=\"danger\" @click=\"suspendButton\">Suspend</el-button>\n                </el-col>\n            </div>\n            <div v-else-if=\"driver.status === 3\">\n                <el-col :offset=\"9\" :lg=\"4\">\n                    <el-button :loading=\"button\" @click=\"deleteButton\" type=\"danger\">Delete</el-button>\n                </el-col>\n                <el-col :lg=\"4\">\n                    <el-button :loading=\"button\" @click=\"activeButton\" type=\"success\">Active</el-button>\n                </el-col>\n            </div>\n        </el-row>\n        <div v-if=\"driver.is_first_login === 1\">\n             <el-button style=\"width: auto\" :loading=\"resendPinButton\" class=\"topright\" type=\"warning\" @click=\"resendPIN\">Resend PIN</el-button>\n        </div>\n    </div>\n</div>\n</template>\n\n<script>\nimport router from \"../../../router\";\nimport moment from \"moment\";\nimport Affix from \"@/components/Affix\";\nimport {\n    mapGetters,\n    mapActions\n} from \"vuex\";\nimport * as getter from \"../../../store/getters-types\";\nimport * as action from \"../../../store/action-types\";\nimport * as mutation from '../../../store/mutation-types';\nimport Swal from \"sweetalert2\";\nexport default {\n    name: \"DetailDriver\",\n    data() {\n        return {\n            payload: {\n                reason_suspend: \"\",\n                users_id: null,\n                iddriver: \"\",\n\n            },\n            alt: require(\"@/assets/images/avatar-2.jpg\")\n        };\n    },\n    methods: {\n        Back() {\n            router.replace(\"/driver\");\n        },\n        imgAlt(event) {\n            event.target.src = this.alt;\n        },\n        resendPIN() {\n            let obj = {\n                pin_type: '/driver/resend-pin',\n                id: this.driver.users_id\n            };\n            this.$store.commit(mutation.SET_RESEND_PIN_BUTTON, true);\n            this.$store.dispatch(action.RESEND_PIN, obj)\n        },\n        editDriver() {\n            this.$store.commit(mutation.BUTTON_STATUS, false)\n            this.$store.dispatch(action.EDIT_DRIVER, this.driver.users_id);\n        },\n        deleteButton() {\n            Swal.fire({\n                title: \"Are you sure?\",\n                text: \"You won't be able to revert this!\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonColor: \"#3085d6\",\n                cancelButtonColor: \"#d33\",\n                confirmButtonText: \"Yes, delete it!\"\n            }).then(result => {\n                if (result.value) {\n                    this.$store.commit(mutation.BUTTON_STATUS, true)\n                    this.$store.dispatch(action.DELETE_DRIVER, this.driver.users_id);\n                }\n            });\n        },\n        activeButton() {\n            Swal.fire({\n                title: \"Are you sure?\",\n                text: \"You won't be able to revert this!\",\n                type: \"warning\",\n                showCancelButton: true,\n                confirmButtonColor: \"#3085d6\",\n                cancelButtonColor: \"#d33\",\n                confirmButtonText: \"Yes, activate it!\"\n            }).then(result => {\n                if (result.value) {\n                    this.$store.commit(mutation.BUTTON_STATUS, true)\n                    this.$store.dispatch(action.ACTIVATE_DRIVER, this.driver.users_id);\n                }\n            });\n        },\n        async suspendButton() {\n            const {\n                value: reason\n            } = await Swal.fire({\n                title: 'Enter the reason of suspending',\n                input: 'text',\n                showCancelButton: true,\n                confirmButtonColor: '#3085d6',\n                cancelButtonColor: '#d33',\n                confirmButtonText: 'Yes, suspend it!',\n                inputValidator: (value) => {\n                    if (!value) {\n                        return 'You need to write something!'\n                    }\n                }\n            })\n            if (reason) {\n                this.$store.commit(mutation.BUTTON_STATUS, true)\n                this.payload.reason_suspend = reason;\n                this.payload.users_id = this.driver.users_id;\n                this.payload.iddriver = this.driver.iddriver;\n                this.$store.dispatch(action.SUSPEND_DRIVER, this.payload)\n            }\n        }\n    },\n    computed: {\n        ...mapGetters({\n            driver: getter.DRIVER,\n            button: getter.GET_BUTTON,\n            resendPinButton: getter.GET_BUTTON_RESEND_PIN\n\n        }),\n        profilepicture() {\n            if (this.driver.profile_picture == null) {\n                return this.alt\n            } else {\n                return this.driver.profile_picture\n            }\n        },\n        offsetSize() {\n            if (this.driver.is_first_login === 1) {\n                return 1\n            } else {\n                return 16\n            }\n        }\n    }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.card-base {\n    padding: 20px;\n}\n\n.el-button  {\n    width: 100%;\n}\n\n.el-row {\n    padding: 0px 10px;\n    margin-bottom: 20px;\n    margin-top: -20px;\n\n    &:last-child {\n        margin-bottom: 0;\n        margin-top: 0;\n    }\n}\n\n.el-col {\n    border-radius: 5px;\n}\n\n.el-select {\n    width: 100%;\n}\n\n.thumbnail {\n    border-radius: 8px;\n    position: relative;\n    width: 263px;\n    height: 300px;\n    overflow: hidden;\n}\n\n.thumbnail img {\n    border-radius: 8px;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    height: 100%;\n    width: auto;\n    -webkit-transform: translate(-50%, -50%);\n    -ms-transform: translate(-50%, -50%);\n    transform: translate(-50%, -50%);\n}\n\n.thumbnail img.portrait {\n    width: 100%;\n    height: auto;\n}\n\n.topright {\n    position: absolute;\n    top: 10px;\n    right: 60px;\n    font-size: 16px;\n}\n\n.disabled {\n    pointer-events: none;\n    cursor: not-allowed;\n    -webkit-box-shadow: none;\n    box-shadow: none;\n}\n\n.six {\n    border: 0;\n    height: 0;\n    border-top: 1px solid rgba(0, 0, 0, 0.1);\n    border-bottom: 1px solid rgba(255, 255, 255, 0.3);\n}\n</style>\n"]}]}