{"remainingRequest":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/src/views/pages/employee/assigntask-employee.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/src/views/pages/employee/assigntask-employee.vue","mtime":1640440454981},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/babel-loader/lib/index.js","mtime":1640440446305},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/cache-loader/dist/cjs.js","mtime":1640440446558},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/vue-loader/lib/index.js","mtime":1640440454211}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport { mapGetters } from 'vuex'\nimport * as getter from '../../../store/getters-types'\nimport * as action from '../../../store/action-types'\nimport * as mutation from '../../../store/mutation-types'\n\nexport default {\n    data() {\n        return {\n            dropDown: null,\n            fullscreen_loading  : false,\n            form: {\n                task_template_id    : '',\n                booking_time        : '',\n                employee_userid     : '',\n                message             : '',\n            },\n            rules: {\n                task_template_id: [\n                    { required: true, message:'Please Input Task Template', trigger: ['blur','change']}\n                ],\n                booking_time: [\n                    { required: true, message:'Please Select Booking Time', trigger: 'blur'}\n                ],\n                employee_userid:  [\n                    { required: true, message:'Please Select Employee', trigger: ['blur', 'change']},\n                ],\n                message:  [\n                    { required: true, message:'Please Input Message', trigger: 'blur'},\n                ],\n            }\n        }\n    },\n    methods: {\n        onSubmit(formName) {\n            this.$refs[formName].validate((valid) => {\n                if (valid) {\n                    this.$store.commit(mutation.BUTTON_STATUS, true)\n                    this.$store.dispatch(action.ASSIGN_EMPLOYEE_TASK, this.form)\n                } else {\n                    return false;\n                }\n            });\n        },\n        async remoteMethod2(query) {\n            let trimName = query.trim()\n        if (trimName.length > 0) {\n            await this.$store.commit(mutation.SET_LOADING, true);\n            await this.$store.dispatch(action.DROPDOWN_EMPLOYEE, trimName);\n        } else {\n            await this.$store.commit(mutation.SET_LOADING, true);\n            await this.$store.dispatch(action.DROPDOWN_EMPLOYEE, trimName);\n        }\n         this.dropDown = this.employeeList;\n        },\n        isCancel(){\n            this.$router.replace(`/employee/inprogress`)\n        },\n        taskT(value){\n            this.$store.dispatch(action.TEMPLATE_ID, value)\n        },\n        remoteMethod(query) {\n        },\n    },\n    computed: {\n        ...mapGetters({\n            error           : getter.GET_ERROR,\n            loading         : getter.GET_LOADING,\n            button          : getter.GET_BUTTON,\n            templateTasks   : getter.GET_TEMPLATE_LIST,\n            data            : getter.GET_TEMPLATE_ID,\n            employeeList    : getter.GET_DROPDOWN_EMPLOYEE,\n            clearInput      : getter.GET_CLEAR_INPUT\n        }),\n        buttonStatuz: function () {\n            return this.form.fullscreen_loading = this.button\n        },\n        dataTAsk() {\n            return(this.data != null) ? this.form.tasks = this.data.tasks : this.form.tasks = []\n        },\n        clearinput(){\n            if(clearInput){\n                this.form.birthdate = ''\n            }\n        }\n    },\n    created(){\n        this.$store.commit(mutation.SET_TEMPLATE_ID, null);\n        this.$store.dispatch(action.DROPDOWN_TEMPLATE, { page : 1 });\n    },\n    async mounted() {\n        await this.$store.dispatch(action.DROPDOWN_EMPLOYEE, null)\n        this.dropDown = this.employeeList\n    },\n}\n",{"version":3,"sources":["assigntask-employee.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuHA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"assigntask-employee.vue","sourceRoot":"src/views/pages/employee","sourcesContent":["<template>\n    <div class=\"page-table scrollable only-y\" id=\"affix-container\">\n        <div class=\"card-base card-shadow--medium bg-white\">\n            <el-form ref=\"form\" :rules=\"rules\" :model=\"form\">\n                <el-row :gutter=\"20\">\n                    <el-col :span=\"12\">\n                        <div class=\"grid-content\">\n                            <el-form-item prop=\"booking_time\">\n                                <el-date-picker\n                                        v-model=\"form.booking_time\"\n                                        type=\"datetime\"\n                                        placeholder=\"Booking Time\"\n                                        value-format=\"yyyy-MM-dd HH:mm:ss\"\n                                        size=\"large\"\n                                        popper-class=\"mantap\"\n                                        prefix-icon=\"el-icon-date\">\n                                </el-date-picker>\n                            </el-form-item>\n                        </div>\n                    </el-col >\n                    \n                    <el-col :span=\"12\">\n                        <div class=\"grid-content\">\n                            <el-form-item prop=\"employee_userid\">\n                                <el-select\n                                filterable\n                                remote\n                                reserve-keyword   \n                                :loading=\"loading\"                          \n                                :remote-method=\"remoteMethod2\"\n                                v-model=\"form.employee_userid\"\n                                placeholder=\"Select Employee\" >\n                                    <el-option\n                                            v-for=\"item in dropDown\"\n                                            :key=\"item.id\"\n                                            :label=\"item.name\"\n                                            :value=\"item.id\"></el-option>\n                                </el-select>\n                            </el-form-item>\n                        </div>\n                    </el-col>\n                </el-row>\n\n                <el-row :gutter=\"20\">\n                    <el-col :span=\"24\">\n                        <div class=\"grid-content\">\n                            <el-form-item prop=\"message\" >\n                                <el-input\n                                        type=\"textarea\"\n                                        v-model=\"form.message\"\n                                        placeholder=\"Input Message\"\n                                        :autosize=\"{ minRows: 5, maxRows: 7}\"></el-input>\n                            </el-form-item>\n                        </div>\n                    </el-col>\n                </el-row>\n\n                <el-row :gutter=\"20\">\n                    <el-col :span=\"24\">\n                        <div class=\"grid-content\">\n                            <el-form-item prop=\"task_template_id\">\n                                <el-select\n                                        v-model=\"form.task_template_id\"\n                                        @change=\"taskT\"\n                                        :remote-method=\"remoteMethod\"\n                                        placeholder=\"Select Template\" >\n                                    <el-option\n                                            v-for=\"item in templateTasks\"\n                                            :key=\"item.task_template_id\"\n                                            :label=\"item.task_template_name\"\n                                            :value=\"item.task_template_id\"></el-option>\n                                </el-select>\n                            </el-form-item>\n                        </div>\n                    </el-col>\n                </el-row>\n\n                <el-row>\n                    <el-col :span=\"24\">\n                        <el-table\n                                :data=\"dataTAsk\"\n                                stripe\n                                style=\"width: 100%\">\n                            <el-table-column\n                                    prop=\"name\"\n                                    label=\"Task Name\">\n                            </el-table-column>\n                            <el-table-column\n                                    prop=\"description\"\n                                    label=\"Task Description\">\n                            </el-table-column>\n                            <el-table-column\n                                    prop=\"updated_at\"\n                                    label=\"Last Update\">\n                            </el-table-column>\n                        </el-table>\n                    </el-col>\n                </el-row>\n\n                <el-row >\n                    <el-col :lg=\"{offset:18, span:6}\" style=\"display: flex; justify-content: flex-end; margin-top: 14px\">\n                        <div class=\"grid-content\">\n                            <el-form-item>\n                                <el-button @click=\"isCancel\">Cancel</el-button>\n                                <el-button\n                                        type=\"success\"\n                                        v-loading.fullscreen.lock=\"button\"\n                                        @click=\"onSubmit('form')\">Save</el-button>\n                            </el-form-item>\n                        </div>\n                    </el-col>\n                </el-row>\n            </el-form>\n        </div>\n    </div>\n</template>\n\n<script>\n\n    import { mapGetters } from 'vuex'\n    import * as getter from '../../../store/getters-types'\n    import * as action from '../../../store/action-types'\n    import * as mutation from '../../../store/mutation-types'\n\n    export default {\n        data() {\n            return {\n                dropDown: null,\n                fullscreen_loading  : false,\n                form: {\n                    task_template_id    : '',\n                    booking_time        : '',\n                    employee_userid     : '',\n                    message             : '',\n                },\n                rules: {\n                    task_template_id: [\n                        { required: true, message:'Please Input Task Template', trigger: ['blur','change']}\n                    ],\n                    booking_time: [\n                        { required: true, message:'Please Select Booking Time', trigger: 'blur'}\n                    ],\n                    employee_userid:  [\n                        { required: true, message:'Please Select Employee', trigger: ['blur', 'change']},\n                    ],\n                    message:  [\n                        { required: true, message:'Please Input Message', trigger: 'blur'},\n                    ],\n                }\n            }\n        },\n        methods: {\n            onSubmit(formName) {\n                this.$refs[formName].validate((valid) => {\n                    if (valid) {\n                        this.$store.commit(mutation.BUTTON_STATUS, true)\n                        this.$store.dispatch(action.ASSIGN_EMPLOYEE_TASK, this.form)\n                    } else {\n                        return false;\n                    }\n                });\n            },\n            async remoteMethod2(query) {\n                let trimName = query.trim()\n            if (trimName.length > 0) {\n                await this.$store.commit(mutation.SET_LOADING, true);\n                await this.$store.dispatch(action.DROPDOWN_EMPLOYEE, trimName);\n            } else {\n                await this.$store.commit(mutation.SET_LOADING, true);\n                await this.$store.dispatch(action.DROPDOWN_EMPLOYEE, trimName);\n            }\n             this.dropDown = this.employeeList;\n            },\n            isCancel(){\n                this.$router.replace(`/employee/inprogress`)\n            },\n            taskT(value){\n                this.$store.dispatch(action.TEMPLATE_ID, value)\n            },\n            remoteMethod(query) {\n            },\n        },\n        computed: {\n            ...mapGetters({\n                error           : getter.GET_ERROR,\n                loading         : getter.GET_LOADING,\n                button          : getter.GET_BUTTON,\n                templateTasks   : getter.GET_TEMPLATE_LIST,\n                data            : getter.GET_TEMPLATE_ID,\n                employeeList    : getter.GET_DROPDOWN_EMPLOYEE,\n                clearInput      : getter.GET_CLEAR_INPUT\n            }),\n            buttonStatuz: function () {\n                return this.form.fullscreen_loading = this.button\n            },\n            dataTAsk() {\n                return(this.data != null) ? this.form.tasks = this.data.tasks : this.form.tasks = []\n            },\n            clearinput(){\n                if(clearInput){\n                    this.form.birthdate = ''\n                }\n            }\n        },\n        created(){\n            this.$store.commit(mutation.SET_TEMPLATE_ID, null);\n            this.$store.dispatch(action.DROPDOWN_TEMPLATE, { page : 1 });\n        },\n        async mounted() {\n            await this.$store.dispatch(action.DROPDOWN_EMPLOYEE, null)\n            this.dropDown = this.employeeList\n        },\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    .card-base {\n        padding: 20px;\n    }\n    .el-row {\n        padding: 0px 10px;\n        &:last-child {\n            margin-bottom: 0;\n        }\n    }\n    .el-col {\n        border-radius: 5px;\n    }\n</style>\n"]}]}