{"remainingRequest":"C:\\Users\\ASUS\\Documents\\GitHub\\update-cancel-order-ui\\oper-customer\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ASUS\\Documents\\GitHub\\update-cancel-order-ui\\oper-customer\\src\\components\\Affix.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\update-cancel-order-ui\\oper-customer\\src\\components\\Affix.vue","mtime":1644413760030},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\update-cancel-order-ui\\oper-customer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\update-cancel-order-ui\\oper-customer\\node_modules\\babel-loader\\lib\\index.js","mtime":1646338474621},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\update-cancel-order-ui\\oper-customer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\update-cancel-order-ui\\oper-customer\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n\tprops: {\r\n\t\toffset: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 0,\r\n\t\t},\r\n\t\tonAffix: {\r\n\t\t\ttype: Function,\r\n\t\t\tdefault() {},\r\n\t\t},\r\n\t\tboundary: {\r\n\t\t\ttype: String,\r\n\t\t\tdefault: '',\r\n\t\t},\r\n\t\tscrollerid: {\r\n\t\t\ttype: String,\r\n\t\t\tdefault: '',\r\n\t\t},\r\n\t},\r\n\r\n\tdata() {\r\n\t\treturn {\r\n\t\t\tscroller: window,\r\n\t\t\tscrollerIsWindow: true,\r\n\t\t\taffixed: false,\r\n\t\t\tstyles: {},\r\n\t\t\taffixedClientHeight: 0,\r\n\t\t\taffixedClientWidth: 0,\r\n\t\t\twrapStyle: {},\r\n\t\t};\r\n\t},\r\n\r\n\tmethods: {\r\n\t\tgetScroll(w, top) {\r\n\t\t\tlet prop = this.scrollerIsWindow || w === window ? `page${(top ? 'Y' : 'X')}Offset` : `scroll${top ? 'Top' : 'Left'}`\r\n\r\n\t\t\treturn this.scroller[prop]\r\n\t\t},\r\n\t\tgetOffset(element) {\r\n\t\t\tconst rect = element.getBoundingClientRect();\r\n\t\t\tconst body = document.body;\r\n\t\t\t//console.log(rect, element.clientTop, body.clientTop)\r\n\t\t\tconst clientTop = element.clientTop || body.clientTop || 0;\r\n\t\t\tconst clientLeft = element.clientLeft || body.clientLeft || 0;\r\n\t\t\t//const clientHeight = element.clientHeight || 0;\r\n\t\t\tconst scrollTop = this.getScroll(this.scroller, true);\r\n\t\t\tconst scrollLeft = this.getScroll(this.scroller);\r\n\t\t\treturn {\r\n\t\t\t\ttop: rect.bottom + scrollTop - clientTop - this.affixedClientHeight,\r\n\t\t\t\tleft: rect.left + scrollLeft - clientLeft,\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\thandleScroll() {\r\n\t\t\tconst scrollTop = this.getScroll(this.scroller, true) + this.offsets;// handle setting offset\r\n\t\t\tconst elementOffset = this.getOffset(this.$el);\r\n\r\n\t\t\tconst scrollerOffset = 60\r\n\r\n\t\t\tif (!this.affixed && scrollTop + scrollerOffset > elementOffset.top ) {\r\n\t\t\t\tthis.affixed = true;\r\n\t\t\t\tthis.styles = {\r\n\t\t\t\t\ttop: `${this.offsets + scrollerOffset }px`,\r\n\t\t\t\t\tleft: `${elementOffset.left}px`,\r\n\t\t\t\t\twidth: `${this.$el.offsetWidth}px`,\r\n\t\t\t\t};\r\n\t\t\t\tthis.onAffix(this.affixed);\r\n\t\t\t}\r\n\r\n\t\t\t// if setting boundary\r\n\t\t\tif (this.boundary && scrollTop > elementOffset.top) {\r\n\t\t\t\tconst el = window.document.getElementById(this.boundary);\r\n\t\t\t\tif (el) {\r\n\t\t\t\t\tconst boundaryOffset = this.getOffset(el);\r\n\t\t\t\t\tif ((scrollTop + this.offsets + scrollerOffset) > boundaryOffset.top) {\r\n\t\t\t\t\t\t//const top = scrollTop - boundaryOffset.top;\r\n\t\t\t\t\t\tconst top = boundaryOffset.top - scrollTop;\r\n\t\t\t\t\t\tthis.styles.top = `${top}px`;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this.affixed && scrollTop + scrollerOffset  < elementOffset.top) {\r\n\t\t\t\tthis.affixed = false;\r\n\t\t\t\tthis.styles = {};\r\n\t\t\t\tthis.onAffix(this.affixed);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.affixed && this.boundary) {\r\n\t\t\t\tconst el = window.document.getElementById(this.boundary);\r\n\t\t\t\tif (el) {\r\n\t\t\t\t\tconst boundaryOffset = this.getOffset(el);\r\n\t\t\t\t\tif ((scrollTop + this.offsets + scrollerOffset) <= boundaryOffset.top) {\r\n\t\t\t\t\t\t//this.styles.top = 0 ;\r\n\t\t\t\t\t\tthis.styles.top = `${0 + scrollerOffset }px` ;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\r\n\tcomputed: {\r\n\t\toffsets() {\r\n\t\t\tif (this.boundary) return 0;\r\n\t\t\treturn this.offset;\r\n\t\t},\r\n\t},\r\n\r\n\tmounted() {\r\n\t\tif(this.scrollerid){\r\n\t\t\tthis.scrollerIsWindow = false\r\n\t\t\tthis.scroller = window.document.getElementById(this.scrollerid)\r\n\t\t}\r\n\r\n\t\tthis.affixedClientHeight = this.$el.children[0].clientHeight;\r\n\t\tthis.affixedClientWidth = this.$el.children[0].clientWidth;\r\n\r\n\t\tthis.wrapStyle = { height: `${this.affixedClientHeight}px`, width: `${this.affixedClientWidth}px` };\r\n\t\tthis.scroller.addEventListener('scroll', this.handleScroll);\r\n\t\tthis.scroller.addEventListener('resize', this.handleScroll);\r\n\t},\r\n\r\n\tbeforeDestroy() {\r\n\t\tthis.scroller.removeEventListener('scroll', this.handleScroll);\r\n\t\tthis.scroller.removeEventListener('resize', this.handleScroll);\r\n\t},\r\n\r\n};\r\n",{"version":3,"sources":["Affix.vue"],"names":[],"mappings":";;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA","file":"Affix.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n\t<div class=\"affix-placeholder\" :style=\"wrapStyle\">\r\n\t\t<div :class=\"{'affix': affixed}\" :style=\"styles\">\r\n\t\t\t<slot></slot>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n<script>\r\nexport default {\r\n\tprops: {\r\n\t\toffset: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 0,\r\n\t\t},\r\n\t\tonAffix: {\r\n\t\t\ttype: Function,\r\n\t\t\tdefault() {},\r\n\t\t},\r\n\t\tboundary: {\r\n\t\t\ttype: String,\r\n\t\t\tdefault: '',\r\n\t\t},\r\n\t\tscrollerid: {\r\n\t\t\ttype: String,\r\n\t\t\tdefault: '',\r\n\t\t},\r\n\t},\r\n\r\n\tdata() {\r\n\t\treturn {\r\n\t\t\tscroller: window,\r\n\t\t\tscrollerIsWindow: true,\r\n\t\t\taffixed: false,\r\n\t\t\tstyles: {},\r\n\t\t\taffixedClientHeight: 0,\r\n\t\t\taffixedClientWidth: 0,\r\n\t\t\twrapStyle: {},\r\n\t\t};\r\n\t},\r\n\r\n\tmethods: {\r\n\t\tgetScroll(w, top) {\r\n\t\t\tlet prop = this.scrollerIsWindow || w === window ? `page${(top ? 'Y' : 'X')}Offset` : `scroll${top ? 'Top' : 'Left'}`\r\n\r\n\t\t\treturn this.scroller[prop]\r\n\t\t},\r\n\t\tgetOffset(element) {\r\n\t\t\tconst rect = element.getBoundingClientRect();\r\n\t\t\tconst body = document.body;\r\n\t\t\t//console.log(rect, element.clientTop, body.clientTop)\r\n\t\t\tconst clientTop = element.clientTop || body.clientTop || 0;\r\n\t\t\tconst clientLeft = element.clientLeft || body.clientLeft || 0;\r\n\t\t\t//const clientHeight = element.clientHeight || 0;\r\n\t\t\tconst scrollTop = this.getScroll(this.scroller, true);\r\n\t\t\tconst scrollLeft = this.getScroll(this.scroller);\r\n\t\t\treturn {\r\n\t\t\t\ttop: rect.bottom + scrollTop - clientTop - this.affixedClientHeight,\r\n\t\t\t\tleft: rect.left + scrollLeft - clientLeft,\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\thandleScroll() {\r\n\t\t\tconst scrollTop = this.getScroll(this.scroller, true) + this.offsets;// handle setting offset\r\n\t\t\tconst elementOffset = this.getOffset(this.$el);\r\n\r\n\t\t\tconst scrollerOffset = 60\r\n\r\n\t\t\tif (!this.affixed && scrollTop + scrollerOffset > elementOffset.top ) {\r\n\t\t\t\tthis.affixed = true;\r\n\t\t\t\tthis.styles = {\r\n\t\t\t\t\ttop: `${this.offsets + scrollerOffset }px`,\r\n\t\t\t\t\tleft: `${elementOffset.left}px`,\r\n\t\t\t\t\twidth: `${this.$el.offsetWidth}px`,\r\n\t\t\t\t};\r\n\t\t\t\tthis.onAffix(this.affixed);\r\n\t\t\t}\r\n\r\n\t\t\t// if setting boundary\r\n\t\t\tif (this.boundary && scrollTop > elementOffset.top) {\r\n\t\t\t\tconst el = window.document.getElementById(this.boundary);\r\n\t\t\t\tif (el) {\r\n\t\t\t\t\tconst boundaryOffset = this.getOffset(el);\r\n\t\t\t\t\tif ((scrollTop + this.offsets + scrollerOffset) > boundaryOffset.top) {\r\n\t\t\t\t\t\t//const top = scrollTop - boundaryOffset.top;\r\n\t\t\t\t\t\tconst top = boundaryOffset.top - scrollTop;\r\n\t\t\t\t\t\tthis.styles.top = `${top}px`;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this.affixed && scrollTop + scrollerOffset  < elementOffset.top) {\r\n\t\t\t\tthis.affixed = false;\r\n\t\t\t\tthis.styles = {};\r\n\t\t\t\tthis.onAffix(this.affixed);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.affixed && this.boundary) {\r\n\t\t\t\tconst el = window.document.getElementById(this.boundary);\r\n\t\t\t\tif (el) {\r\n\t\t\t\t\tconst boundaryOffset = this.getOffset(el);\r\n\t\t\t\t\tif ((scrollTop + this.offsets + scrollerOffset) <= boundaryOffset.top) {\r\n\t\t\t\t\t\t//this.styles.top = 0 ;\r\n\t\t\t\t\t\tthis.styles.top = `${0 + scrollerOffset }px` ;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\r\n\tcomputed: {\r\n\t\toffsets() {\r\n\t\t\tif (this.boundary) return 0;\r\n\t\t\treturn this.offset;\r\n\t\t},\r\n\t},\r\n\r\n\tmounted() {\r\n\t\tif(this.scrollerid){\r\n\t\t\tthis.scrollerIsWindow = false\r\n\t\t\tthis.scroller = window.document.getElementById(this.scrollerid)\r\n\t\t}\r\n\r\n\t\tthis.affixedClientHeight = this.$el.children[0].clientHeight;\r\n\t\tthis.affixedClientWidth = this.$el.children[0].clientWidth;\r\n\r\n\t\tthis.wrapStyle = { height: `${this.affixedClientHeight}px`, width: `${this.affixedClientWidth}px` };\r\n\t\tthis.scroller.addEventListener('scroll', this.handleScroll);\r\n\t\tthis.scroller.addEventListener('resize', this.handleScroll);\r\n\t},\r\n\r\n\tbeforeDestroy() {\r\n\t\tthis.scroller.removeEventListener('scroll', this.handleScroll);\r\n\t\tthis.scroller.removeEventListener('resize', this.handleScroll);\r\n\t},\r\n\r\n};\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n.affix{\r\n  position: fixed;\r\n}\r\n</style>\r\n\r\n"]}]}