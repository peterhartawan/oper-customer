{"remainingRequest":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/src/components/employee/task-employee.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/src/components/employee/task-employee.vue","mtime":1640440454956},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/cache-loader/dist/cjs.js","mtime":1640440446558},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/babel-loader/lib/index.js","mtime":1640440446305},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/cache-loader/dist/cjs.js","mtime":1640440446558},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/vue-loader/lib/index.js","mtime":1640440454211}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport { mapGetters } from 'vuex';\nimport * as getter from \"../../store/getters-types\";\nimport * as mutation from \"../../store/mutation-types\";\nimport * as action from \"../../store/action-types\";\nexport default {\n    data(){\n        return {\n            tabTask     : 'graphic',\n            tabOrder    : 'today',\n            mapMark: null,\n            markers: [],\n            path: [],\n            infowindow: {\n                lat: 0,\n                lng: 0,\n                name: null,\n            },\n            markDefault: {\n                lat: -6.21462,\n                lng: 106.84513\n            },\n            window_open: false,\n            mapsGraph: true,\n            options: {\n                fullWidth: true,\n                chartPadding: {\n                    right: 40\n                }\n            },\n            createAss: true,\n        }\n    },\n    computed: {\n        ...mapGetters({\n            orderGraphic : getter.GET_ORDER_BAR_GRAPHIC,\n            orderBar     : getter.GET_ORDER_BAR,\n            listData     : getter.GET_TRACKING_ORDER,\n            idorder      : getter.GET_ID_ORDER,\n            trackingType : getter.GET_TRACKING_TYPE\n        }),\n        lineChart (){\n            if(this.orderGraphic !== null){\n                return {\n                    labels: this.orderGraphic.label,\n                    series: this.orderGraphic.data\n                }\n            } else {\n                return {}\n            }\n        }\n    },\n    async created(){\n        await this.$store.dispatch(action.ORDER_GRAPHIC_BAR, {\n            v       : 'today',\n            type    : 'employee'\n        });\n        (this.$route.path === '/employee/inprogress') ? this.createAss = true : this.createAss = false;\n        if(this.$route.path === '/detail-task-employee'){\n            let obj = {\n                id      : this.idorder,\n                page    : 1,\n                type    : this.trackingType\n            };\n            await this.$store.dispatch(action.TRACKING, obj);\n            for (let i = 0; i < this.listData.length; i++) {\n                const marker = {\n                    lat: parseFloat(this.listData[i].latitude),\n                    lng: parseFloat(this.listData[i].longitude),\n                    name: this.listData[i].created_at\n                };\n                this.markDefault.lat = parseFloat(this.listData[i].latitude);\n                this.markDefault.lng = parseFloat(this.listData[i].longitude);\n                this.markers.push({\n                    position: marker\n                });\n                this.path.push(marker);\n                this.mapMark = 1;\n            }\n        }\n    },\n    methods: {\n        async totalTrack(v){\n            (v === 'graphic') ? this.mapsGraph = true : this.mapsGraph = false;\n        },\n        totalOrder(v) {\n            this.$store.dispatch(action.ORDER_GRAPHIC_BAR, {\n                v,\n                type    : 'employee'\n            })\n        },\n        openWindow(position) {\n            this.window_open = true;\n            this.infowindow.lat = position.lat;\n            this.infowindow.lng = position.lng;\n            this.infowindow.name = position.name;\n        },\n        templateButton(){\n            this.$router.replace('/template-list')\n        },\n        assignButton(){\n            this.$router.replace('/employee/assign-task')\n        },\n    }\n\n}\n",{"version":3,"sources":["task-employee.vue"],"names":[],"mappingsfile":"task-employee.vue","sourceRoot":"src/components/employee","sourcesContent":["<template>\n    <div class=\"container\">\n        <el-row :gutter=\"10\" class=\"mb-70\">\n            <el-col :span=\"12\">\n                <div v-if=\"createAss\" class=\"mb-30\">\n                    <span class=\"font-weight-600 view-text mb-20\">TASK</span>\n                    <el-button\n                            @click=\"templateButton\"\n                            class=\"template tempAss\">\n                        Template\n                    </el-button>\n                    <el-button\n                            @click=\"assignButton\"\n                            class=\"assign tempAss\">\n                        Assign\n                    </el-button>\n                </div>\n                <div>\n                    <span class=\"font-weight-600 view-text\">VIEW</span>\n                    <el-radio-group v-model=\"tabTask\" @change=\"totalTrack\" fill=\"#AB0000\" class=\"mt-25\" >\n                        <el-radio-button label=\"graphic\"><span class=\"font-button padding-20\">Graphic</span></el-radio-button>\n                        <el-radio-button label=\"tracking\"><span class=\"font-button padding-20\" >Tracking</span></el-radio-button>\n                    </el-radio-group>\n                </div>\n            </el-col>\n            <el-col :span=\"12\">\n                <el-row>\n                        <span class=\"font-weight-600 view-text\" >TOTAL ORDER</span>\n                    <el-col :span=\"10\" :offset=\"14\">\n                        <el-radio-group v-model=\"tabOrder\" @change=\"totalOrder\" fill=\"#ababab\" size=\"small\">\n                            <el-radio-button label=\"today\">Today</el-radio-button>\n                            <el-radio-button label=\"week\">Week</el-radio-button>\n                            <el-radio-button label=\"month\">Month</el-radio-button>\n                        </el-radio-group>\n                    </el-col>\n                </el-row>\n\n                <el-row >\n                    <el-col :lg=\"24\">\n                        <el-card shadow=\"always\" class=\"card-border\" :body-style=\"{padding: '0px'}\">\n                            <el-row :gutter=\"20\">\n                                <el-col :span=\"8\">\n                                    <el-row class=\"font-icon line\" justify=\"center\">\n                                        <el-col :span=\"9\">\n                                            <img src=\"../../assets/oper_asset/open.png\" class=\"drive-acount padding-left-3\">\n                                        </el-col>\n                                        <el-col :span=\"15\" class=\"text-center font-weight-500 font-size-45\">\n                                            0\n                                        </el-col>\n                                    </el-row>\n                                </el-col>\n                                <el-col :span=\"8\" v-if=\"orderBar !== null\">\n                                    <el-row class=\"font-icon line\" justify=\"center\">\n                                        <el-col :span=\"9\">\n                                            <img src=\"../../assets/oper_asset/progress.png\" class=\"drive-acount\">\n                                        </el-col>\n                                        <el-col :span=\"15\" class=\"text-center font-weight-500 font-size-45\">\n                                            {{orderBar.order_inprogress}}\n                                        </el-col>\n                                    </el-row>\n                                </el-col>\n                                <el-col :span=\"8\" v-if=\"orderBar !== null\">\n                                    <el-row class=\"font-icon\" justify=\"center\" style=\"padding-right: 30px\">\n                                        <el-col :span=\"9\">\n                                            <img src=\"../../assets/oper_asset/completed.png\" class=\"drive-acount\">\n                                        </el-col>\n                                        <el-col :span=\"15\" class=\"text-center font-weight-500 font-size-45\">\n                                            {{orderBar.order_complete}}\n                                        </el-col>\n                                    </el-row>\n                                </el-col>\n                            </el-row>\n                        </el-card>\n                    </el-col>\n                </el-row>\n            </el-col>\n        </el-row>\n\n        <div v-if=\"mapsGraph\">\n            <h4>ORDER DETAILS</h4>\n            <!--v-if=\"orderGraphic !== null\"-->\n            <div class=\"card-base card-shadow--medium p-30 mt-25 bg-white border-line-hight\">\n                <vue-chartist :data=\"lineChart\" type=\"Line\"></vue-chartist>\n            </div>\n        </div>\n\n        <div v-else>\n            <h4>ORDER DETAILS</h4>\n            <div class=\"card-base card-shadow--medium bg-white\">\n                <gmap-map :center=\"markDefault\" :zoom=\"16\" style=\"width: 100%; height: 500px\">\n                    <div v-if=\"mapMark\">\n                        <gmap-marker :key=\"index\" v-for=\"(m, index) in markers\" :position=\"m.position\" :clickable=\"true\" @click=\"openWindow(m.position)\"></gmap-marker>\n                        <gmap-info-window @closeclick=\"window_open=false\" :opened=\"window_open\" :position=\"infowindow\" :options=\"{ pixelOffset: { width: 0, height: -35},}\">\n                            {{infowindow.name}}\n                        </gmap-info-window>\n                        <gmap-polyline :path=\"path\" :options=\"{ strokeColor:'#BB0000'}\">\n                        </gmap-polyline>\n                    </div>\n                </gmap-map>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\n\n    import { mapGetters } from 'vuex';\n    import * as getter from \"../../store/getters-types\";\n    import * as mutation from \"../../store/mutation-types\";\n    import * as action from \"../../store/action-types\";\n    export default {\n        data(){\n            return {\n                tabTask     : 'graphic',\n                tabOrder    : 'today',\n                mapMark: null,\n                markers: [],\n                path: [],\n                infowindow: {\n                    lat: 0,\n                    lng: 0,\n                    name: null,\n                },\n                markDefault: {\n                    lat: -6.21462,\n                    lng: 106.84513\n                },\n                window_open: false,\n                mapsGraph: true,\n                options: {\n                    fullWidth: true,\n                    chartPadding: {\n                        right: 40\n                    }\n                },\n                createAss: true,\n            }\n        },\n        computed: {\n            ...mapGetters({\n                orderGraphic : getter.GET_ORDER_BAR_GRAPHIC,\n                orderBar     : getter.GET_ORDER_BAR,\n                listData     : getter.GET_TRACKING_ORDER,\n                idorder      : getter.GET_ID_ORDER,\n                trackingType : getter.GET_TRACKING_TYPE\n            }),\n            lineChart (){\n                if(this.orderGraphic !== null){\n                    return {\n                        labels: this.orderGraphic.label,\n                        series: this.orderGraphic.data\n                    }\n                } else {\n                    return {}\n                }\n            }\n        },\n        async created(){\n            await this.$store.dispatch(action.ORDER_GRAPHIC_BAR, {\n                v       : 'today',\n                type    : 'employee'\n            });\n            (this.$route.path === '/employee/inprogress') ? this.createAss = true : this.createAss = false;\n            if(this.$route.path === '/detail-task-employee'){\n                let obj = {\n                    id      : this.idorder,\n                    page    : 1,\n                    type    : this.trackingType\n                };\n                await this.$store.dispatch(action.TRACKING, obj);\n                for (let i = 0; i < this.listData.length; i++) {\n                    const marker = {\n                        lat: parseFloat(this.listData[i].latitude),\n                        lng: parseFloat(this.listData[i].longitude),\n                        name: this.listData[i].created_at\n                    };\n                    this.markDefault.lat = parseFloat(this.listData[i].latitude);\n                    this.markDefault.lng = parseFloat(this.listData[i].longitude);\n                    this.markers.push({\n                        position: marker\n                    });\n                    this.path.push(marker);\n                    this.mapMark = 1;\n                }\n            }\n        },\n        methods: {\n            async totalTrack(v){\n                (v === 'graphic') ? this.mapsGraph = true : this.mapsGraph = false;\n            },\n            totalOrder(v) {\n                this.$store.dispatch(action.ORDER_GRAPHIC_BAR, {\n                    v,\n                    type    : 'employee'\n                })\n            },\n            openWindow(position) {\n                this.window_open = true;\n                this.infowindow.lat = position.lat;\n                this.infowindow.lng = position.lng;\n                this.infowindow.name = position.name;\n            },\n            templateButton(){\n                this.$router.replace('/template-list')\n            },\n            assignButton(){\n                this.$router.replace('/employee/assign-task')\n            },\n        }\n\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    @import '../../assets/scss/_variables';\n    .container {\n        font-family: Arial;\n    }\n    .font-icon {\n        font-size: 20px;\n    }\n    .line {\n        border-right: 1px solid $line-color;\n        padding-right: 30px;\n    }\n    .view-text {\n        display: block;\n        font-size: 15px;\n    }\n    .drive-acount {\n        height: 40px;\n        margin-top: 10px;\n    }\n    .font-button {\n        font-size: 19px;\n    }\n    .template {\n        padding: 30px 40px;\n        @extend .font-button;\n    }\n    .assign {\n        padding: 30px 50px;\n        @extend .font-button;\n    }\n    .tempAss {\n        background:  #AB0000;\n        color: white\n    }\n</style>"]}]}