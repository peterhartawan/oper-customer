{"remainingRequest":"C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\src\\components\\Search.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\src\\components\\Search.vue","mtime":1644413760046},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\node_modules\\babel-loader\\lib\\index.js","mtime":1646338474621},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n\tname: 'Search',\r\n\tdata() {\r\n\t\treturn {\r\n\t\t\tsearch: '',\r\n\t\t\tlist: []\r\n\t\t}\r\n\t},\r\n\tmethods: {\r\n\t\tquerySearch(queryString, cb) {\r\n\t\t\tvar list = this.list;\r\n\t\t\tvar results = queryString ? list.filter(this.createFilter(queryString)) : list\r\n\t\t\t// call callback function to return suggestions\r\n\t\t\tcb(results);\r\n\t\t},\r\n\t\tcreateFilter(queryString) {\r\n\t\t\treturn (link) => {\r\n\t\t\t\treturn (link.meta.toLowerCase().indexOf(queryString.toLowerCase()) !== -1)\r\n\t\t\t};\r\n\t\t},\r\n\t\thandleSelect(item) {\r\n\t\t\tthis.goto(item.name)\r\n\t\t},\r\n\t\tflattenObject(object) {\r\n\t\t\tlet obj = {};\r\n\t\t\tObject.keys(object).forEach(key => {\r\n\t\t\t\tif (typeof object[key] !== 'object') {\r\n\t\t\t\t\tobj[key] = object[key];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tobj = { ...obj, ...this.flattenObject(object[key]) };\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn obj;\r\n\t\t},\r\n\t\tflatten(list, key, cb) {\r\n\t\t\tlet newList = []\r\n\r\n\t\t\tfor(let k in list) {\r\n\t\t\t\tlet temp = Object.assign({}, list[k])\r\n\t\t\t\tif(temp[key] && temp[key].length)\r\n\t\t\t\t\tdelete temp[key]\r\n\r\n\t\t\t\tnewList.push(temp)\r\n\r\n\t\t\t\tif(list[k][key] && list[k][key].length){\r\n\t\t\t\t\tnewList = newList.concat(list[k][key])\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet check = false\r\n\t\t\tfor(let i in newList){\r\n\t\t\t\tif(newList[i][key] && newList[i][key].length)\r\n\t\t\t\t\tcheck = true\r\n\t\t\t}\r\n\r\n\t\t\tif(check)\r\n\t\t\t\tthis.flatten(newList, key, cb)\r\n\t\t\telse\r\n\t\t\t\tcb(newList)\t\t\t\t\r\n\r\n\t\t\treturn true\r\n\t\t},\r\n\t\tparseList(list) {\r\n\t\t\tlet parsed = []\r\n\r\n\t\t\tfor(let k in list) {\r\n\t\t\t\tif(list[k].name && list[k].meta && list[k].meta.searchable) {\r\n\t\t\t\t\tlet name = list[k].name\r\n\t\t\t\t\tlet value = list[k].meta.title || name || ''\r\n\t\t\t\t\tlet tags = ''\r\n\t\t\t\t\tif(list[k].meta.tags && list[k].meta.tags.length)\r\n\t\t\t\t\t\ttags = list[k].meta.tags.join(', ')\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet meta = name+value+tags\r\n\r\n\t\t\t\t\tif(value) {\r\n\t\t\t\t\t\tparsed.push({\r\n\t\t\t\t\t\t\tvalue,\r\n\t\t\t\t\t\t\ttags,\r\n\t\t\t\t\t\t\tname,\r\n\t\t\t\t\t\t\tmeta\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn parsed\r\n\t\t},\r\n\t\tgoto(name) {\r\n\t\t\tthis.$router.push({name})\r\n\t\t}\r\n    },\r\n    mounted() {\r\n\t\t//console.log(this.$router.options.routes)\r\n\t\tthis.flatten(this.$router.options.routes, 'children', (data)=>{\r\n\t\t\tthis.list = this.parseList(data)\r\n\t\t})\r\n    }\r\n}\r\n",{"version":3,"sources":["Search.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Search.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n\t<div class=\"search-box\">\r\n\t\t<el-autocomplete\r\n\t\tclass=\"search-input\"\r\n\t\tpopper-class=\"search-box-popper card-base card-shadow--small\"\r\n\t\tv-model=\"search\"\r\n\t\t:fetch-suggestions=\"querySearch\"\r\n\t\tplaceholder=\"Search...\"\r\n\t\t:trigger-on-focus=\"true\"\r\n\t\tclearable\r\n\t\tprefix-icon=\"el-icon-search\"\r\n\t\tsize=\"small\"\r\n\t\t@select=\"handleSelect\"\r\n\t\t>\r\n\t\t\t<i slot=\"suffix\" class=\"el-input__icon el-icon-circle-close-outline mt-19\" @click=\"search=''\" v-if=\"search\"></i>\r\n\t\t\t<template slot-scope=\"props\">\r\n\t\t\t\t<span class=\"value\">{{ props.item.value }}</span>\r\n\t\t\t\t<span class=\"tags\">{{ props.item.tags }}</span>\r\n\t\t\t</template>\r\n\t\t\t<!--<template slot=\"suffix\">-->\r\n\t\t\t<!--</template>-->\r\n\t\t</el-autocomplete>\r\n\t</div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n\tname: 'Search',\r\n\tdata() {\r\n\t\treturn {\r\n\t\t\tsearch: '',\r\n\t\t\tlist: []\r\n\t\t}\r\n\t},\r\n\tmethods: {\r\n\t\tquerySearch(queryString, cb) {\r\n\t\t\tvar list = this.list;\r\n\t\t\tvar results = queryString ? list.filter(this.createFilter(queryString)) : list\r\n\t\t\t// call callback function to return suggestions\r\n\t\t\tcb(results);\r\n\t\t},\r\n\t\tcreateFilter(queryString) {\r\n\t\t\treturn (link) => {\r\n\t\t\t\treturn (link.meta.toLowerCase().indexOf(queryString.toLowerCase()) !== -1)\r\n\t\t\t};\r\n\t\t},\r\n\t\thandleSelect(item) {\r\n\t\t\tthis.goto(item.name)\r\n\t\t},\r\n\t\tflattenObject(object) {\r\n\t\t\tlet obj = {};\r\n\t\t\tObject.keys(object).forEach(key => {\r\n\t\t\t\tif (typeof object[key] !== 'object') {\r\n\t\t\t\t\tobj[key] = object[key];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tobj = { ...obj, ...this.flattenObject(object[key]) };\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn obj;\r\n\t\t},\r\n\t\tflatten(list, key, cb) {\r\n\t\t\tlet newList = []\r\n\r\n\t\t\tfor(let k in list) {\r\n\t\t\t\tlet temp = Object.assign({}, list[k])\r\n\t\t\t\tif(temp[key] && temp[key].length)\r\n\t\t\t\t\tdelete temp[key]\r\n\r\n\t\t\t\tnewList.push(temp)\r\n\r\n\t\t\t\tif(list[k][key] && list[k][key].length){\r\n\t\t\t\t\tnewList = newList.concat(list[k][key])\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet check = false\r\n\t\t\tfor(let i in newList){\r\n\t\t\t\tif(newList[i][key] && newList[i][key].length)\r\n\t\t\t\t\tcheck = true\r\n\t\t\t}\r\n\r\n\t\t\tif(check)\r\n\t\t\t\tthis.flatten(newList, key, cb)\r\n\t\t\telse\r\n\t\t\t\tcb(newList)\t\t\t\t\r\n\r\n\t\t\treturn true\r\n\t\t},\r\n\t\tparseList(list) {\r\n\t\t\tlet parsed = []\r\n\r\n\t\t\tfor(let k in list) {\r\n\t\t\t\tif(list[k].name && list[k].meta && list[k].meta.searchable) {\r\n\t\t\t\t\tlet name = list[k].name\r\n\t\t\t\t\tlet value = list[k].meta.title || name || ''\r\n\t\t\t\t\tlet tags = ''\r\n\t\t\t\t\tif(list[k].meta.tags && list[k].meta.tags.length)\r\n\t\t\t\t\t\ttags = list[k].meta.tags.join(', ')\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet meta = name+value+tags\r\n\r\n\t\t\t\t\tif(value) {\r\n\t\t\t\t\t\tparsed.push({\r\n\t\t\t\t\t\t\tvalue,\r\n\t\t\t\t\t\t\ttags,\r\n\t\t\t\t\t\t\tname,\r\n\t\t\t\t\t\t\tmeta\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn parsed\r\n\t\t},\r\n\t\tgoto(name) {\r\n\t\t\tthis.$router.push({name})\r\n\t\t}\r\n    },\r\n    mounted() {\r\n\t\t//console.log(this.$router.options.routes)\r\n\t\tthis.flatten(this.$router.options.routes, 'children', (data)=>{\r\n\t\t\tthis.list = this.parseList(data)\r\n\t\t})\r\n    }\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style lang=\"scss\" scoped>\r\n@import '../assets/scss/_variables';\r\n@import '../assets/scss/card-shadow';\r\n\r\n.search-box {\r\n\tmax-width: 300px;\r\n\twidth: 100%;\r\n\r\n\t.search-input {\r\n\t\toverflow: hidden;\r\n\t\ttransition: all .5s;\r\n\t\tbackground: transparent;\r\n\t\t@extend .card-base;\r\n\t\t@extend .card-shadow--small;\r\n\r\n\t}\r\n}\r\n</style>\r\n\r\n<style lang=\"scss\">\r\n@import '../assets/scss/_variables';\r\n\r\n.search-box {\r\n\t.el-autocomplete {\r\n\t\twidth: 100%;\r\n\r\n\t\tinput {\r\n\t\t\tborder-color: transparent;\r\n\t\t\tborder-radius: 0px;\r\n\t\t\tbackground-color: transparent;\r\n\t\t\tline-height: 33px;\r\n\t\t\tborder-bottom-color: transparentize($text-color-accent, .8);\r\n\t\t\ttransition: all .5s;\r\n\t\t\t\r\n\t\t\t&:hover {\r\n\t\t\t\tborder-color: transparent;\r\n\t\t\t}\r\n\t\t\t&:focus {\r\n\t\t\t\tborder-color: $text-color-accent; \r\n\t\t\t}\r\n\t\t\t&:hover, &:active, &:focus {\r\n\t\t\t\tborder-radius: 5px;\r\n\t\t\t\tbackground-color: #fff;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t.el-input__suffix {\r\n\t\t\tcursor: pointer;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n.search-box-popper {\r\n\tmargin-top: 2px !important;\r\n\tborder-radius: 5px;\r\n\toverflow: hidden;\r\n\r\n\t.el-scrollbar__wrap {\r\n\t\tborder: none;\r\n\t\tmax-height: 240px;\r\n\t}\r\n\r\n\t.value {\r\n\t\tcolor: $text-color-accent;\r\n\t\tfont-weight: bold;\r\n\t\tmargin-right: 10px;\r\n\t\ttext-transform: capitalize;\r\n\t}\r\n\t.tags {\r\n\t\topacity: .5;\r\n\t\ttext-transform: lowercase;\r\n\t}\r\n\r\n\t.popper__arrow {\r\n\t\tdisplay: none;\r\n\t}\r\n}\r\n</style>\r\n\r\n"]}]}