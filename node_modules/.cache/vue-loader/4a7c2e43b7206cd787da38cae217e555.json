{"remainingRequest":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/src/views/pages/enterprise/assignee-driver.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/src/views/pages/enterprise/assignee-driver.vue","mtime":1640440454000},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/cache-loader/dist/cjs.js","mtime":1641690455583},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/thread-loader/dist/cjs.js","mtime":1641690456207},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/babel-loader/lib/index.js","mtime":1641690444038},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/cache-loader/dist/cjs.js","mtime":1641690455583},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/vue-loader/lib/index.js","mtime":1641690456354}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Affix from \"@/components/Affix\";\nimport {\n    mapGetters,\n    mapActions\n} from \"vuex\";\nimport * as getter from \"../../../store/getters-types\";\nimport * as action from \"../../../store/action-types\";\nimport * as mutation from '../../../store/mutation-types';\n\nexport default {\n    name: \"ListDriverEnterprise\",\n    data() {\n        return {\n            form: {\n                'page': 1,\n                'identerprise': '',\n                'userid': [],\n            },\n            currentPage: 1,\n            input: \"\",\n            affixEnabled: true,\n            indexT: 1,\n            checks: [],\n            ifChange: false,\n\n        };\n    },\n    components: {\n        Affix\n    },\n    computed: {\n        ...mapGetters({\n            listData: getter.GET_LIST_DRIVER,\n            paginate: getter.GET_PAGINATE_DRIVER,\n            totalDriver: getter.GET_DRIVER_TOTAL,\n            enterprise: getter.ENTERPRISE,\n            button: getter.GET_BUTTON,\n        }),\n        paginator() {\n            return this.paginate;\n        },\n        indexTam() {\n            return this.indexT;\n        },\n        forTotal() {\n            if (this.listData) {\n                return this.totalDriver;\n            }\n        },\n        forPage() {\n            return this.currentPage\n        },\n\n    },\n\n    mounted() {\n        this.$store.dispatch(action.LIST_DRIVER_ASSIGNEE, this.form);\n    },\n\n    methods: {\n        handlePageChange(page) {\n            this.form.page = page;\n            this.ifChange = false;\n            this.$store.dispatch(action.LIST_DRIVER_ASSIGNEE, this.form);\n        },\n\n        Create() {\n            this.$store.commit(mutation.BUTTON_STATUS, true)\n            this.$store.dispatch(action.ASSIGN_DRIVER, this.form);\n        },\n        Back() {\n            this.$router.replace({\n                path: \"/list-driver-enterprise/\" + this.enterprise.identerprise\n            });\n        },\n        Add(e) {\n            const self = this;\n            const self2 = e;\n            const foo = new Set(this.form.userid);\n            if (foo.has(e.users_id) == true) {\n                const index = self.form.userid.indexOf(self2.users_id)\n                self.form.userid.splice(index, 1)\n            } else {\n                self.form.userid.push(self2.users_id)\n            }\n        },\n\n    },\n    created() {\n        this.form.identerprise = this.enterprise.identerprise\n    }\n};\n",{"version":3,"sources":["assignee-driver.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"assignee-driver.vue","sourceRoot":"src/views/pages/enterprise","sourcesContent":["<template>\n<div class=\"page-table scrollable only-y\" id=\"affix-container\">\n    <div class=\"card-base card-shadow--medium bg-white\">\n        <el-row :gutter=\"10\">\n            <el-col :lg=\"4\">\n                <el-button @click=\"Back()\" style=\"width: 100%\">Back</el-button>\n            </el-col>\n            <el-col :offset=\"12\" :lg=\"8\">\n                <el-button :loading=\"button\" @click=\"Create\" style=\"width: 100%\" type=\"success\">Assign Driver To Enterprise</el-button>\n            </el-col>\n        </el-row>\n        <el-row :gutter=\"10\">\n            <el-col :lg=\"24\">\n                <el-table :data=\"listData\" style=\"width: 100%\">\n                    <el-table-column type=\"index\" :index=\"paginate.fromP\" label=\"No\" width=\"100\"></el-table-column>\n                    <el-table-column prop=\"name\" label=\"Name\"></el-table-column>\n                    <el-table-column prop=\"phonenumber\" label=\"Mobile\"></el-table-column>\n                    <el-table-column prop=\"email\" label=\"Email\"></el-table-column>\n                    <el-table-column fixed=\"right\" width=\"60\">\n                        <template slot-scope=\"scope\">\n                            <el-checkbox :checked=\"ifChange\" @change=\"Add(scope.row)\"></el-checkbox>\n                        </template>\n                    </el-table-column>\n                </el-table>\n            </el-col>\n        </el-row>\n        <div align=\"right\">\n            <el-pagination background layout=\"prev, pager, next\" @current-change=\"handlePageChange\" :total=\"forTotal\"></el-pagination>\n        </div>\n    </div>\n</div>\n</template>\n\n<script>\nimport Affix from \"@/components/Affix\";\nimport {\n    mapGetters,\n    mapActions\n} from \"vuex\";\nimport * as getter from \"../../../store/getters-types\";\nimport * as action from \"../../../store/action-types\";\nimport * as mutation from '../../../store/mutation-types';\n\nexport default {\n    name: \"ListDriverEnterprise\",\n    data() {\n        return {\n            form: {\n                'page': 1,\n                'identerprise': '',\n                'userid': [],\n            },\n            currentPage: 1,\n            input: \"\",\n            affixEnabled: true,\n            indexT: 1,\n            checks: [],\n            ifChange: false,\n\n        };\n    },\n    components: {\n        Affix\n    },\n    computed: {\n        ...mapGetters({\n            listData: getter.GET_LIST_DRIVER,\n            paginate: getter.GET_PAGINATE_DRIVER,\n            totalDriver: getter.GET_DRIVER_TOTAL,\n            enterprise: getter.ENTERPRISE,\n            button: getter.GET_BUTTON,\n        }),\n        paginator() {\n            return this.paginate;\n        },\n        indexTam() {\n            return this.indexT;\n        },\n        forTotal() {\n            if (this.listData) {\n                return this.totalDriver;\n            }\n        },\n        forPage() {\n            return this.currentPage\n        },\n\n    },\n\n    mounted() {\n        this.$store.dispatch(action.LIST_DRIVER_ASSIGNEE, this.form);\n    },\n\n    methods: {\n        handlePageChange(page) {\n            this.form.page = page;\n            this.ifChange = false;\n            this.$store.dispatch(action.LIST_DRIVER_ASSIGNEE, this.form);\n        },\n\n        Create() {\n            this.$store.commit(mutation.BUTTON_STATUS, true)\n            this.$store.dispatch(action.ASSIGN_DRIVER, this.form);\n        },\n        Back() {\n            this.$router.replace({\n                path: \"/list-driver-enterprise/\" + this.enterprise.identerprise\n            });\n        },\n        Add(e) {\n            const self = this;\n            const self2 = e;\n            const foo = new Set(this.form.userid);\n            if (foo.has(e.users_id) == true) {\n                const index = self.form.userid.indexOf(self2.users_id)\n                self.form.userid.splice(index, 1)\n            } else {\n                self.form.userid.push(self2.users_id)\n            }\n        },\n\n    },\n    created() {\n        this.form.identerprise = this.enterprise.identerprise\n    }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../../../assets/scss/_variables\";\n\n.card-base {\n    padding: 20px;\n}\n\n.el-row {\n    // display: flex;\n    // align-items: center;\n    // justify-content: center;\n    padding: 0px 10px;\n    margin-bottom: 20px;\n\n    &:last-child {\n        margin-bottom: 0;\n    }\n}\n\n.el-col {\n    border-radius: 5px;\n}\n\n.el-select {\n    width: 100%;\n}\n\n.thumbnail {\n    position: relative;\n    width: 300px;\n    height: 300px;\n    overflow: hidden;\n}\n\n.thumbnail img {\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    height: 100%;\n    width: auto;\n    -webkit-transform: translate(-50%, -50%);\n    -ms-transform: translate(-50%, -50%);\n    transform: translate(-50%, -50%);\n}\n\n.thumbnail img.portrait {\n    width: 100%;\n    height: auto;\n}\n\na {\n    border-style: dotted;\n    border-radius: 15px;\n    padding: 10px;\n    height: 150px;\n}\n\ntd {\n    padding: 10px;\n}\n</style>\n"]}]}