{"remainingRequest":"C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\src\\views\\pages\\enterprise\\list-enterprise.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\src\\views\\pages\\enterprise\\list-enterprise.vue","mtime":1652827779556},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\node_modules\\babel-loader\\lib\\index.js","mtime":1646338474621},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport Affix from '@/components/Affix'\r\nimport {\r\n    mapGetters\r\n} from 'vuex'\r\nimport * as getter from '../../../store/getters-types'\r\nimport * as action from '../../../store/action-types'\r\nimport * as mutation from '../../../store/mutation-types'\r\n\r\nexport default {\r\n    name: 'Table',\r\n    data() {\r\n        return {\r\n            currentPage: 1,\r\n            input: '',\r\n            affixEnabled: true,\r\n            indexT: 1,\r\n            buttonStatus: null,\r\n            offset: null,\r\n            status: 1,\r\n            enterpriseName: '',\r\n            select: [{\r\n                    name: \"ACTIVE\",\r\n                    status: 1,\r\n                },\r\n                {\r\n                    name: \"INACTIVE\",\r\n                    status: 2,\r\n                },\r\n                {\r\n                    name: \"SUSPENDED\",\r\n                    status: 3\r\n                }\r\n            ],\r\n            type: '',\r\n            enterprise_type: [{\r\n                    name: \"REGULER\",\r\n                    status: 1,\r\n                },\r\n                {\r\n                    name: \"PLUS\",\r\n                    status: 2,\r\n                }\r\n            ]\r\n        };\r\n    },\r\n    components: {\r\n        Affix\r\n    },\r\n    computed: {\r\n        ...mapGetters({\r\n            listData: getter.GET_LIST,\r\n            paginate: getter.GET_PAGINATE,\r\n            loading: getter.GET_BUTTON\r\n        }),\r\n        paginato() {\r\n            return this.paginate\r\n        },\r\n        indexTam() {\r\n            return this.indexT\r\n        }\r\n    },\r\n    async mounted() {\r\n        this.$store.commit(mutation.BUTTON_STATUS, true)\r\n        await this.$store.dispatch(action.LIST_DATA_COR, {\r\n            page: 1,\r\n            typeenterprise: this.type,\r\n            enterprise_name: this.enterpriseName,\r\n            status: this.status\r\n        });\r\n        let userProfile = JSON.parse(localStorage.getItem('user')).idrole\r\n        this.buttonStatus = userProfile === 1;\r\n        (userProfile === 1) ? this.offset = 5: this.offset = 9\r\n    },\r\n    methods: {\r\n        newCorp() {\r\n            this.$router.push('new-enterprise')\r\n        },\r\n        handlePageChange(page) {\r\n            this.currentPage = page;\r\n            this.$store.commit(mutation.BUTTON_STATUS, true);\r\n            this.$store.dispatch(action.LIST_DATA_COR, {\r\n                page: this.currentPage,\r\n                typeenterprise: this.type,\r\n                enterprise_name: this.enterpriseName,\r\n                status: this.status\r\n            });\r\n        },\r\n        clearInputButton() {\r\n            this.$store.dispatch(action.LIST_DATA_COR, {\r\n                page: 1,\r\n                typeenterprise: this.type,\r\n                enterprise_name: this.enterpriseName,\r\n                status: this.status\r\n            });\r\n        },\r\n        search() {\r\n            this.$store.dispatch(action.LIST_DATA_COR, this.input.trim())\r\n        },\r\n        async getId(id) {\r\n            await this.$store.dispatch(action.DATA_ID_CORP, id);\r\n            let idvendor = JSON.parse(localStorage.getItem('user')).vendor_idvendor\r\n            let idOlx = process.env.VUE_APP_ID_VENDOR_OLX\r\n            if(idvendor != idOlx){\r\n                this.$router.push({\r\n                    path: '/detail-enterprise/' + id\r\n                })\r\n            } else {\r\n                this.$router.push({\r\n                    path: '/detail-enterprise-md/' + id\r\n                })\r\n            }\r\n        },\r\n        indexMethod(index) {\r\n            return index + this.paginato.fromP;\r\n        },\r\n        nameE() {\r\n            let trimName = this.enterpriseName.trim()\r\n            if (trimName.length > 0) {\r\n                this.$store.commit(mutation.BUTTON_STATUS, true);\r\n                this.$store.dispatch(action.LIST_DATA_COR, {\r\n                    page: 1,\r\n                    typeenterprise: this.type,\r\n                    enterprise_name: trimName,\r\n                    status: this.status\r\n                });\r\n            }\r\n        },\r\n        filterStatus(status) {\r\n            this.$store.commit(mutation.BUTTON_STATUS, true);\r\n            this.status = status;\r\n            this.$store.dispatch(action.LIST_DATA_COR, {\r\n                page: 1,\r\n                typeenterprise: this.type,\r\n                enterprise_name: this.enterpriseName,\r\n                status: this.status\r\n            });\r\n        },\r\n        filterTypeEnterprise(type) {\r\n            this.$store.commit(mutation.BUTTON_STATUS, true);\r\n            this.type = type;\r\n            this.$store.dispatch(action.LIST_DATA_COR, {\r\n                page: 1,\r\n                typeenterprise: this.type,\r\n                enterprise_name: this.enterpriseName,\r\n                status: this.status\r\n            });\r\n\r\n        }\r\n    }\r\n}\r\n",{"version":3,"sources":["list-enterprise.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"list-enterprise.vue","sourceRoot":"src/views/pages/enterprise","sourcesContent":["<template>\r\n<div class=\"page-table scrollable only-y\" id=\"affix-container\">\r\n    <el-row :gutter=\"10\" style=\"margin-bottom: 20px;\">\r\n        <el-col :span=\"4\">\r\n            <div v-if=\"buttonStatus\">\r\n                <el-button style=\"width: 100%; background-color:#D50000; border-color:#D50000\" @click=\"newCorp\" type=\"primary\">\r\n                    New Enterprise\r\n                </el-button>\r\n            </div>\r\n        </el-col>\r\n        <el-col :span=\"5\" :offset=\"offset\">\r\n            <el-input style=\"width: 100%\" placeholder=\"Search\" prefix-icon=\"el-icon-search\" clearable @keyup.native=\"nameE\" @clear=\"clearInputButton\" v-model=\"enterpriseName\">\r\n            </el-input>\r\n        </el-col>\r\n        <el-col :span=\"6\">\r\n            <el-select style=\"width: 100%\" @change=\"filterTypeEnterprise\" v-model=\"type\" filterable placeholder=\"Select Enterprise Type\">\r\n                <el-option v-for=\"item in enterprise_type\" :key=\"item.status\" :label=\"item.name\" :value=\"item.status\"></el-option>\r\n            </el-select>\r\n        </el-col>\r\n        <el-col :span=\"4\">\r\n            <el-select style=\"width: 100%\" @change=\"filterStatus\" v-model=\"status\" filterable placeholder=\"Select\">\r\n                <el-option v-for=\"item in select\" :key=\"item.status\" :label=\"item.name\" :value=\"item.status\"></el-option>\r\n            </el-select>\r\n        </el-col>\r\n    </el-row>\r\n    <p class=\"font-weight-600 mt-40\">&nbsp;&nbsp; PARTNER</p>\r\n    <el-row :gutter=\"20\">\r\n        <div v-for=\"item in listData\" v-bind:key=\"item.idententerprise\">\r\n            <el-col :span=\"8\">\r\n                <el-popover placement=\"top-left\" :title=\"item.name\" width=\"180\" trigger=\"hover\">\r\n                    <div class=\"hoverhand\" slot=\"reference\">\r\n                        <div class=\"card-base card-shadow--medium mb-30 widget small-widget\" @click=\"getId(item.identerprise)\">\r\n                            <el-row>\r\n                                <el-col :offset=\"8\" :span=\"8\">\r\n                                    <div v-if='item.image_logo == \"\"'>\r\n                                        <img src=\"../../../../src/assets/images/Oper_Logo_Landscape_Red.png\" class=\"image\">\r\n                                    </div>\r\n                                    <div v-else>\r\n                                        <img :src=\"item.image_logo\" class=\"image\">\r\n                                    </div>\r\n                                </el-col>\r\n                            </el-row>\r\n                        </div>\r\n                    </div>\r\n                </el-popover>\r\n            </el-col>\r\n        </div>\r\n    </el-row>\r\n    <el-row>\r\n        <h1></h1>\r\n        <el-col :span=\"24\">\r\n            <div class=\"grid-content\">\r\n                <el-pagination background layout=\"prev, pager, next\" @current-change=\"handlePageChange\" :total=\"paginato.totalP\">\r\n                </el-pagination>\r\n            </div>\r\n        </el-col>\r\n    </el-row>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport Affix from '@/components/Affix'\r\nimport {\r\n    mapGetters\r\n} from 'vuex'\r\nimport * as getter from '../../../store/getters-types'\r\nimport * as action from '../../../store/action-types'\r\nimport * as mutation from '../../../store/mutation-types'\r\n\r\nexport default {\r\n    name: 'Table',\r\n    data() {\r\n        return {\r\n            currentPage: 1,\r\n            input: '',\r\n            affixEnabled: true,\r\n            indexT: 1,\r\n            buttonStatus: null,\r\n            offset: null,\r\n            status: 1,\r\n            enterpriseName: '',\r\n            select: [{\r\n                    name: \"ACTIVE\",\r\n                    status: 1,\r\n                },\r\n                {\r\n                    name: \"INACTIVE\",\r\n                    status: 2,\r\n                },\r\n                {\r\n                    name: \"SUSPENDED\",\r\n                    status: 3\r\n                }\r\n            ],\r\n            type: '',\r\n            enterprise_type: [{\r\n                    name: \"REGULER\",\r\n                    status: 1,\r\n                },\r\n                {\r\n                    name: \"PLUS\",\r\n                    status: 2,\r\n                }\r\n            ]\r\n        };\r\n    },\r\n    components: {\r\n        Affix\r\n    },\r\n    computed: {\r\n        ...mapGetters({\r\n            listData: getter.GET_LIST,\r\n            paginate: getter.GET_PAGINATE,\r\n            loading: getter.GET_BUTTON\r\n        }),\r\n        paginato() {\r\n            return this.paginate\r\n        },\r\n        indexTam() {\r\n            return this.indexT\r\n        }\r\n    },\r\n    async mounted() {\r\n        this.$store.commit(mutation.BUTTON_STATUS, true)\r\n        await this.$store.dispatch(action.LIST_DATA_COR, {\r\n            page: 1,\r\n            typeenterprise: this.type,\r\n            enterprise_name: this.enterpriseName,\r\n            status: this.status\r\n        });\r\n        let userProfile = JSON.parse(localStorage.getItem('user')).idrole\r\n        this.buttonStatus = userProfile === 1;\r\n        (userProfile === 1) ? this.offset = 5: this.offset = 9\r\n    },\r\n    methods: {\r\n        newCorp() {\r\n            this.$router.push('new-enterprise')\r\n        },\r\n        handlePageChange(page) {\r\n            this.currentPage = page;\r\n            this.$store.commit(mutation.BUTTON_STATUS, true);\r\n            this.$store.dispatch(action.LIST_DATA_COR, {\r\n                page: this.currentPage,\r\n                typeenterprise: this.type,\r\n                enterprise_name: this.enterpriseName,\r\n                status: this.status\r\n            });\r\n        },\r\n        clearInputButton() {\r\n            this.$store.dispatch(action.LIST_DATA_COR, {\r\n                page: 1,\r\n                typeenterprise: this.type,\r\n                enterprise_name: this.enterpriseName,\r\n                status: this.status\r\n            });\r\n        },\r\n        search() {\r\n            this.$store.dispatch(action.LIST_DATA_COR, this.input.trim())\r\n        },\r\n        async getId(id) {\r\n            await this.$store.dispatch(action.DATA_ID_CORP, id);\r\n            let idvendor = JSON.parse(localStorage.getItem('user')).vendor_idvendor\r\n            let idOlx = process.env.VUE_APP_ID_VENDOR_OLX\r\n            if(idvendor != idOlx){\r\n                this.$router.push({\r\n                    path: '/detail-enterprise/' + id\r\n                })\r\n            } else {\r\n                this.$router.push({\r\n                    path: '/detail-enterprise-md/' + id\r\n                })\r\n            }\r\n        },\r\n        indexMethod(index) {\r\n            return index + this.paginato.fromP;\r\n        },\r\n        nameE() {\r\n            let trimName = this.enterpriseName.trim()\r\n            if (trimName.length > 0) {\r\n                this.$store.commit(mutation.BUTTON_STATUS, true);\r\n                this.$store.dispatch(action.LIST_DATA_COR, {\r\n                    page: 1,\r\n                    typeenterprise: this.type,\r\n                    enterprise_name: trimName,\r\n                    status: this.status\r\n                });\r\n            }\r\n        },\r\n        filterStatus(status) {\r\n            this.$store.commit(mutation.BUTTON_STATUS, true);\r\n            this.status = status;\r\n            this.$store.dispatch(action.LIST_DATA_COR, {\r\n                page: 1,\r\n                typeenterprise: this.type,\r\n                enterprise_name: this.enterpriseName,\r\n                status: this.status\r\n            });\r\n        },\r\n        filterTypeEnterprise(type) {\r\n            this.$store.commit(mutation.BUTTON_STATUS, true);\r\n            this.type = type;\r\n            this.$store.dispatch(action.LIST_DATA_COR, {\r\n                page: 1,\r\n                typeenterprise: this.type,\r\n                enterprise_name: this.enterpriseName,\r\n                status: this.status\r\n            });\r\n\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.table-box {\r\n    overflow: auto;\r\n}\r\n\r\n.el-pagination {\r\n    padding-top: 20px;\r\n}\r\n\r\n/*.el-input {*/\r\n/*width: 300px !important;*/\r\n/*}*/\r\n\r\n.card-base {\r\n    padding: 20px;\r\n}\r\n\r\n.el-row {\r\n    padding: 0px 10px;\r\n\r\n    &:last-child {\r\n        margin-bottom: 0;\r\n    }\r\n}\r\n\r\n.el-col {\r\n    border-radius: 5px;\r\n}\r\n\r\n.image {\r\n    object-fit: scale-down;\r\n    width: 100%;\r\n    height: 100px;\r\n    background-size: cover;\r\n    background-repeat: no-repeat;\r\n    background-position: 50% 50%;\r\n}\r\n\r\n.hoverhand:hover {\r\n    cursor: pointer;\r\n}\r\n</style>\r\n"]}]}