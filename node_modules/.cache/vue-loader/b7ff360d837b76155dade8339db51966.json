{"remainingRequest":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/src/views/pages/enterprise/edit-location-enterprise.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/src/views/pages/enterprise/edit-location-enterprise.vue","mtime":1640440454984},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/babel-loader/lib/index.js","mtime":1640440446305},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/cache-loader/dist/cjs.js","mtime":1640440446558},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/vue-loader/lib/index.js","mtime":1640440454211}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport router from \"../../../router\";\nimport moment from \"moment\";\nimport Affix from \"@/components/Affix\";\nimport {\n    mapGetters,\n    mapActions,\n    mapState\n} from \"vuex\";\nimport * as mutation from '../../../store/mutation-types';\nimport * as getter from \"../../../store/getters-types\";\nimport * as action from \"../../../store/action-types\";\nexport default {\n    name: \"NewLocation\",\n    data() {\n        return {\n            currentPlace: null,\n            markers: {\n                lat: -6.193619252954559,\n                lng: 106.76330885229345,\n            },\n            center: {\n                lat: -6.193619252954559,\n                lng: 106.76330885229345,\n            },\n            form: {\n                name: \"\",\n                birthdate: \"\",\n                address: \"\",\n                longitude: \"\",\n                latitude: \"\",\n                identerprise: \"\",\n            },\n            payload: {\n                identerprise: null,\n                page: 1,\n            },\n            rules: {\n                name: [{\n                    required: true,\n                    message: \"Location Name is required!\",\n                    trigger: \"blur\"\n                }],\n                latitude: [{\n                    required: true,\n                    message: \"Location Latitude is required!\",\n                    trigger: \"blur\"\n                }],\n                longitude: [{\n                    required: true,\n                    message: \"Location Longitude is required!\",\n                    trigger: \"blur\"\n                }],\n                address: [{\n                    required: true,\n                    message: \"Address is required!\",\n                    trigger: \"blur\"\n                }],\n            }\n        };\n    },\n    methods: {\n        onSubmit(formName) {\n            let obj = {\n                name: this.form.name,\n                birthdate: this.form.birthdate,\n                address: this.form.address,\n                longitude: this.form.longitude,\n                latitude: this.form.latitude,\n                identerprise: this.form.identerprise,\n            };\n            this.$refs[formName].validate(valid => {\n                if (valid) {\n                    this.$store.commit(mutation.BUTTON_STATUS, true)\n                    this.$store.dispatch(action.UPDATE_DATA_LOCATION, this.form);\n                } else {\n                    return false;\n                }\n            });\n        },\n        dialogTrack() {\n            this.$store.commit(mutation.SET_DIALOG_VISIBLE, true)\n        },\n        updateCoordinates(location) {\n            const geocoder = new google.maps.Geocoder()\n            geocoder.geocode({\n                'latLng': location.latLng\n            }, (result, status) => {\n                if (status === google.maps.GeocoderStatus.OK) {\n                    this.markers = {\n                        lat: location.latLng.lat(),\n                        lng: location.latLng.lng(),\n                    };\n                    this.form.latitude = location.latLng.lat()\n                    this.form.longitude = location.latLng.lng()\n                    this.form.address = result[0].formatted_address\n                }\n            })\n        },\n        setPlace(place) {\n          if (place) {\n            this.updateCoordinates(place.geometry.location)\n\n            this.markers = {\n              lat: place.geometry.location.lat(),\n              lng: place.geometry.location.lng(),\n            };\n\n            this.center = {\n              lat: place.geometry.location.lat(),\n              lng: place.geometry.location.lng(),\n            };\n\n            this.form.latitude = place.geometry.location.lat()\n            this.form.longitude = place.geometry.location.lng()\n            this.form.address = place.formatted_address\n          }\n        },\n        Cancel() {\n            this.$store.dispatch(action.LIST_LOCATION, this.payload);\n            this.$router.replace({\n                path: \"/location-enterprise/\" + this.enterprise.identerprise\n            });\n        },\n        closeDialog() {\n            this.$store.commit(mutation.SET_DIALOG_VISIBLE, false)\n        },\n        handleClose(done) {\n            this.$confirm('Are you sure to close this map?')\n                .then(_ => {\n                    this.$store.commit(mutation.SET_DIALOG_VISIBLE, false)\n                })\n                .catch(_ => {});\n        }\n    },\n    computed: {\n        ...mapGetters({\n            enterprise: getter.ENTERPRISE,\n            button: getter.GET_BUTTON,\n            dialogV: getter.GET_DIALOG_VISIBLE,\n            location: getter.GET_LOCATION_DETAIL\n        }),\n    },\n    async created() {\n        await this.location\n        this.form.identerprise = this.enterprise.identerprise;\n        this.form.name = this.location.name;\n        this.form.address = this.location.address;\n        this.form.latitude = this.location.latitude;\n        this.form.longitude = this.location.longitude;\n        this.form.idplaces = this.location.idplaces;\n        this.markers.lat = parseFloat(this.location.latitude);\n        this.markers.lng = parseFloat(this.location.longitude);\n        this.center.lat = parseFloat(this.location.latitude);\n        this.center.lng = parseFloat(this.location.longitude);\n    },\n    // mounted(){\n    //     console.log(this.$route.params);\n    //     this.$store.dispatch(action.DETAIL_LOCATION, this.$route.params.id);\n    //     console.log(this.location);\n    // },\n    // watch:{\n    //     locationdetail(newValue, oldValue){\n    //         console.log('cus', newValue);\n    //     }\n    // }\n};\n",{"version":3,"sources":["edit-location-enterprise.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"edit-location-enterprise.vue","sourceRoot":"src/views/pages/enterprise","sourcesContent":["<template>\n<div class=\"page-table scrollable only-y\" id=\"affix-container\">\n    <div class=\"card-base card-shadow--medium bg-white\">\n        <el-form ref=\"form\" :rules=\"rules\" :model=\"form\">\n            <el-row :gutter=\"20\">\n                <el-col :lg=\"12\">\n                    <el-form-item prop=\"name\">\n                        <el-input placeholder=\"Location Name\" v-model=\"form.name\"></el-input>\n                    </el-form-item>\n                </el-col>\n                <el-col :lg=\"12\">\n                    <el-form-item prop=\"address\">\n                        <el-input placeholder=\"Address\" disabled v-model=\"form.address\"></el-input>\n                    </el-form-item>\n                </el-col>\n            </el-row>\n            <el-row :gutter=\"20\">\n                <el-col :lg=\"12\">\n                    <el-form-item prop=\"latitude\">\n                        <el-input placeholder=\"Latitude\"  disabled v-model=\"form.latitude\"></el-input>\n                    </el-form-item>\n                </el-col>\n                <el-col :lg=\"10\">\n                    <el-form-item prop=\"longitude\">\n                        <el-input placeholder=\"Longitude\" disabled v-model=\"form.longitude\"></el-input>\n                    </el-form-item>\n                </el-col>\n                <el-col :span=\"2\">\n                    <el-button type=\"primary\" @click=\"dialogTrack\" icon=\"el-icon-location\" circle></el-button>\n                </el-col>\n            </el-row>\n        </el-form>\n        <el-row>\n            <el-col :offset=\"20\" :lg=\"2\">\n                <el-button :loading=\"button\" @click=\"onSubmit('form')\" type=\"success\">Save</el-button>\n            </el-col>\n            <el-col :lg=\"2\">\n                <el-button @click=\"Cancel()\" type=\"succes\">Cancel</el-button>\n            </el-col>\n        </el-row>\n    </div>\n    <el-dialog :visible.sync=\"dialogV\" :before-close=\"handleClose\" width=\"70%\">\n        <div class=\"card-base card-shadow--medium\">\n            <div class=\"gmap-location-search-bar\">\n              <gmap-autocomplete @place_changed=\"setPlace\"></gmap-autocomplete>\n            </div>\n            <gmap-map ref=\"map\" :center=\"center\" :zoom=\"12\" :options=\"{gestureHandling:'cooperative'}\" map-type-id=\"roadmap\" style=\"width: 100%; height: 500px\">\n                <GmapMarker @drag=\"updateCoordinates\" :draggable=\"true\" :position=\"markers\" label=\"S\" />\n            </gmap-map>\n        </div>\n        <el-button @click=\"closeDialog\" class=\"mt-10\">Save</el-button>\n    </el-dialog>\n</div>\n</template>\n\n<script>\nimport router from \"../../../router\";\nimport moment from \"moment\";\nimport Affix from \"@/components/Affix\";\nimport {\n    mapGetters,\n    mapActions,\n    mapState\n} from \"vuex\";\nimport * as mutation from '../../../store/mutation-types';\nimport * as getter from \"../../../store/getters-types\";\nimport * as action from \"../../../store/action-types\";\nexport default {\n    name: \"NewLocation\",\n    data() {\n        return {\n            currentPlace: null,\n            markers: {\n                lat: -6.193619252954559,\n                lng: 106.76330885229345,\n            },\n            center: {\n                lat: -6.193619252954559,\n                lng: 106.76330885229345,\n            },\n            form: {\n                name: \"\",\n                birthdate: \"\",\n                address: \"\",\n                longitude: \"\",\n                latitude: \"\",\n                identerprise: \"\",\n            },\n            payload: {\n                identerprise: null,\n                page: 1,\n            },\n            rules: {\n                name: [{\n                    required: true,\n                    message: \"Location Name is required!\",\n                    trigger: \"blur\"\n                }],\n                latitude: [{\n                    required: true,\n                    message: \"Location Latitude is required!\",\n                    trigger: \"blur\"\n                }],\n                longitude: [{\n                    required: true,\n                    message: \"Location Longitude is required!\",\n                    trigger: \"blur\"\n                }],\n                address: [{\n                    required: true,\n                    message: \"Address is required!\",\n                    trigger: \"blur\"\n                }],\n            }\n        };\n    },\n    methods: {\n        onSubmit(formName) {\n            let obj = {\n                name: this.form.name,\n                birthdate: this.form.birthdate,\n                address: this.form.address,\n                longitude: this.form.longitude,\n                latitude: this.form.latitude,\n                identerprise: this.form.identerprise,\n            };\n            this.$refs[formName].validate(valid => {\n                if (valid) {\n                    this.$store.commit(mutation.BUTTON_STATUS, true)\n                    this.$store.dispatch(action.UPDATE_DATA_LOCATION, this.form);\n                } else {\n                    return false;\n                }\n            });\n        },\n        dialogTrack() {\n            this.$store.commit(mutation.SET_DIALOG_VISIBLE, true)\n        },\n        updateCoordinates(location) {\n            const geocoder = new google.maps.Geocoder()\n            geocoder.geocode({\n                'latLng': location.latLng\n            }, (result, status) => {\n                if (status === google.maps.GeocoderStatus.OK) {\n                    this.markers = {\n                        lat: location.latLng.lat(),\n                        lng: location.latLng.lng(),\n                    };\n                    this.form.latitude = location.latLng.lat()\n                    this.form.longitude = location.latLng.lng()\n                    this.form.address = result[0].formatted_address\n                }\n            })\n        },\n        setPlace(place) {\n          if (place) {\n            this.updateCoordinates(place.geometry.location)\n\n            this.markers = {\n              lat: place.geometry.location.lat(),\n              lng: place.geometry.location.lng(),\n            };\n\n            this.center = {\n              lat: place.geometry.location.lat(),\n              lng: place.geometry.location.lng(),\n            };\n\n            this.form.latitude = place.geometry.location.lat()\n            this.form.longitude = place.geometry.location.lng()\n            this.form.address = place.formatted_address\n          }\n        },\n        Cancel() {\n            this.$store.dispatch(action.LIST_LOCATION, this.payload);\n            this.$router.replace({\n                path: \"/location-enterprise/\" + this.enterprise.identerprise\n            });\n        },\n        closeDialog() {\n            this.$store.commit(mutation.SET_DIALOG_VISIBLE, false)\n        },\n        handleClose(done) {\n            this.$confirm('Are you sure to close this map?')\n                .then(_ => {\n                    this.$store.commit(mutation.SET_DIALOG_VISIBLE, false)\n                })\n                .catch(_ => {});\n        }\n    },\n    computed: {\n        ...mapGetters({\n            enterprise: getter.ENTERPRISE,\n            button: getter.GET_BUTTON,\n            dialogV: getter.GET_DIALOG_VISIBLE,\n            location: getter.GET_LOCATION_DETAIL\n        }),\n    },\n    async created() {\n        await this.location\n        this.form.identerprise = this.enterprise.identerprise;\n        this.form.name = this.location.name;\n        this.form.address = this.location.address;\n        this.form.latitude = this.location.latitude;\n        this.form.longitude = this.location.longitude;\n        this.form.idplaces = this.location.idplaces;\n        this.markers.lat = parseFloat(this.location.latitude);\n        this.markers.lng = parseFloat(this.location.longitude);\n        this.center.lat = parseFloat(this.location.latitude);\n        this.center.lng = parseFloat(this.location.longitude);\n    },\n    // mounted(){\n    //     console.log(this.$route.params);\n    //     this.$store.dispatch(action.DETAIL_LOCATION, this.$route.params.id);\n    //     console.log(this.location);\n    // },\n    // watch:{\n    //     locationdetail(newValue, oldValue){\n    //         console.log('cus', newValue);\n    //     }\n    // }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../../../assets/scss/_variables\";\n\n.card-base {\n    padding: 20px;\n}\n\n.gmap-location-search-bar {\n  margin: 0 0 20px 0;\n}\n\n.el-row {\n    // display: flex;\n    // align-items: center;\n    // justify-content: center;\n    padding: 0px 10px;\n    margin-bottom: 10px;\n\n    &:last-child {\n        margin-bottom: 0;\n    }\n}\n\n.el-col {\n    border-radius: 5px;\n}\n\n.el-radio {\n    margin: 0 160px 0 10px;\n}\n\n.el-select {\n    width: 100%;\n}\n\n.thumbnail {\n    position: relative;\n    width: 300px;\n    height: 300px;\n    overflow: hidden;\n}\n\n.thumbnail img {\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    height: 100%;\n    width: auto;\n    -webkit-transform: translate(-50%, -50%);\n    -ms-transform: translate(-50%, -50%);\n    transform: translate(-50%, -50%);\n}\n\n.thumbnail img.portrait {\n    width: 100%;\n    height: auto;\n}\n\na {\n    border-style: dotted;\n    border-radius: 15px;\n    padding: 10px;\n    height: 150px;\n}\n\ntd {\n    padding: 10px;\n}\n\n\n.pac-target-input {\n    -webkit-appearance: none;\n    background-color: #FFFFFF;\n    background-image: none;\n    border-radius: 4px;\n    border: 1px solid #DCDFE6;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n    color: #606266;\n    display: inline-block;\n    font-size: inherit;\n    height: 40px;\n    line-height: 40px;\n    outline: none;\n    padding: 0 15px;\n    -webkit-transition: border-color 0.2s cubic-bezier(0.645, 0.045, 0.355, 1);\n    transition: border-color 0.2s cubic-bezier(0.645, 0.045, 0.355, 1);\n    width: 100%;\n}\n</style>\n"]}]}