{"remainingRequest":"C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\src\\views\\pages\\faq\\edit-faq.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\src\\views\\pages\\faq\\edit-faq.vue","mtime":1647032353994},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\node_modules\\babel-loader\\lib\\index.js","mtime":1646338474621},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport router from \"../../../router\";\r\nimport moment from \"moment\";\r\nimport Affix from \"@/components/Affix\";\r\nimport {\r\n    mapGetters,\r\n    mapActions\r\n} from \"vuex\";\r\nimport * as mutation from '../../../store/mutation-types';\r\nimport * as getter from \"../../../store/getters-types\";\r\nimport * as action from \"../../../store/action-types\";\r\nexport default {\r\n    name: \"EditLocation\",\r\n    data() {\r\n        return {\r\n            form: {\r\n                question: \"\",\r\n                answer: \"\",\r\n                idrole: \"\",\r\n                idfaq: \"\",\r\n                page: 1,\r\n            },\r\n            select: [\r\n                {\r\n                    idrole: 2,\r\n                    name: \"Vendor\"\r\n                },\r\n                {\r\n                    idrole: 3,\r\n                    name: \"Enterprise\"\r\n                },\r\n            ],\r\n            rules: {\r\n                question: [{\r\n                    required: true,\r\n                    message: \"Question is required!\",\r\n                    trigger: \"blur\"\r\n                }],\r\n                answer: [{\r\n                    required: true,\r\n                    message: \"Answer is required!\",\r\n                    trigger: \"blur\"\r\n                }],\r\n                role: [{\r\n                    required: true,\r\n                    message: \"Role is required!\",\r\n                    trigger: \"blur\"\r\n                }],\r\n            },\r\n            editor: {\r\n                placeholder: 'Put an answer here..',\r\n                theme: 'snow',\r\n                modules: {\r\n                    toolbar: [\r\n                    ['bold', 'italic', 'underline', 'strike'],\r\n                    ['blockquote', 'code-block'],\r\n                    [{ 'header': 1 }, { 'header': 2 }],\r\n                    [{ 'list': 'ordered' }, { 'list': 'bullet' }],\r\n                    [{ 'script': 'sub' }, { 'script': 'super' }],\r\n                    [{ 'indent': '-1' }, { 'indent': '+1' }],\r\n                    [{ 'direction': 'rtl' }],\r\n                    [{ 'size': ['small', false, 'large', 'huge'] }],\r\n                    [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\r\n                    [{ 'font': [] }],\r\n                    [{ 'color': [] }, { 'background': [] }],\r\n                    [{ 'align': [] }],\r\n                    ['clean'],\r\n                    ['link']\r\n                    ],\r\n                }\r\n            },\r\n        };\r\n    },\r\n    methods: {\r\n         onSubmit(formName) {\r\n            let obj = {\r\n                question: this.form.question,\r\n                idrole: this.form.idrole,\r\n                answer: this.form.answer,\r\n            };\r\n            this.$refs[formName].validate(valid => {\r\n                if (valid) {\r\n                    this.$store.commit(mutation.BUTTON_STATUS, true)\r\n                    this.$store.dispatch(action.UPDATE_FAQ, this.form);\r\n                } else {\r\n                    return false;\r\n                }\r\n            });\r\n        },\r\n        Cancel() {\r\n            this.$router.push({\r\n                path: \"/manage-faq\"\r\n            });\r\n        }\r\n    },\r\n     computed: {\r\n        ...mapGetters({\r\n            content: getter.GET_FAQ_DETAIL\r\n        }),\r\n    },\r\n    async created() {\r\n        this.form.idrole = this.content.idrole\r\n        this.form.question = this.content.question;\r\n        this.form.answer = this.content.answer;\r\n        this.form.idfaq = this.content.id;\r\n    },\r\n};\r\n",{"version":3,"sources":["edit-faq.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"edit-faq.vue","sourceRoot":"src/views/pages/faq","sourcesContent":["<template>\r\n<div class=\"page-quill scrollable only-y\" id=\"affix-container\">\r\n    <div class=\"card-base card-shadow--medium bg-white\">\r\n        <el-form ref=\"form\" :rules=\"rules\" :model=\"form\">\r\n            <el-row :gutter=\"10\">\r\n                <el-col :lg=\"9\">\r\n                    <el-select v-model=\"form.idrole\" filterable placeholder=\"Role\">\r\n                        <el-option v-for=\"item in select\" :key=\"item.idrole\" :label=\"item.name\" :value=\"item.idrole\"></el-option>\r\n                    </el-select>\r\n                </el-col>\r\n            </el-row>\r\n            <el-row :gutter=\"20\">\r\n                <el-col :lg=\"24\">\r\n                    <el-form-item prop=\"question\">\r\n                        <el-input placeholder=\"Question\" v-model=\"form.question\"></el-input>\r\n                    </el-form-item>\r\n                </el-col>\r\n            </el-row>\r\n            <el-row :gutter=\"20\">\r\n                <el-col :lg=\"24\">\r\n                    <div class=\"card-base card-shadow--medium\" style=\"min-height: 300px;\">\r\n                        <quill-editor :options=\"editor\" v-model=\"form.answer\">\r\n                        </quill-editor>\r\n                    </div>\r\n                </el-col>\r\n            </el-row>\r\n        </el-form>\r\n        <el-row>\r\n            <el-col :offset=\"20\" :lg=\"2\">\r\n                <el-button @click=\"onSubmit('form')\" type=\"success\">Save</el-button>\r\n            </el-col>\r\n            <el-col :lg=\"2\">\r\n                <el-button @click=\"Cancel()\" type=\"succes\">Cancel</el-button>\r\n            </el-col>\r\n        </el-row>\r\n    </div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport router from \"../../../router\";\r\nimport moment from \"moment\";\r\nimport Affix from \"@/components/Affix\";\r\nimport {\r\n    mapGetters,\r\n    mapActions\r\n} from \"vuex\";\r\nimport * as mutation from '../../../store/mutation-types';\r\nimport * as getter from \"../../../store/getters-types\";\r\nimport * as action from \"../../../store/action-types\";\r\nexport default {\r\n    name: \"EditLocation\",\r\n    data() {\r\n        return {\r\n            form: {\r\n                question: \"\",\r\n                answer: \"\",\r\n                idrole: \"\",\r\n                idfaq: \"\",\r\n                page: 1,\r\n            },\r\n            select: [\r\n                {\r\n                    idrole: 2,\r\n                    name: \"Vendor\"\r\n                },\r\n                {\r\n                    idrole: 3,\r\n                    name: \"Enterprise\"\r\n                },\r\n            ],\r\n            rules: {\r\n                question: [{\r\n                    required: true,\r\n                    message: \"Question is required!\",\r\n                    trigger: \"blur\"\r\n                }],\r\n                answer: [{\r\n                    required: true,\r\n                    message: \"Answer is required!\",\r\n                    trigger: \"blur\"\r\n                }],\r\n                role: [{\r\n                    required: true,\r\n                    message: \"Role is required!\",\r\n                    trigger: \"blur\"\r\n                }],\r\n            },\r\n            editor: {\r\n                placeholder: 'Put an answer here..',\r\n                theme: 'snow',\r\n                modules: {\r\n                    toolbar: [\r\n                    ['bold', 'italic', 'underline', 'strike'],\r\n                    ['blockquote', 'code-block'],\r\n                    [{ 'header': 1 }, { 'header': 2 }],\r\n                    [{ 'list': 'ordered' }, { 'list': 'bullet' }],\r\n                    [{ 'script': 'sub' }, { 'script': 'super' }],\r\n                    [{ 'indent': '-1' }, { 'indent': '+1' }],\r\n                    [{ 'direction': 'rtl' }],\r\n                    [{ 'size': ['small', false, 'large', 'huge'] }],\r\n                    [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\r\n                    [{ 'font': [] }],\r\n                    [{ 'color': [] }, { 'background': [] }],\r\n                    [{ 'align': [] }],\r\n                    ['clean'],\r\n                    ['link']\r\n                    ],\r\n                }\r\n            },\r\n        };\r\n    },\r\n    methods: {\r\n         onSubmit(formName) {\r\n            let obj = {\r\n                question: this.form.question,\r\n                idrole: this.form.idrole,\r\n                answer: this.form.answer,\r\n            };\r\n            this.$refs[formName].validate(valid => {\r\n                if (valid) {\r\n                    this.$store.commit(mutation.BUTTON_STATUS, true)\r\n                    this.$store.dispatch(action.UPDATE_FAQ, this.form);\r\n                } else {\r\n                    return false;\r\n                }\r\n            });\r\n        },\r\n        Cancel() {\r\n            this.$router.push({\r\n                path: \"/manage-faq\"\r\n            });\r\n        }\r\n    },\r\n     computed: {\r\n        ...mapGetters({\r\n            content: getter.GET_FAQ_DETAIL\r\n        }),\r\n    },\r\n    async created() {\r\n        this.form.idrole = this.content.idrole\r\n        this.form.question = this.content.question;\r\n        this.form.answer = this.content.answer;\r\n        this.form.idfaq = this.content.id;\r\n    },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import \"../../../assets/scss/_variables\";\r\n\r\n.card-base {\r\n    padding: 20px;\r\n}\r\n\r\n.el-row {\r\n    // display: flex;\r\n    // align-items: center;\r\n    // justify-content: center;\r\n    padding: 0px 10px;\r\n    margin-bottom: 10px;\r\n\r\n    &:last-child {\r\n        margin-bottom: 20px;\r\n    }\r\n}\r\n\r\n.el-col {\r\n    border-radius: 5px;\r\n}\r\n\r\n.el-radio {\r\n    margin: 0 160px 0 10px;\r\n}\r\n\r\n.el-select {\r\n    width: 100%;\r\n}\r\n\r\n.page-quill {\r\n    .card-base {\r\n        box-sizing: border-box;\r\n\r\n        .quill-editor {\r\n            .ql-toolbar.ql-snow {\r\n                border: none;\r\n                background: lighten($background-color, 2%);\r\n                border-bottom: 1px solid $background-color;\r\n            }\r\n\r\n            .ql-container.ql-snow {\r\n                border: none;\r\n            }\r\n        }\r\n\r\n        &.t-bubble {\r\n            overflow: inherit;\r\n        }\r\n    }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n    .page-quill {\r\n        .card-base {\r\n            &.t-bubble {\r\n                padding: 40px 20px;\r\n            }\r\n        }\r\n    }\r\n}\r\n</style>\r\n"]}]}