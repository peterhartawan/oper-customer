{"remainingRequest":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\src\\components\\enterprise\\popup_admin.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\src\\components\\enterprise\\popup_admin.vue","mtime":1644413760063},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport {\r\n    mapGetters\r\n} from 'vuex'\r\nimport router from '../../router'\r\nimport * as getter from '../../store/getters-types'\r\nimport * as action from '../../store/action-types'\r\nimport Swal from 'sweetalert2'\r\nimport * as mutation from '../../store/mutation-types'\r\n\r\nexport default {\r\n    props: ['identerprise', 'picture'],\r\n    data() {\r\n        return {\r\n            currentPage: 1,\r\n            dialogTableVisible: false,\r\n            form: {\r\n                search: ''\r\n            }\r\n        };\r\n    },\r\n    computed: {\r\n        ...mapGetters({\r\n            paginate: getter.GET_PAGINATE_DISPATCHER,\r\n            enterprise: getter.ENTERPRISE,\r\n            loading: getter.GET_BUTTON,\r\n        }),\r\n        paginato() {\r\n            return this.paginate\r\n        },\r\n        indexTam() {\r\n            return this.indexT\r\n        },\r\n        admin() {\r\n            let idrole = JSON.parse(localStorage.getItem('user')).idrole\r\n            if (idrole === 1) {\r\n                return true\r\n            } else {\r\n                return false\r\n            }\r\n        }\r\n    },\r\n    methods: {\r\n        async handlePageChange(page) {\r\n            this.currentPage = page;\r\n            let obj = {\r\n                role: 4,\r\n                page: this.currentPage\r\n            };\r\n            this.$store.commit(mutation.BUTTON_STATUS, true)\r\n            await this.$store.dispatch(action.LIST_DISPATCHER_ROLE, obj);\r\n        },\r\n        addButton() {\r\n            this.$store.commit(mutation.BUTTON_STATUS, false)\r\n            router.replace(`/new-admin-enterprise/${this.enterprise.identerprise}`)\r\n        },\r\n        editAdmin(e) {\r\n            this.$store.commit(mutation.BUTTON_STATUS, false)\r\n            this.$store.commit(mutation.SET_DATA_ADMIN_ENTERPRISE, e);\r\n            this.$store.commit(mutation.SET_ID_ENTERPRISE, this.enterprise.identerprise)\r\n            router.replace('/edit-admin')\r\n        },\r\n        indexMethod(index) {\r\n            return index + this.paginato.fromP;\r\n        },\r\n        buttonSearch() {\r\n            this.$store.dispatch(action.SEARCH_DISPATCHER, this.form.search)\r\n        },\r\n        async getId(id) {\r\n            this.dialogTableVisible = false\r\n            let obj = {\r\n                id: id.id,\r\n                identerprise: this.identerprise\r\n            }\r\n            Swal.fire({\r\n                title: 'Are you sure?',\r\n                text: \"You want to assign to dispatcher!\",\r\n                type: 'warning',\r\n                showCancelButton: true,\r\n                confirmButtonColor: '#3085d6',\r\n                cancelButtonColor: '#d33',\r\n                confirmButtonText: 'Yes, assign it!'\r\n            }).then((result) => {\r\n                if (result.value) {\r\n                    this.$store.dispatch(action.ASSIGN_TO_ENTERPRISE, obj)\r\n                } else {\r\n                    this.dialogTableVisible = true\r\n                }\r\n            })\r\n        },\r\n    },\r\n};\r\n",{"version":3,"sources":["popup_admin.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"popup_admin.vue","sourceRoot":"src/components/enterprise","sourcesContent":["<template>\r\n<span>\r\n    <div class=\"hoverhand\" slot=\"reference\">\r\n        <div v-if='enterprise.admins[0].profile_picture == \"\" || enterprise.admins[0].profile_picture == null'>\r\n            <img @click=\"dialogTableVisible = admin\" src=\"../../../src/assets/images/avatar-2.jpg\" class=\"avatar\">\r\n        </div>\r\n        <div v-else>\r\n            <img @click=\"dialogTableVisible = admin\" :src=\"enterprise.admins[0].profile_picture\" class=\"avatar\">\r\n        </div>\r\n    </div>\r\n    <el-dialog :visible.sync=\"dialogTableVisible\" title=\"Admin Enterprise\">\r\n        <el-row>\r\n                <el-button type=\"danger\" style=\"background-color: #D50000;\" @click=\"addButton\">\r\n                    Add New Admin\r\n                </el-button>\r\n        </el-row>\r\n        <div v-for=\"(domain) in enterprise.admins\" :key=\"domain.key\">\r\n            <el-row :gutter=\"20\" style=\"margin-top: 20px\">\r\n                <el-col :span=\"8\">\r\n                    <b>Admin Name</b>\r\n                    <br>\r\n                    {{ domain.name}}\r\n                </el-col>\r\n                <el-col :span=\"5\">\r\n                    <b>Admin Mobile Phone</b>\r\n                    <br>\r\n                    {{ domain.phonenumber}}\r\n                </el-col>\r\n                <el-col :span=\"9\">\r\n                    <b>Admin Email</b>\r\n                    <br>\r\n                    <span style=\"word-break: break-all\">{{ domain.email}}</span>\r\n                </el-col>\r\n                <el-col :span=\"2\">\r\n                    <el-button type=\"success\" @click=\"editAdmin(domain)\" icon=\"el-icon-edit\" style=\"padding: 12px\"></el-button>\r\n                </el-col>\r\n            </el-row>\r\n        </div>\r\n    </el-dialog>\r\n</span>\r\n</template>\r\n\r\n<script>\r\nimport {\r\n    mapGetters\r\n} from 'vuex'\r\nimport router from '../../router'\r\nimport * as getter from '../../store/getters-types'\r\nimport * as action from '../../store/action-types'\r\nimport Swal from 'sweetalert2'\r\nimport * as mutation from '../../store/mutation-types'\r\n\r\nexport default {\r\n    props: ['identerprise', 'picture'],\r\n    data() {\r\n        return {\r\n            currentPage: 1,\r\n            dialogTableVisible: false,\r\n            form: {\r\n                search: ''\r\n            }\r\n        };\r\n    },\r\n    computed: {\r\n        ...mapGetters({\r\n            paginate: getter.GET_PAGINATE_DISPATCHER,\r\n            enterprise: getter.ENTERPRISE,\r\n            loading: getter.GET_BUTTON,\r\n        }),\r\n        paginato() {\r\n            return this.paginate\r\n        },\r\n        indexTam() {\r\n            return this.indexT\r\n        },\r\n        admin() {\r\n            let idrole = JSON.parse(localStorage.getItem('user')).idrole\r\n            if (idrole === 1) {\r\n                return true\r\n            } else {\r\n                return false\r\n            }\r\n        }\r\n    },\r\n    methods: {\r\n        async handlePageChange(page) {\r\n            this.currentPage = page;\r\n            let obj = {\r\n                role: 4,\r\n                page: this.currentPage\r\n            };\r\n            this.$store.commit(mutation.BUTTON_STATUS, true)\r\n            await this.$store.dispatch(action.LIST_DISPATCHER_ROLE, obj);\r\n        },\r\n        addButton() {\r\n            this.$store.commit(mutation.BUTTON_STATUS, false)\r\n            router.replace(`/new-admin-enterprise/${this.enterprise.identerprise}`)\r\n        },\r\n        editAdmin(e) {\r\n            this.$store.commit(mutation.BUTTON_STATUS, false)\r\n            this.$store.commit(mutation.SET_DATA_ADMIN_ENTERPRISE, e);\r\n            this.$store.commit(mutation.SET_ID_ENTERPRISE, this.enterprise.identerprise)\r\n            router.replace('/edit-admin')\r\n        },\r\n        indexMethod(index) {\r\n            return index + this.paginato.fromP;\r\n        },\r\n        buttonSearch() {\r\n            this.$store.dispatch(action.SEARCH_DISPATCHER, this.form.search)\r\n        },\r\n        async getId(id) {\r\n            this.dialogTableVisible = false\r\n            let obj = {\r\n                id: id.id,\r\n                identerprise: this.identerprise\r\n            }\r\n            Swal.fire({\r\n                title: 'Are you sure?',\r\n                text: \"You want to assign to dispatcher!\",\r\n                type: 'warning',\r\n                showCancelButton: true,\r\n                confirmButtonColor: '#3085d6',\r\n                cancelButtonColor: '#d33',\r\n                confirmButtonText: 'Yes, assign it!'\r\n            }).then((result) => {\r\n                if (result.value) {\r\n                    this.$store.dispatch(action.ASSIGN_TO_ENTERPRISE, obj)\r\n                } else {\r\n                    this.dialogTableVisible = true\r\n                }\r\n            })\r\n        },\r\n    },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.table-box {\r\n    overflow: auto;\r\n}\r\n\r\n.el-pagination {\r\n    padding-top: 20px;\r\n}\r\n\r\n.card-base {\r\n    padding: 20px;\r\n}\r\n\r\n.el-row {\r\n    padding: 0px 10px;\r\n\r\n    &:last-child {\r\n        margin-bottom: 0;\r\n    }\r\n}\r\n\r\n.el-col {\r\n    border-radius: 5px;\r\n}\r\n\r\n.image {\r\n    max-width: 100%;\r\n    height: 150px;\r\n    display: block;\r\n}\r\n\r\n.vl {\r\n    border-left: 3px solid #f2f2f2;\r\n    height: 90%;\r\n    position: absolute;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n}\r\n\r\n.avatar {\r\n    border-radius: 50%;\r\n    max-width: 80px;\r\n    height: 80px;\r\n    border: 1px solid #fff;\r\n    box-sizing: border-box;\r\n    display: block;\r\n    box-shadow: 0 2px 5px 0 rgba(49, 49, 93, 0.1),\r\n        0 1px 2px 0 rgba(0, 0, 0, 0.08);\r\n    transition: box-shadow 0.5s;\r\n}\r\n\r\n.left {\r\n    text-align: left;\r\n    position: absolute;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n}\r\n\r\n.middle {\r\n    margin-top: -30px\r\n}\r\n\r\n.drive-acount {\r\n    height: 39px;\r\n    margin-top: -11px;\r\n    margin-bottom: -10px;\r\n}\r\n\r\n.hoverhand:hover {\r\n    cursor: pointer;\r\n}\r\n</style>\r\n"]}]}