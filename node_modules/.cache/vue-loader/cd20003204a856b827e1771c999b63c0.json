{"remainingRequest":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\src\\components\\dispatcher\\total-acount.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\src\\components\\dispatcher\\total-acount.vue","mtime":1644413760054},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport router from '../../router'\nimport Swal from 'sweetalert2'\nimport Contacts from '@/assets/data/CONTACTS_MOCK_DATA.json'\nimport { mapGetters, mapActions } from 'vuex'\nimport * as getter from '../../store/getters-types'\nimport * as action from '../../store/action-types'\nimport * as mutation from '../../store/mutation-types'\n\nexport default {\n  name: 'Contacts',\n  data() {\n    return {\n      currentPage: 1,\n      status: 1,\n      type: '',\n      search: '',\n      dialogvisible: false,\n      pageWidth: 0,\n      userdata: {},\n      contacts: Contacts.slice(0, 30),\n      options: [{\n        value: 'Option1',\n        label: 'Option1'\n      }, {\n        value: 'Option2',\n        label: 'Option2',\n        disabled: true\n      }, {\n        value: 'Option3',\n        label: 'Option3'\n      }, {\n        value: 'Option4',\n        label: 'Option4'\n      }, {\n        value: 'Option5',\n        label: 'Option5'\n      }],\n      value: '',\n      input4: '',\n      form: {\n        name: '',\n        photo: '',\n        status: '',\n        company:'',\n        phone: '',\n        email: '',\n        companyAdress: '',\n        nik: '',\n        id: ''\n      },\n      payload: {\n        reason_suspend: \"\",\n        users_id: null,\n        iddispatcher: \"\",\n      },\n      select: [\n              {\n                  name: \"ACTIVE\",\n                  status: 1,\n              },\n              {\n                  name: \"INACTIVE\",\n                  status: 2,\n              },\n              {\n                  name: \"SUSPENDED\",\n                  status: 3\n              }\n          ],\n    }\n  },\n  methods: {\n    searchChange(v){\n      let trimName = this.input4.trim()\n        this.$store.commit(mutation.BUTTON_STATUS, true);\n        this.$store.dispatch(action.LIST_DISPATCHER, {\n            page: 1,\n            typedispatcher: this.type,\n            dispathcer_search: trimName,\n            status: this.status\n          });\n      this.firstData()\n    },\n    newDispatcher()   {\n      this.$router.replace('new-dispatcher')\n    },\n    imgAlt(event) {\n        event.target.src = require(\"../../assets/images/avatar-2.jpg\");\n    },\n    handlePageChange(page) {\n      this.currentPage = page;\n      this.$store.commit(mutation.BUTTON_STATUS, true);\n      this.$store.dispatch( action.LIST_DISPATCHER,\n          {\n            page: this.currentPage,\n            dispathcer_search: input4,\n            typedispatcher : this.type,\n            status: this.status\n          });\n    },\n    async filterStatus(status){\n      this.$store.commit(mutation.BUTTON_STATUS, true);\n      this.status = status;\n      await this.$store.dispatch(action.LIST_DISPATCHER,\n          {\n            page: 1,\n            dispathcer_search: this.input4,\n            typedispatcher : this.type,\n            status: this.status\n          });\n      this.firstData()\n    },\n    openDialog(data) {\n      this.form.photos = data.profile_pictures;\n      this.form.phone = data.phonenumber;\n      this.form.email = data.email;\n      this.form.photo = data.profile_picture;\n      this.form.id    = data.id;\n      this.form.name = data.name;\n      if(data.enterprise !== null){\n        this.form.company = data.enterprise.name;\n        this.form.companyAdress = data.enterprise.office_address\n      }\n      if(data.enterprise === null){\n        this.form.company = '';\n        this.form.companyAdress = ''\n      }\n      if(data.dispatcher_profile !== null ){\n        this.form.nik   = data.dispatcher_profile.nik;\n        this.payload.iddispatcher = data.dispatcher_profile.iddispatcher;\n      }else {\n        this.form.nik   = '';\n        this.payload.iddispatcher = '';\n      }\n    },\n      deleteB() {\n          Swal.fire({\n              title: 'Are you sure?',\n              text: \"You won't be able to revert this!\",\n              type: 'warning',\n              showCancelButton: true,\n              confirmButtonColor: '#3085d6',\n              cancelButtonColor: '#d33',\n              confirmButtonText: 'Yes, delete it!'\n          }).then(async (result) => {\n              if (result.value) {\n                  this.$store.commit(mutation.SET_BUTTON_DELETE, true);\n                  this.$store.commit(mutation.BUTTON_STATUS, true);\n                  await this.$store.dispatch(action.DELETE_DISPATCHER, this.form.id)\n                  this.firstData()\n              }\n          })\n      },\n      resendActivation(){\n          let obj ={\n              page : '/dispatcher',\n              iddispatcher   : this.payload.iddispatcher\n          };\n          this.$store.commit(mutation.SET_BUTTON_RESEND_ACTIVE, true);\n          this.$store.commit(mutation.BUTTON_STATUS, true);\n          this.$store.dispatch(action.RESEND_LINK_ACTIVATION, obj)\n      },\n      activeButton() {\n          Swal.fire({\n              title: \"Are you sure?\",\n              type: \"warning\",\n              showCancelButton: true,\n              confirmButtonColor: \"#3085d6\",\n              cancelButtonColor: \"#d33\",\n              confirmButtonText: \"Yes, activate it!\"\n          }).then(result => {\n              if (result.value) {\n                  this.$store.commit(mutation.SET_BUTTON_ACTIVE, true);\n                  this.$store.commit(mutation.BUTTON_STATUS, true);\n                  this.$store.dispatch(action.ACTIVATE_DISPATCHER, this.form.id);\n              }\n          });\n      },\n      async suspendButton() {\n          const {\n              value: reason\n          } = await Swal.fire({\n              title: 'Enter the reason of suspending',\n              input: 'text',\n              showCancelButton: true,\n              confirmButtonColor: '#3085d6',\n              cancelButtonColor: '#d33',\n              confirmButtonText: 'Yes, suspend it!',\n              inputValidator: (value) => {\n                  if (!value) {\n                      return 'You need to write something!'\n                  }\n              }\n          });\n          if (reason) {\n              this.payload.reason_suspend = reason;\n              this.payload.users_id = this.form.id;\n              this.$store.commit(mutation.SET_BUTTON_SUSPEND, true);\n              this.$store.commit(mutation.BUTTON_STATUS, true);\n              this.$store.dispatch(action.SUSPEND_DISPATCHER, this.payload)\n              this.firstData();\n          }\n      },\n    async editButton() {\n        await this.$store.commit(mutation.SET_ID_DISPATCHER, this.form.id)\n        router.push({\n            path: `/edit-dispatcher`\n        })\n      },\n    firstData(){\n      if(this.listData !== null) {\n        if(this.listData.length > 0){\n          this.form.photos = this.listData[0].profile_pictures;\n          this.form.phone = this.listData[0].phonenumber;\n          this.form.email = this.listData[0].email;\n          this.form.id    = this.listData[0].id;\n          this.form.photo = this.listData[0].profile_picture;\n          this.form.name = this.listData[0].name;\n          if(this.listData[0].enterprise !== null){\n            this.form.company = this.listData[0].enterprise.name;\n            this.form.companyAdress = this.listData[0].enterprise.office_address\n          }\n          if(this.listData[0].enterprise === null){\n            this.form.company = '';\n            this.form.companyAdress = ''\n          }\n          if(this.listData[0].dispatcher_profile !== null ){\n            this.form.nik   = this.listData[0].dispatcher_profile.nik;\n          }else {\n            this.form.nik   = '';\n          }\n        }\n      }\n    }\n  },\n    async created(){\n      await this.$store.dispatch(action.TOTAL_ACCOUNT_DISPATCHER)\n            this.$store.commit(mutation.BUTTON_STATUS, true);\n      await this.$store.dispatch(action.LIST_DISPATCHER,{\n              page: this.currentPage,\n              typedispatcher : this.type,\n              dispathcer_search: this.input4,\n              status: this.status});\n      this.firstData()\n    },\n    // async mounted(){\n    //     this.firstData()\n    // },\n  computed: {\n    ...mapGetters({\n      total           : getter.GET_TOTAL_ACCOUNT_DISPAT,\n      listData        : getter.GET_LIST_DISPATCHER,\n      paginate        : getter.GET_PAGINATE_DISPATCHER,\n      loading         : getter.GET_BUTTON,\n      totalEmployee   : getter.GET_ACCOUNT_EMPLOYEE,\n      buttonDelete    : getter.GET_BUTTON_DELETE,\n      buttonResendPIN : getter.GET_BUTTON_RESEND_PIN,\n      buttonActive    : getter.GET_BUTTON_ACTIVE,\n      buttonSuspend   : getter.GET_BUTTON_SUSPEND,\n      buttonEdit      : getter.GET_BUTTON_EDIT,\n      buttonResActive : getter.GET_BUTTON_RESEND_ACTIVE\n    }),\n    contactsFiltered() {\n      return this.contacts.filter(({full_name, email, phone}) => (full_name + email + phone).toString().toLowerCase().indexOf(this.search.toString().toLowerCase()) !== -1)\n    },\n    contactsClass() {\n      return this.pageWidth >= 870 ? 'large' : this.pageWidth >= 760 ? 'medium' : 'small'\n    }\n    },\n    paginato(){\n        return this.paginate\n    },\n    indexTam(){\n        return this.indexT\n    }\n}\n",{"version":3,"sources":["total-acount.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4KA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"total-acount.vue","sourceRoot":"src/components/dispatcher","sourcesContent":["<template>\r\n  <div class=\"container mb-200\">\r\n    <p class=\"font-weight-600\">ACCOUNT</p>\r\n    <el-row :gutter=\"50\">\r\n      <el-col :span=\"19\">\r\n        <el-card shadow=\"always\" :body-style=\"{padding: '5px'}\" class=\"card-border\">\r\n          <el-row :gutter=\"20\" v-if=\"total !== null\">\r\n            <el-col :span=\"8\">\r\n              <div class=\"line\">\r\n                <p class=\"pb-20 font-weight-600 mt-8\">TOTAL DISPATCHER</p>\r\n                <span class=\"font-size-44 font-weight-600\">{{total.total_dispatcher}}</span>\r\n              </div>\r\n            </el-col>\r\n            <el-col :span=\"8\">\r\n              <div class=\"line\">\r\n                <p class=\"pb-20 font-weight-600 mt-8\">ACTIVE ACCOUNT</p>\r\n                <span class=\"font-size-44 font-weight-600\">{{total.active_account}}</span>\r\n              </div>\r\n            </el-col>\r\n            <el-col :span=\"8\">\r\n              <div class=\"text-center\">\r\n                <p class=\"pb-20 font-weight-600 mt-8\">SUSPENDED ACCOUNT</p>\r\n                <span class=\"font-size-44 font-weight-600\">{{total.suspended_account}}</span>\r\n              </div>\r\n            </el-col>\r\n          </el-row>\r\n        </el-card>\r\n      </el-col>\r\n      <el-col :span=\"4\">\r\n        <el-button @click=\"newDispatcher\" shadow=\"always\" :body-style=\"{padding: '10px'}\" class=\"card-border plus-bg text-center\">\r\n          <i class=\"mdi mdi-plus font-size-60 font-weight-500 white-text\"></i>\r\n          <span class=\"text-p\">Add New</span>\r\n          <span class=\"text-p\">Dispatcher</span>\r\n        </el-button>\r\n      </el-col>\r\n    </el-row>\r\n\r\n    <p class=\"font-weight-600 mt-40\">INFO</p>\r\n    <el-row class=\"mt-20\">\r\n      <el-card shadow=\"always\" class=\"card-border\" >\r\n        <el-row :gutter=\"20\">\r\n          <el-col :span=\"12\">\r\n            <div class=\"avatar2 align-vertical text-center\">\r\n              <img :src=\"form.photo\" class=\"align-vertical-middle\" alt=\"user avatar\" @error=\"imgAlt\" >\r\n              <h1 class=\"name-of\">{{ form.name }}</h1>\r\n              <span>{{ form.status }}</span>\r\n            </div>\r\n            <el-row type=\"flex\" justify=\"center\">\r\n              <el-col :span=\"9\" class=\"break-word\">\r\n                <div>\r\n                <dl>\r\n                  <dt v-if=\"form.company !== ''\">COMPANY</dt>\r\n                  <dd>{{ form.company }}</dd>\r\n\r\n                  <dt>PHONE</dt>\r\n                  <dd>{{ form.phone }}</dd>\r\n\r\n                  <dt>EMAIL</dt>\r\n                  <dd>{{ form.email }}</dd>\r\n                </dl>\r\n                </div>\r\n              </el-col>\r\n              <el-col :span=\"9\">\r\n                <div>\r\n                <dl>\r\n                  <dt v-if=\"form.companyAdress !== ''\">COMPANY ADDRESS</dt>\r\n                  <dd>{{ form.companyAdress }}</dd>\r\n\r\n                  <dt>NIK</dt>\r\n                  <dd>{{ form.nik }}</dd>\r\n                </dl>\r\n                </div>\r\n              </el-col>\r\n            </el-row>\r\n            <el-row type=\"flex\"  justify=\"center\" class=\"mt-10\">\r\n              <el-col :span=\"6\"><el-button @click=\"editButton\" type=\"info\" size=\"small\" class=\"small-edit\">Edit</el-button></el-col>\r\n              <el-col :span=\"10\">\r\n                <el-button\r\n                        type=\"danger\"\r\n                        size=\"small\"\r\n                        :loading=\"buttonSuspend\"\r\n                        @click=\"suspendButton\"\r\n                        v-if=\"status === 1\">\r\n                  Suspend\r\n                </el-button>\r\n                <el-button\r\n                        type=\"success\"\r\n                        size=\"small\"\r\n                        :loading=\"buttonResActive\"\r\n                        @click=\"resendActivation\"\r\n                        v-if=\"status === 2\">\r\n                  Resend Activation\r\n                </el-button>\r\n                <el-button\r\n                        type=\"danger\"\r\n                        size=\"small\"\r\n                        :loading=\"buttonDelete\"\r\n                        @click=\"deleteB\"\r\n                        v-if=\"status === 3\">\r\n                  Delete\r\n                </el-button>\r\n                <el-button\r\n                        type=\"primary\"\r\n                        size=\"small\"\r\n                        :loading=\"buttonActive\"\r\n                        @click=\"activeButton\"\r\n                        v-if=\"status === 3\">\r\n                  Active\r\n                </el-button>\r\n                </el-col>\r\n            </el-row>\r\n          </el-col>\r\n\r\n\r\n          <el-col :span=\"12\" class=\"line-not-center\">\r\n            <el-row type=\"flex\"  justify=\"center\" :gutter=\"20\" class=\"mt-10\">\r\n              <el-col :span=\"10\">\r\n                <el-input\r\n                      size=\"mini\"\r\n                      placeholder=\"Search\"\r\n                      @keyup.native=\"searchChange\"\r\n                      v-model=\"input4\">\r\n                  <i slot=\"suffix\" class=\"el-input__icon el-icon-search\"></i>\r\n                </el-input>\r\n              </el-col>\r\n              <el-col :span=\"6\">\r\n                <el-select @change=\"filterStatus\" v-model=\"status\" filterable size=\"mini\" placeholder=\"All Status\">\r\n                  <el-option\r\n                          v-for=\"item in select\"\r\n                          :key=\"item.status\"\r\n                          :label=\"item.name\"\r\n                          :value=\"item.status\">\r\n                  </el-option>\r\n                </el-select>\r\n              </el-col>\r\n            </el-row>\r\n\r\n            <div class=\"contacts-list box grow scrollable only-y\" v-loading=\"loading\">\r\n              <el-row :gutter=\"20\">\r\n              <div v-for=\"c in listData\" :key=\"c.id\" class=\"flex contact\" @click=\"openDialog(c)\">\r\n                <div class=\"avatar align-vertical el-col el-col-4\">\r\n                  <img :src=\"c.profile_picture\" class=\"align-vertical-middle\" alt=\"user avatar\" @error=\"imgAlt\">\r\n                </div>\r\n                <div class=\"info box grow flex el-col el-col-20\">\r\n                  <div class=\"name box grow flex column justify-center p-10 scrollable only-x\">\r\n                    <div class=\"fullname fs-18\"><strong>{{c.name}}</strong></div>\r\n                    <div class=\"phone fs-14 secondary-text\">{{c.phonenumber}}</div>\r\n                    <div class=\"email fs-14 secondary-text\">{{c.email}}</div>\r\n                  </div>\r\n                  <div class=\"phone align-vertical p-10 green\" v-if=\"c.status === 1\"><span class=\"align-vertical-middle font-weight-600\">ACTIVE</span></div>\r\n                  <div class=\"phone align-vertical p-10\" v-if=\"c.status === 2\"><span class=\"align-vertical-middle font-weight-600\">IN ACTIVE</span></div>\r\n                  <div class=\"phone align-vertical p-10 red\" v-if=\"c.status === 3\"><span class=\"align-vertical-middle font-weight-600\">SUSPANDED</span></div>\r\n                </div>\r\n              </div>\r\n              </el-row>\r\n                <div class=\"grid-content\">\r\n                    <el-pagination\r\n                        background\r\n                        layout=\"prev, pager, next\"\r\n                        @current-change=\"handlePageChange\"\r\n                        :total=\"paginate.totalP\">\r\n                    </el-pagination>\r\n              </div>\r\n            </div>\r\n          </el-col>\r\n        </el-row>\r\n      </el-card>\r\n    </el-row>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import router from '../../router'\r\n  import Swal from 'sweetalert2'\r\n  import Contacts from '@/assets/data/CONTACTS_MOCK_DATA.json'\r\n  import { mapGetters, mapActions } from 'vuex'\r\n  import * as getter from '../../store/getters-types'\r\n  import * as action from '../../store/action-types'\r\n  import * as mutation from '../../store/mutation-types'\r\n\r\n  export default {\r\n    name: 'Contacts',\r\n    data() {\r\n      return {\r\n        currentPage: 1,\r\n        status: 1,\r\n        type: '',\r\n        search: '',\r\n        dialogvisible: false,\r\n        pageWidth: 0,\r\n        userdata: {},\r\n        contacts: Contacts.slice(0, 30),\r\n        options: [{\r\n          value: 'Option1',\r\n          label: 'Option1'\r\n        }, {\r\n          value: 'Option2',\r\n          label: 'Option2',\r\n          disabled: true\r\n        }, {\r\n          value: 'Option3',\r\n          label: 'Option3'\r\n        }, {\r\n          value: 'Option4',\r\n          label: 'Option4'\r\n        }, {\r\n          value: 'Option5',\r\n          label: 'Option5'\r\n        }],\r\n        value: '',\r\n        input4: '',\r\n        form: {\r\n          name: '',\r\n          photo: '',\r\n          status: '',\r\n          company:'',\r\n          phone: '',\r\n          email: '',\r\n          companyAdress: '',\r\n          nik: '',\r\n          id: ''\r\n        },\r\n        payload: {\r\n          reason_suspend: \"\",\r\n          users_id: null,\r\n          iddispatcher: \"\",\r\n        },\r\n        select: [\r\n                {\r\n                    name: \"ACTIVE\",\r\n                    status: 1,\r\n                },\r\n                {\r\n                    name: \"INACTIVE\",\r\n                    status: 2,\r\n                },\r\n                {\r\n                    name: \"SUSPENDED\",\r\n                    status: 3\r\n                }\r\n            ],\r\n      }\r\n    },\r\n    methods: {\r\n      searchChange(v){\r\n        let trimName = this.input4.trim()\r\n          this.$store.commit(mutation.BUTTON_STATUS, true);\r\n          this.$store.dispatch(action.LIST_DISPATCHER, {\r\n              page: 1,\r\n              typedispatcher: this.type,\r\n              dispathcer_search: trimName,\r\n              status: this.status\r\n            });\r\n        this.firstData()\r\n      },\r\n      newDispatcher()   {\r\n        this.$router.replace('new-dispatcher')\r\n      },\r\n      imgAlt(event) {\r\n          event.target.src = require(\"../../assets/images/avatar-2.jpg\");\r\n      },\r\n      handlePageChange(page) {\r\n        this.currentPage = page;\r\n        this.$store.commit(mutation.BUTTON_STATUS, true);\r\n        this.$store.dispatch( action.LIST_DISPATCHER,\r\n            {\r\n              page: this.currentPage,\r\n              dispathcer_search: input4,\r\n              typedispatcher : this.type,\r\n              status: this.status\r\n            });\r\n      },\r\n      async filterStatus(status){\r\n        this.$store.commit(mutation.BUTTON_STATUS, true);\r\n        this.status = status;\r\n        await this.$store.dispatch(action.LIST_DISPATCHER,\r\n            {\r\n              page: 1,\r\n              dispathcer_search: this.input4,\r\n              typedispatcher : this.type,\r\n              status: this.status\r\n            });\r\n        this.firstData()\r\n      },\r\n      openDialog(data) {\r\n        this.form.photos = data.profile_pictures;\r\n        this.form.phone = data.phonenumber;\r\n        this.form.email = data.email;\r\n        this.form.photo = data.profile_picture;\r\n        this.form.id    = data.id;\r\n        this.form.name = data.name;\r\n        if(data.enterprise !== null){\r\n          this.form.company = data.enterprise.name;\r\n          this.form.companyAdress = data.enterprise.office_address\r\n        }\r\n        if(data.enterprise === null){\r\n          this.form.company = '';\r\n          this.form.companyAdress = ''\r\n        }\r\n        if(data.dispatcher_profile !== null ){\r\n          this.form.nik   = data.dispatcher_profile.nik;\r\n          this.payload.iddispatcher = data.dispatcher_profile.iddispatcher;\r\n        }else {\r\n          this.form.nik   = '';\r\n          this.payload.iddispatcher = '';\r\n        }\r\n      },\r\n        deleteB() {\r\n            Swal.fire({\r\n                title: 'Are you sure?',\r\n                text: \"You won't be able to revert this!\",\r\n                type: 'warning',\r\n                showCancelButton: true,\r\n                confirmButtonColor: '#3085d6',\r\n                cancelButtonColor: '#d33',\r\n                confirmButtonText: 'Yes, delete it!'\r\n            }).then(async (result) => {\r\n                if (result.value) {\r\n                    this.$store.commit(mutation.SET_BUTTON_DELETE, true);\r\n                    this.$store.commit(mutation.BUTTON_STATUS, true);\r\n                    await this.$store.dispatch(action.DELETE_DISPATCHER, this.form.id)\r\n                    this.firstData()\r\n                }\r\n            })\r\n        },\r\n        resendActivation(){\r\n            let obj ={\r\n                page : '/dispatcher',\r\n                iddispatcher   : this.payload.iddispatcher\r\n            };\r\n            this.$store.commit(mutation.SET_BUTTON_RESEND_ACTIVE, true);\r\n            this.$store.commit(mutation.BUTTON_STATUS, true);\r\n            this.$store.dispatch(action.RESEND_LINK_ACTIVATION, obj)\r\n        },\r\n        activeButton() {\r\n            Swal.fire({\r\n                title: \"Are you sure?\",\r\n                type: \"warning\",\r\n                showCancelButton: true,\r\n                confirmButtonColor: \"#3085d6\",\r\n                cancelButtonColor: \"#d33\",\r\n                confirmButtonText: \"Yes, activate it!\"\r\n            }).then(result => {\r\n                if (result.value) {\r\n                    this.$store.commit(mutation.SET_BUTTON_ACTIVE, true);\r\n                    this.$store.commit(mutation.BUTTON_STATUS, true);\r\n                    this.$store.dispatch(action.ACTIVATE_DISPATCHER, this.form.id);\r\n                }\r\n            });\r\n        },\r\n        async suspendButton() {\r\n            const {\r\n                value: reason\r\n            } = await Swal.fire({\r\n                title: 'Enter the reason of suspending',\r\n                input: 'text',\r\n                showCancelButton: true,\r\n                confirmButtonColor: '#3085d6',\r\n                cancelButtonColor: '#d33',\r\n                confirmButtonText: 'Yes, suspend it!',\r\n                inputValidator: (value) => {\r\n                    if (!value) {\r\n                        return 'You need to write something!'\r\n                    }\r\n                }\r\n            });\r\n            if (reason) {\r\n                this.payload.reason_suspend = reason;\r\n                this.payload.users_id = this.form.id;\r\n                this.$store.commit(mutation.SET_BUTTON_SUSPEND, true);\r\n                this.$store.commit(mutation.BUTTON_STATUS, true);\r\n                this.$store.dispatch(action.SUSPEND_DISPATCHER, this.payload)\r\n                this.firstData();\r\n            }\r\n        },\r\n      async editButton() {\r\n          await this.$store.commit(mutation.SET_ID_DISPATCHER, this.form.id)\r\n          router.push({\r\n              path: `/edit-dispatcher`\r\n          })\r\n        },\r\n      firstData(){\r\n        if(this.listData !== null) {\r\n          if(this.listData.length > 0){\r\n            this.form.photos = this.listData[0].profile_pictures;\r\n            this.form.phone = this.listData[0].phonenumber;\r\n            this.form.email = this.listData[0].email;\r\n            this.form.id    = this.listData[0].id;\r\n            this.form.photo = this.listData[0].profile_picture;\r\n            this.form.name = this.listData[0].name;\r\n            if(this.listData[0].enterprise !== null){\r\n              this.form.company = this.listData[0].enterprise.name;\r\n              this.form.companyAdress = this.listData[0].enterprise.office_address\r\n            }\r\n            if(this.listData[0].enterprise === null){\r\n              this.form.company = '';\r\n              this.form.companyAdress = ''\r\n            }\r\n            if(this.listData[0].dispatcher_profile !== null ){\r\n              this.form.nik   = this.listData[0].dispatcher_profile.nik;\r\n            }else {\r\n              this.form.nik   = '';\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n      async created(){\r\n        await this.$store.dispatch(action.TOTAL_ACCOUNT_DISPATCHER)\r\n              this.$store.commit(mutation.BUTTON_STATUS, true);\r\n        await this.$store.dispatch(action.LIST_DISPATCHER,{\r\n                page: this.currentPage,\r\n                typedispatcher : this.type,\r\n                dispathcer_search: this.input4,\r\n                status: this.status});\r\n        this.firstData()\r\n      },\r\n      // async mounted(){\r\n      //     this.firstData()\r\n      // },\r\n    computed: {\r\n      ...mapGetters({\r\n        total           : getter.GET_TOTAL_ACCOUNT_DISPAT,\r\n        listData        : getter.GET_LIST_DISPATCHER,\r\n        paginate        : getter.GET_PAGINATE_DISPATCHER,\r\n        loading         : getter.GET_BUTTON,\r\n        totalEmployee   : getter.GET_ACCOUNT_EMPLOYEE,\r\n        buttonDelete    : getter.GET_BUTTON_DELETE,\r\n        buttonResendPIN : getter.GET_BUTTON_RESEND_PIN,\r\n        buttonActive    : getter.GET_BUTTON_ACTIVE,\r\n        buttonSuspend   : getter.GET_BUTTON_SUSPEND,\r\n        buttonEdit      : getter.GET_BUTTON_EDIT,\r\n        buttonResActive : getter.GET_BUTTON_RESEND_ACTIVE\r\n      }),\r\n      contactsFiltered() {\r\n        return this.contacts.filter(({full_name, email, phone}) => (full_name + email + phone).toString().toLowerCase().indexOf(this.search.toString().toLowerCase()) !== -1)\r\n      },\r\n      contactsClass() {\r\n        return this.pageWidth >= 870 ? 'large' : this.pageWidth >= 760 ? 'medium' : 'small'\r\n      }\r\n      },\r\n      paginato(){\r\n          return this.paginate\r\n      },\r\n      indexTam(){\r\n          return this.indexT\r\n      }\r\n  }\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import \"../../assets/scss/_variables\";\r\n    .card-border {\r\n        border-radius: 11px;\r\n    }\r\n    .line-not-center {\r\n      border-left: 1px solid $text-color-info;\r\n    }\r\n    .line {\r\n      border-right: 1px solid $text-color-info;\r\n      text-align: center;\r\n    }\r\n    .text-p {\r\n      display: block;\r\n      color: white;\r\n      font-weight: 600;\r\n    }\r\n    .plus-bg {\r\n      background-color: #a31424;\r\n      height: 139px;\r\n\r\n    }\r\n    .avatar {\r\n      img {\r\n        border: 1px solid transparentize($text-color, .9);\r\n        box-sizing: border-box;\r\n        width: 60px;\r\n        height: 60px;\r\n        border-radius: 50%;\r\n        transition: all .5s .25s;\r\n      }\r\n    }\r\n    .avatar2 {\r\n      img {\r\n        border: 1px solid transparentize($text-color, .9);\r\n        box-sizing: border-box;\r\n        width: 120px;\r\n        height: 120px;\r\n        border-radius: 50%;\r\n        transition: all .5s .25s;\r\n      }\r\n    }\r\n    .name-of {\r\n      margin-bottom: 10px;\r\n      color: #a31424;\r\n    }\r\n    .contacts-list {\r\n      //margin: 0 auto;\r\n      height: 400px;\r\n      width: 100%;\r\n      max-width: 965px;\r\n      padding: 0px 30px;\r\n      box-sizing: border-box;\r\n      .contact {\r\n        margin: 10px 0;\r\n        padding: 5px;\r\n        box-sizing: border-box;\r\n        cursor: pointer;\r\n        border-bottom: 1px solid $text-color-info;\r\n      }\r\n    }\r\n    .small-edit {\r\n      width: 90px;\r\n    }\r\n    .break-word {\r\n      overflow-wrap: break-word;\r\n    }\r\n    .green {\r\n      color: green;\r\n    }\r\n    .red {\r\n      color: red;\r\n    }\r\n</style>"]}]}