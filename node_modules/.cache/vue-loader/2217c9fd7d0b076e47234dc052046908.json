{"remainingRequest":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/src/views/pages/driver/list-driver.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/src/views/pages/driver/list-driver.vue","mtime":1637526439296},{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n    import Affix from \"@/components/Affix\";\n    import { mapGetters } from \"vuex\";\n    import * as getter from \"../../../store/getters-types\";\n    import * as action from \"../../../store/action-types\";\n    import * as mutation from '../../../store/mutation-types';\n    import Swal from 'sweetalert2'\n\nexport default {\n  name: \"ListDriver\",\n  data() {\n    return {\n      user          : JSON.parse(localStorage.getItem('user')),\n      currentPage   : 1,\n      input         : \"\",\n      affixEnabled  : true,\n      indexT        : 1,\n      vendorId      : null,\n      input4        : '',\n      status        : 1,\n      spanPIN       : 8,\n      form: {\n            name: '',\n            status: '',\n            nik: '',\n            phone: '',\n            email: '',\n            driver_type: '',\n            gender: '',\n            address: '',\n            birthdate: '',\n            photo: '',\n            id: '',\n            first_login: '',\n      },\n      payload: {\n          reason_suspend: \"\",\n          users_id: null,\n          iddriver: ''\n      },\n      select: [\n                {\n                    name: \"ACTIVE\",\n                    status: 1,\n                },\n                 {\n                    name: \"INACTIVE\",\n                    status: 2,\n                },\n                {\n                    name: \"SUSPENDED\",\n                    status: 3\n                }\n            ],\n        };\n      },\n      components: {\n        Affix\n      },\n      computed: {\n        ...mapGetters({\n            listData        : getter.GET_LIST_DRIVER,\n            paginate        : getter.GET_PAGINATE_DRIVER,\n            totalDriver     : getter.GET_DRIVER_TOTAL,\n            dropDown        : getter.GET_DROPDOWN_DRIVER,\n            driverAcc       : getter.GET_TOTAL_ACCOUNT_DRIVER,\n            loading         : getter.GET_BUTTON,\n            buttonDelete    : getter.GET_BUTTON_DELETE,\n            buttonResendPIN : getter.GET_BUTTON_RESEND_PIN,\n            buttonActive    : getter.GET_BUTTON_ACTIVE,\n            buttonSuspend   : getter.GET_BUTTON_SUSPEND,\n            buttonEdit      : getter.GET_BUTTON_EDIT\n        }),\n        paginator() {\n          return this.paginate;\n        },\n        indexTam() {\n          return this.indexT;\n        },\n        forTotal() {\n          if (this.listData) {\n            return this.totalDriver;\n          }\n        }\n      },\n\n  async created() {\n      await this.$store.dispatch(action.TOTAL_ACCOUNT_DRIVER);\n      this.$store.commit(mutation.BUTTON_STATUS, true);\n      this.dataBeforeCreated()\n  },\n\n  methods: {\n      async searchChange(v){\n          let trimName = this.input4.trim();\n          this.$store.commit(mutation.BUTTON_STATUS, true);\n          await this.$store.dispatch(action.LIST_DATA_DRIVER, {\n              page: 1,\n              typedispatcher    : this.type,\n              q                 : trimName,\n              status            : this.status\n          });\n          this.firstData()\n      },\n      async handlePageChange(page) {\n        this.currentPage = page;\n        await this.$store.dispatch(action.LIST_DATA_DRIVER, {\n            page    : this.currentPage,\n            q       : this.input4,\n            status  : this.status});\n        this.firstData();\n      },\n      Create() {\n        this.$store.commit(mutation.BUTTON_STATUS, false);\n        this.$router.push({\n            name: \"NewDriver\"\n\n        });\n      },\n      async filterStatus(status){\n          this.$store.commit(mutation.BUTTON_STATUS, true);\n          this.status = status;\n          await this.$store.dispatch(action.LIST_DATA_DRIVER, {\n             page    : 1,\n             q       : this.input4,\n             status  : this.status});\n          this.firstData();\n        },\n      openDialog(data){\n          this.form.name        = data.name;\n          this.form.status      = (data.status === 1) ? 'ACTIVE' : (data.status === 2) ? 'INACTIVE' : 'SUSPENDED'\n          this.form.nik         = data.nik;\n          this.form.phone       = data.phonenumber;\n          this.form.photo       = data.profile_picture;\n          this.form.email       = data.email;\n          this.form.driver_type = data.drivertype.name;\n          this.form.gender      = (data.gender === 1) ? 'Male' : 'Female';\n          this.form.address     = data.address;\n          this.form.birthdate   = data.birthdate;\n          this.form.id          = data.id;\n          this.payload.iddriver = data.iddriver;\n          this.form.first_login = data.is_first_login;\n          (this.form.first_login === 1) ? this.spanPIN = 10 : this.spanPIN = 8;\n      },\n      getId(id) {\n         this.$store.dispatch(action.DATA_ID_DRIVER, id.users_id);\n      },\n      imgAlt(event) {\n        event.target.src = require(\"../../../assets/images/avatar-2.jpg\");\n      },\n      resendPIN() {\n          let obj = {\n              pin_type: '/driver/resend-pin',\n              id: this.form.id\n          };\n          this.$store.commit(mutation.SET_RESEND_PIN_BUTTON, true);\n          this.$store.dispatch(action.RESEND_PIN, obj)\n      },\n      editButton(){\n          this.$store.commit(mutation.BUTTON_STATUS, false);\n          this.$store.dispatch(action.EDIT_DRIVER, this.form.id);\n      },\n      deleteB() {\n          Swal.fire({\n              title: \"Are you sure?\",\n              text: \"You won't be able to revert this!\",\n              type: \"warning\",\n              showCancelButton: true,\n              confirmButtonColor: \"#3085d6\",\n              cancelButtonColor: \"#d33\",\n              confirmButtonText: \"Yes, delete it!\"\n          }).then(result => {\n              if (result.value) {\n                  this.payload.users_id = this.form.id;\n                  this.$store.commit(mutation.SET_BUTTON_DELETE, true);\n                  this.$store.dispatch(action.DELETE_DRIVER, this.payload);\n                  this.dataBeforeCreated();\n              }\n          });\n      },\n      activeButton() {\n          Swal.fire({\n              title: \"Are you sure?\",\n              text: \"You won't be able to revert this!\",\n              type: \"warning\",\n              showCancelButton: true,\n              confirmButtonColor: \"#3085d6\",\n              cancelButtonColor: \"#d33\",\n              confirmButtonText: \"Yes, activate it!\"\n          }).then(async result => {\n              if (result.value) {\n                  this.payload.users_id = this.form.id;\n                  this.$store.commit(mutation.SET_BUTTON_ACTIVE, true);\n                  this.$store.commit(mutation.BUTTON_STATUS, true);\n                  await this.$store.dispatch(action.ACTIVATE_DRIVER, this.payload);\n                  this.dataBeforeCreated();\n              }\n             \n          });\n      },\n      async suspendButton() {\n          const {\n              value: reason\n          } = await Swal.fire({\n              title: 'Enter the reason of suspending',\n              input: 'text',\n              showCancelButton: true,\n              confirmButtonColor: '#3085d6',\n              cancelButtonColor: '#d33',\n              confirmButtonText: 'Yes, suspend it!',\n              inputValidator: (value) => {\n                  if (!value) {\n                      return 'You need to write something!'\n                  }\n              }\n          });\n          if (reason) {\n              // this.$store.commit(mutation.BUTTON_STATUS, true);\n              this.payload.reason_suspend = reason;\n              this.payload.users_id = this.form.id;\n              this.$store.commit(mutation.SET_BUTTON_SUSPEND, true);\n              await this.$store.dispatch(action.SUSPEND_DRIVER, this.payload)\n              this.dataBeforeCreated();\n          }\n      },\n      firstData(){\n          if(this.listData.length > 0){\n              let data              = this.listData[0];\n              this.form.name        = data.name;\n              this.form.status      = (data.status === 1) ? 'ACTIVE' : (data.status === 2) ? 'INACTIVE' : 'SUSPENDED'\n              this.form.nik         = data.nik;\n              this.form.phone       = data.phonenumber;\n              this.form.photo       = data.profile_picture;\n              this.form.email       = data.email;\n              this.form.driver_type = data.drivertype.name;\n              this.form.gender      = (data.gender === 1) ? 'Male' : 'Female';\n              this.form.address     = data.address;\n              this.form.birthdate   = data.birthdate;\n              this.form.id          = data.id;\n              this.payload.iddriver = data.iddriver;\n              this.form.first_login = data.is_first_login;\n              (this.form.first_login === 1) ? this.spanPIN = 10 : this.spanPIN = 8;\n          }\n      },\n      async dataBeforeCreated(){\n          await this.$store.dispatch(action.LIST_DATA_DRIVER, {\n              page  : this.currentPage,\n              q     : this.input4,\n              status: this.status});\n          this.firstData()\n      }\n    }\n};\n",{"version":3,"sources":["list-driver.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsfile":"list-driver.vue","sourceRoot":"src/views/pages/driver","sourcesContent":["<template>\n  <div class=\"page-table scrollable only-y\" id=\"affix-container\">\n    <div class=\"container mb-200\">\n      <p class=\"font-weight-600\" v-if=\"user.idrole == 2\">ACCOUNT</p>\n      <el-row :gutter=\"50\" v-if=\"user.idrole == 2\">\n        <el-col :span=\"19\" v-if=\"driverAcc !== null\">\n          <el-card shadow=\"always\" :body-style=\"{padding: '5px'}\" class=\"card-border\">\n            <el-row :gutter=\"20\">\n              <el-col :span=\"8\">\n                <div class=\"line\">\n                  <p class=\"pb-20 font-weight-600 mt-8\">TOTAL DRIVER</p>\n                  <span class=\"font-size-44 font-weight-600\">{{driverAcc.total_driver}}</span>\n                </div>\n              </el-col>\n              <el-col :span=\"8\">\n                <div class=\"line\">\n                  <p class=\"pb-20 font-weight-600 mt-8\">ACTIVE ACCOUNT</p>\n                  <span class=\"font-size-44 font-weight-600\">{{driverAcc.total_driver_active}}</span>\n                </div>\n              </el-col>\n              <el-col :span=\"8\">\n                <div class=\"text-center\">\n                  <p class=\"pb-20 font-weight-600 mt-8\">SUSPENDED ACCOUNT</p>\n                  <span class=\"font-size-44 font-weight-600\">{{driverAcc.total_driver_suspend}}</span>\n                </div>\n              </el-col>\n            </el-row>\n          </el-card>\n        </el-col>\n        <el-col :span=\"4\">\n          <el-button @click=\"Create()\" shadow=\"always\" :body-style=\"{padding: '10px'}\" class=\"card-border plus-bg text-center\">\n            <i class=\"mdi mdi-plus font-size-60 font-weight-500 white-text\"></i>\n            <span class=\"text-p\">Add New</span>\n            <span class=\"text-p\">Driver</span>\n          </el-button>\n        </el-col>\n      </el-row>\n\n      <p class=\"font-weight-600 mt-40\">INFO</p>\n      <el-row class=\"mt-20\">\n        <el-card shadow=\"always\" class=\"card-border\">\n            <el-row :gutter=\"20\">\n                <el-col :span=\"12\" class=\"line-not-center\">\n                    <div class=\"avatar2 align-vertical text-center\">\n                        <img :src=\"form.photo\" class=\"align-vertical-middle\" alt=\"user avatar\" @error=\"imgAlt\" >\n                        <h1 class=\"name-of\">{{ form.name }}</h1>\n                        <span>{{ form.status }}</span>\n                    </div>\n                    <el-row type=\"flex\" justify=\"center\" :gutter=\"20\">\n                        <el-col :span=\"9\">\n                            <div style=\"overflow-wrap: break-word\">\n                                <dl>\n                                    <dt>NIK</dt>\n                                    <dd>{{form.nik}}</dd>\n\n                                    <dt>PHONE</dt>\n                                    <dd>{{form.phone}}</dd>\n\n                                    <dt>EMAIL</dt>\n                                    <dd>{{form.email}}</dd>\n\n                                    <dt>DRIVER TYPE</dt>\n                                    <dd>{{ form.driver_type }}</dd>\n                                </dl>\n                            </div>\n                        </el-col>\n                        <el-col :span=\"9\">\n                            <div>\n                                <dl>\n                                    <dt>GENDER</dt>\n                                    <dd>{{form.gender}}</dd>\n\n                                    <dt>ADDRESS</dt>\n                                    <dd>{{form.address}}</dd>\n\n                                    <dt>BIRTHDAY</dt>\n                                    <dd>{{form.birthdate}}</dd>\n                                </dl>\n                            </div>\n                        </el-col>\n                    </el-row>\n\n                    <el-row type=\"flex\"  justify=\"center\" class=\"mt-10\" v-if=\"user.idrole == 2\">\n                        <el-col :span=\"6\"><el-button @click=\"editButton()\" type=\"info\" size=\"small\" class=\"small-edit\">Edit</el-button></el-col>\n                        <el-col :span=\"spanPIN\">\n                            <el-button\n                                    type=\"danger\"\n                                    size=\"small\"\n                                    :loading=\"buttonSuspend\"\n                                    @click=\"suspendButton\"\n                                    v-if=\"status === 1\">\n                                Suspend\n                            </el-button>\n                            <el-button\n                                    type=\"success\"\n                                    size=\"small\"\n                                    :loading=\"buttonResendPIN\"\n                                    @click=\"resendPIN\"\n                                    v-if=\"form.first_login === 1 && status === 1\">\n                                Resend PIN\n                            </el-button>\n                            <el-button\n                                    type=\"danger\"\n                                    size=\"small\"\n                                    :loading=\"buttonDelete\"\n                                    @click=\"deleteB\"\n                                    v-if=\"status === 3\">\n                                Delete\n                            </el-button>\n                            <el-button\n                                    type=\"primary\"\n                                    size=\"small\"\n                                    :loading=\"buttonActive\"\n                                    @click=\"activeButton\"\n                                    v-if=\"status === 3\">\n                                Active\n                            </el-button>\n                        </el-col>\n                    </el-row>\n                </el-col>\n\n                <el-col :span=\"12\">\n                    <el-row type=\"flex\"  justify=\"center\" :gutter=\"20\" class=\"mt-10\">\n                        <el-col :span=\"10\">\n                            <el-input\n                                    size=\"mini\"\n                                    placeholder=\"Search\"\n                                    @keyup.native=\"searchChange\"\n                                    v-model=\"input4\">\n                                <i slot=\"suffix\" class=\"el-input__icon el-icon-search\"></i>\n                            </el-input>\n                        </el-col>\n\n                        <el-col :span=\"6\">\n                            <el-select @change=\"filterStatus\" v-model=\"status\" filterable size=\"mini\" placeholder=\"All Status\">\n                                <el-option\n                                        v-for=\"item in select\"\n                                        :key=\"item.status\"\n                                        :label=\"item.name\"\n                                        :value=\"item.status\">\n                                </el-option>\n                            </el-select>\n                        </el-col>\n                    </el-row>\n\n                    <div class=\"contacts-list box grow scrollable only-y\" v-loading=\"loading\">\n                        <el-row>\n                            <div v-for=\"c in listData\" :key=\"c.id\" class=\"flex contact\" @click=\"openDialog(c)\">\n                                <div class=\"avatar align-vertical el-col el-col-4\">\n                                    <img :src=\"c.profile_picture\" class=\"align-vertical-middle\" alt=\"user avatar\" @error=\"imgAlt\">\n                                </div>\n                                <div class=\"info box grow flex el-col el-col-20\">\n                                    <div class=\"name box grow flex column justify-center p-10 scrollable only-x\">\n                                        <div class=\"fullname fs-18\"><strong>{{c.name}}</strong></div>\n                                        <div class=\"phone fs-14 secondary-text\">{{c.phonenumber}}</div>\n                                        <div class=\"email fs-14 secondary-text\">{{c.email}}</div>\n                                    </div>\n                                    <div class=\"phone align-vertical p-10 green\" v-if=\"c.status === 1\"><span class=\"align-vertical-middle font-weight-600\">ACTIVE</span></div>\n                                    <div class=\"phone align-vertical p-10\" v-if=\"c.status === 2\"><span class=\"align-vertical-middle font-weight-600\">IN ACTIVE</span></div>\n                                    <div class=\"phone align-vertical p-10 red\" v-if=\"c.status === 3\"><span class=\"align-vertical-middle font-weight-600\">SUSPANDED</span></div>\n                                </div>\n                            </div>\n                        </el-row>\n                        <div class=\"grid-content\">\n                            <el-pagination\n                                    background\n                                    layout=\"prev, pager, next\"\n                                    @current-change=\"handlePageChange\"\n                                    :total=\"forTotal\"\n                            ></el-pagination>\n                        </div>\n                    </div>\n                </el-col>\n\n            </el-row>\n        </el-card>\n      </el-row>\n    </div>\n  </div>\n</template>\n\n<script>\n    import Affix from \"@/components/Affix\";\n    import { mapGetters } from \"vuex\";\n    import * as getter from \"../../../store/getters-types\";\n    import * as action from \"../../../store/action-types\";\n    import * as mutation from '../../../store/mutation-types';\n    import Swal from 'sweetalert2'\n\nexport default {\n  name: \"ListDriver\",\n  data() {\n    return {\n      user          : JSON.parse(localStorage.getItem('user')),\n      currentPage   : 1,\n      input         : \"\",\n      affixEnabled  : true,\n      indexT        : 1,\n      vendorId      : null,\n      input4        : '',\n      status        : 1,\n      spanPIN       : 8,\n      form: {\n            name: '',\n            status: '',\n            nik: '',\n            phone: '',\n            email: '',\n            driver_type: '',\n            gender: '',\n            address: '',\n            birthdate: '',\n            photo: '',\n            id: '',\n            first_login: '',\n      },\n      payload: {\n          reason_suspend: \"\",\n          users_id: null,\n          iddriver: ''\n      },\n      select: [\n                {\n                    name: \"ACTIVE\",\n                    status: 1,\n                },\n                 {\n                    name: \"INACTIVE\",\n                    status: 2,\n                },\n                {\n                    name: \"SUSPENDED\",\n                    status: 3\n                }\n            ],\n        };\n      },\n      components: {\n        Affix\n      },\n      computed: {\n        ...mapGetters({\n            listData        : getter.GET_LIST_DRIVER,\n            paginate        : getter.GET_PAGINATE_DRIVER,\n            totalDriver     : getter.GET_DRIVER_TOTAL,\n            dropDown        : getter.GET_DROPDOWN_DRIVER,\n            driverAcc       : getter.GET_TOTAL_ACCOUNT_DRIVER,\n            loading         : getter.GET_BUTTON,\n            buttonDelete    : getter.GET_BUTTON_DELETE,\n            buttonResendPIN : getter.GET_BUTTON_RESEND_PIN,\n            buttonActive    : getter.GET_BUTTON_ACTIVE,\n            buttonSuspend   : getter.GET_BUTTON_SUSPEND,\n            buttonEdit      : getter.GET_BUTTON_EDIT\n        }),\n        paginator() {\n          return this.paginate;\n        },\n        indexTam() {\n          return this.indexT;\n        },\n        forTotal() {\n          if (this.listData) {\n            return this.totalDriver;\n          }\n        }\n      },\n\n  async created() {\n      await this.$store.dispatch(action.TOTAL_ACCOUNT_DRIVER);\n      this.$store.commit(mutation.BUTTON_STATUS, true);\n      this.dataBeforeCreated()\n  },\n\n  methods: {\n      async searchChange(v){\n          let trimName = this.input4.trim();\n          this.$store.commit(mutation.BUTTON_STATUS, true);\n          await this.$store.dispatch(action.LIST_DATA_DRIVER, {\n              page: 1,\n              typedispatcher    : this.type,\n              q                 : trimName,\n              status            : this.status\n          });\n          this.firstData()\n      },\n      async handlePageChange(page) {\n        this.currentPage = page;\n        await this.$store.dispatch(action.LIST_DATA_DRIVER, {\n            page    : this.currentPage,\n            q       : this.input4,\n            status  : this.status});\n        this.firstData();\n      },\n      Create() {\n        this.$store.commit(mutation.BUTTON_STATUS, false);\n        this.$router.push({\n            name: \"NewDriver\"\n\n        });\n      },\n      async filterStatus(status){\n          this.$store.commit(mutation.BUTTON_STATUS, true);\n          this.status = status;\n          await this.$store.dispatch(action.LIST_DATA_DRIVER, {\n             page    : 1,\n             q       : this.input4,\n             status  : this.status});\n          this.firstData();\n        },\n      openDialog(data){\n          this.form.name        = data.name;\n          this.form.status      = (data.status === 1) ? 'ACTIVE' : (data.status === 2) ? 'INACTIVE' : 'SUSPENDED'\n          this.form.nik         = data.nik;\n          this.form.phone       = data.phonenumber;\n          this.form.photo       = data.profile_picture;\n          this.form.email       = data.email;\n          this.form.driver_type = data.drivertype.name;\n          this.form.gender      = (data.gender === 1) ? 'Male' : 'Female';\n          this.form.address     = data.address;\n          this.form.birthdate   = data.birthdate;\n          this.form.id          = data.id;\n          this.payload.iddriver = data.iddriver;\n          this.form.first_login = data.is_first_login;\n          (this.form.first_login === 1) ? this.spanPIN = 10 : this.spanPIN = 8;\n      },\n      getId(id) {\n         this.$store.dispatch(action.DATA_ID_DRIVER, id.users_id);\n      },\n      imgAlt(event) {\n        event.target.src = require(\"../../../assets/images/avatar-2.jpg\");\n      },\n      resendPIN() {\n          let obj = {\n              pin_type: '/driver/resend-pin',\n              id: this.form.id\n          };\n          this.$store.commit(mutation.SET_RESEND_PIN_BUTTON, true);\n          this.$store.dispatch(action.RESEND_PIN, obj)\n      },\n      editButton(){\n          this.$store.commit(mutation.BUTTON_STATUS, false);\n          this.$store.dispatch(action.EDIT_DRIVER, this.form.id);\n      },\n      deleteB() {\n          Swal.fire({\n              title: \"Are you sure?\",\n              text: \"You won't be able to revert this!\",\n              type: \"warning\",\n              showCancelButton: true,\n              confirmButtonColor: \"#3085d6\",\n              cancelButtonColor: \"#d33\",\n              confirmButtonText: \"Yes, delete it!\"\n          }).then(result => {\n              if (result.value) {\n                  this.payload.users_id = this.form.id;\n                  this.$store.commit(mutation.SET_BUTTON_DELETE, true);\n                  this.$store.dispatch(action.DELETE_DRIVER, this.payload);\n                  this.dataBeforeCreated();\n              }\n          });\n      },\n      activeButton() {\n          Swal.fire({\n              title: \"Are you sure?\",\n              text: \"You won't be able to revert this!\",\n              type: \"warning\",\n              showCancelButton: true,\n              confirmButtonColor: \"#3085d6\",\n              cancelButtonColor: \"#d33\",\n              confirmButtonText: \"Yes, activate it!\"\n          }).then(async result => {\n              if (result.value) {\n                  this.payload.users_id = this.form.id;\n                  this.$store.commit(mutation.SET_BUTTON_ACTIVE, true);\n                  this.$store.commit(mutation.BUTTON_STATUS, true);\n                  await this.$store.dispatch(action.ACTIVATE_DRIVER, this.payload);\n                  this.dataBeforeCreated();\n              }\n             \n          });\n      },\n      async suspendButton() {\n          const {\n              value: reason\n          } = await Swal.fire({\n              title: 'Enter the reason of suspending',\n              input: 'text',\n              showCancelButton: true,\n              confirmButtonColor: '#3085d6',\n              cancelButtonColor: '#d33',\n              confirmButtonText: 'Yes, suspend it!',\n              inputValidator: (value) => {\n                  if (!value) {\n                      return 'You need to write something!'\n                  }\n              }\n          });\n          if (reason) {\n              // this.$store.commit(mutation.BUTTON_STATUS, true);\n              this.payload.reason_suspend = reason;\n              this.payload.users_id = this.form.id;\n              this.$store.commit(mutation.SET_BUTTON_SUSPEND, true);\n              await this.$store.dispatch(action.SUSPEND_DRIVER, this.payload)\n              this.dataBeforeCreated();\n          }\n      },\n      firstData(){\n          if(this.listData.length > 0){\n              let data              = this.listData[0];\n              this.form.name        = data.name;\n              this.form.status      = (data.status === 1) ? 'ACTIVE' : (data.status === 2) ? 'INACTIVE' : 'SUSPENDED'\n              this.form.nik         = data.nik;\n              this.form.phone       = data.phonenumber;\n              this.form.photo       = data.profile_picture;\n              this.form.email       = data.email;\n              this.form.driver_type = data.drivertype.name;\n              this.form.gender      = (data.gender === 1) ? 'Male' : 'Female';\n              this.form.address     = data.address;\n              this.form.birthdate   = data.birthdate;\n              this.form.id          = data.id;\n              this.payload.iddriver = data.iddriver;\n              this.form.first_login = data.is_first_login;\n              (this.form.first_login === 1) ? this.spanPIN = 10 : this.spanPIN = 8;\n          }\n      },\n      async dataBeforeCreated(){\n          await this.$store.dispatch(action.LIST_DATA_DRIVER, {\n              page  : this.currentPage,\n              q     : this.input4,\n              status: this.status});\n          this.firstData()\n      }\n    }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n    @import \"../../../assets/scss/_variables\";\n    .card-border {\n        border-radius: 11px;\n    }\n    .line-not-center {\n        border-right: 1px solid $text-color-info;\n    }\n    .line {\n        border-right: 1px solid $text-color-info;\n        text-align: center;\n    }\n    .text-p {\n        display: block;\n        color: white;\n        font-weight: 600;\n    }\n    .plus-bg {\n        background-color: #a31424;\n        height: 139px;\n\n    }\n    .avatar {\n        img {\n            border: 1px solid transparentize($text-color, .9);\n            box-sizing: border-box;\n            width: 60px;\n            height: 60px;\n            border-radius: 50%;\n            transition: all .5s .25s;\n        }\n    }\n    .avatar2 {\n        img {\n            border: 1px solid transparentize($text-color, .9);\n            box-sizing: border-box;\n            width: 120px;\n            height: 120px;\n            border-radius: 50%;\n            transition: all .5s .25s;\n        }\n    }\n    .name-of {\n        margin-bottom: 10px;\n        color: #a31424;\n    }\n    .contacts-list {\n        //margin: 0 auto;\n        height: 500px;\n        width: 100%;\n        max-width: 965px;\n        padding: 0px 30px;\n        box-sizing: border-box;\n        .contact {\n            margin: 10px 0;\n            padding: 5px;\n            box-sizing: border-box;\n            cursor: pointer;\n            border-bottom: 1px solid $text-color-info;\n        }\n    }\n    .small-edit {\n        width: 90px;\n    }\n    .green {\n        color :green;\n    }\n    .red {\n        color: red;\n    }\n\n\n    /*.card-base {*/\n    /*padding: 20px;*/\n    /*}*/\n\n    /*.el-row {*/\n    /*// display: flex;*/\n    /*// align-items: center;*/\n    /*// justify-content: center;*/\n    /*padding: 0px 10px;*/\n    /*margin-bottom: 20px;*/\n\n    /*&:last-child {*/\n        /*margin-bottom: 0;*/\n    /*}*/\n    /*}*/\n\n    /*.el-col {*/\n    /*border-radius: 5px;*/\n    /*}*/\n\n    /*.el-select {*/\n    /*width: 100%;*/\n    /*}*/\n</style>\n"]}]}