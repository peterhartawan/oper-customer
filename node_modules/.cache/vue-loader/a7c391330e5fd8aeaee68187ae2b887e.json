{"remainingRequest":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\src\\views\\pages\\employee\\listemployee\\detail-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\src\\views\\pages\\employee\\listemployee\\detail-list.vue","mtime":1644413760510},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n    import TaskEmployee from '../../../../components/employee/task-employee'\n    import router from '../../../../router'\n    import {\n        mapGetters,\n        mapMutations\n    } from 'vuex'\n    import * as getter from '../../../../store/getters-types'\n    import * as action from '../../../../store/action-types'\n    import * as mutation from '../../../../store/mutation-types'\n    import Swal from 'sweetalert2'\n\nexport default {\n    data() {\n        return {\n            alt: require(\"@/assets/images/avatar-2.jpg\"),\n            dialogVisible: false,\n            location: null,\n            map: {\n                taskname: '',\n                lastupdate: '',\n                photo: '',\n            },\n            payload: {\n                reason_cancel: \"\",\n                idorder: null,\n            },\n        }\n    },\n    components: {\n        TaskEmployee\n    },\n    computed: {\n        ...mapGetters({\n            order: getter.GET_DETAIL_EMPLOYEE,\n            path: getter.GET_PATH,\n            loading: getter.GET_LOADING\n        }),\n        status() {\n            if (this.order.order_status === 1) {\n                return \"ORDER_OPEN\"\n            }\n            if (this.order.order_status === 2) {\n                return \"ORDER_INPROGRESS\"\n            }\n            if (this.order.order_status === 3) {\n                return \"ORDER_COMPLETED\"\n            }\n            if (this.order.order_status === 4) {\n                return \"ORDER_MOVED\"\n            }\n            if (this.order.order_status === 5) {\n                return \"ORDER_CANCELED\"\n            }\n            if (this.order.order_status === 6) {\n                return \"ORDER_DELETED\"\n            }\n        },\n        cancelButton() {\n            let idrole = JSON.parse(localStorage.getItem('user')).idrole\n            if (idrole === 2 && this.order.order_status === 2) {\n                return true\n            } else {\n                return false\n            }\n        }\n    },\n    async created() {\n        this.idOrderButton();\n    },\n    methods: {\n        ...mapMutations({\n            type: mutation.TRACKING_TYPE,\n            id: mutation.ID_ORDER,\n            pathType: mutation.SET_PATH\n        }),\n        imgAlt(event) {\n            event.target.src = this.alt;\n        },\n        editButton() {},\n        enterpriseDriver() {},\n        backLCorp() {\n            router.replace('/employee/inprogress')\n        },\n        async cancelTask() {\n            const {\n                value: reason\n            } = await Swal.fire({\n                title: 'Enter the reason for cancellation',\n                input: 'text',\n                showCancelButton: true,\n                confirmButtonColor: '#3085d6',\n                cancelButtonColor: '#d33',\n                confirmButtonText: 'Yes, Cancel it!',\n                inputValidator: (value) => {\n                    if (!value) {\n                        return 'You need to write something!'\n                    }\n                }\n            });\n            if (reason) {\n                this.payload.reason_cancel = reason;\n                this.payload.idorder = this.order.idorder;\n                this.$store.commit(mutation.SET_LOADING, true)\n                this.$store.dispatch(action.CANCEL_TASK, this.payload)\n            }\n        },\n        idOrderButton() {\n            this.type('task?idorder=');\n            this.id(this.order.idorder);\n            this.pathType(this.path);\n        },\n        async getId(id) {\n            if (id.attachment_url == \"\" || id.attachment_url == null) {\n                this.map.taskphoto = null\n            } else {\n                this.map.taskphoto = id.attachment_url\n            }\n            this.map.description = id.description\n            this.map.taskname = id.name\n            this.map.lastupdate = id.last_update_status\n            this.map.required = id.is_required\n            this.map.photo = id.is_need_photo\n            this.map.inspector = id.is_need_inspector_validation\n            this.dialogVisible = true\n            if (!id.latitude == null || !id.latitude == \"\") {\n                let obj = {\n                    lat: Number(id.latitude),\n                    lng: Number(id.longitude)\n                }\n                this.location = obj\n            } else if (!id.submit_latitude == null || !id.submit_latitude == \"\") {\n                let obj = {\n                    lat: Number(id.submit_latitude),\n                    lng: Number(id.submit_longitude)\n                }\n                this.location = obj\n            } else {\n                this.location = null\n            }\n\n        },\n    }\n\n}\n",{"version":3,"sources":["detail-list.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsfile":"detail-list.vue","sourceRoot":"src/views/pages/employee/listemployee","sourcesContent":["<template>\r\n<div class=\"page-table scrollable only-y\" id=\"affix-container\">\r\n    <TaskEmployee />\r\n    <div class=\"card-base card-shadow--medium bg-white\">\r\n        <el-row :gutter=\"20\">\r\n            <el-col :span=\"11\">\r\n                <el-row :gutter=\"20\" class=\"line margin-top-25\">\r\n                    <el-col :span=\"8\">\r\n                        <div class=\"avatar2 align-vertical text-center\">\r\n                            <img :src=\"order.employee.user.profile_picture\" class=\"align-vertical-middle\" alt=\"user avatar\" @error=\"imgAlt\">\r\n                        </div>\r\n                    </el-col>\r\n                    <el-col :span=\"16\" style=\"overflow-wrap: break-word\">\r\n                        <span class=\"p-name\">{{ order.employee.user.name }}</span>\r\n                        <span class=\"p\">{{order.employee.user.phonenumber}}</span>\r\n                        <span class=\"p\">{{order.employee.user.email}}</span>\r\n                    </el-col>\r\n                </el-row>\r\n            </el-col>\r\n            <el-col :span=\"13\">\r\n                <h3 class=\"margin-bottom-1 margin-top-0 margin-left-10\"> DETAIL </h3>\r\n                <el-row :gutter=\"30\">\r\n                    <el-col :span=\"8\">\r\n                        <dl>\r\n\r\n                            <dt>TRANSACTION ID</dt>\r\n                            <dd>{{ order.trx_id }}</dd>\r\n\r\n                        </dl>\r\n                    </el-col>\r\n                    <el-col :span=\"8\">\r\n                        <dl>\r\n                            <!--<dt> TYPE </dt>-->\r\n                            <!--<dd>{{ order.enterprise.enterprise_type.name }}</dd>-->\r\n                            <dt>BOOKING TIME</dt>\r\n                            <dd>{{ order.booking_time }}</dd>\r\n                        </dl>\r\n                    </el-col>\r\n                </el-row>\r\n            </el-col>\r\n        </el-row>\r\n        <hr>\r\n        <el-row class=\"margin-top-25\">\r\n            <el-col :span=\"11\">\r\n                <h3>TASK</h3>\r\n                <!--<h1 class=\"font-size-40\">Lorem Ipsum</h1>-->\r\n            </el-col>\r\n\r\n            <el-col :span=\"8\" class=\"line\">\r\n                <dl>\r\n                    <dt>MESSAGE</dt>\r\n                    <dd style=\"overflow-wrap: break-word\">{{ `${order.message}` }}</dd>\r\n                </dl>\r\n            </el-col>\r\n            <el-col :span=\"5\"class=\"text-center\">\r\n                <span class=\"p font-weight-600 margin-bottom-10\">STATUS</span>\r\n                <div v-if=\"status === 'ORDER_INPROGRESS'\">\r\n                    <img src=\"../../../../assets/oper_asset/progress.png\" alt=\"\" style=\"width: 20%\">\r\n                    <span class=\"p margin-top-10\">IN PROGRESS</span>\r\n                </div>\r\n                <div v-else>\r\n                    <img src=\"../../../../assets/oper_asset/completed.png\" alt=\"\" style=\"width: 20%\">\r\n                    <span class=\"p margin-top-10\">COMPLETED</span>\r\n                </div>\r\n            </el-col>\r\n        </el-row>\r\n\r\n        <!--<el-row :gutter=\"20\">-->\r\n            <!--<el-col :span=\"24\">-->\r\n                <!--<span>-->\r\n                    <!--<b> Employee Name</b> <span style=\"padding-left: 0.8em\"> : {{ order.employee.user.name }} </span>-->\r\n                <!--</span> <br>-->\r\n                <!--<span>-->\r\n                    <!--<b> Transaction ID </b> <span style=\"padding-left: 1.5em\"> : {{ order.trx_id }} </span>-->\r\n                <!--</span> <br>-->\r\n                <!--<span>-->\r\n                    <!--<b> Booking Time </b> <span style=\"padding-left: 1.8em\"> : {{ order.booking_time }} </span>-->\r\n                <!--</span> <br>-->\r\n                <!--<span>-->\r\n                    <!--<b> Message </b> <span style=\"padding-left: 4.15em\"> : {{ order.message }} </span>-->\r\n                <!--</span> <br>-->\r\n                <!--&lt;!&ndash;<span>&ndash;&gt;-->\r\n                <!--&lt;!&ndash;<b> Vehicle </b> <span style=\"padding-left: 4.7em\"> : {{ order.client_vehicle_license }} - {{ order.vehicle_owner }} ( {{ order.vehicle_type }} - {{ order.vehicle_transmission }} ) </span>&ndash;&gt;-->\r\n                <!--&lt;!&ndash;</span> <br>&ndash;&gt;-->\r\n                <!--<span>-->\r\n                    <!--<b> Order Status </b> <span style=\"padding-left: 2.3em\"> : {{ status }} </span>-->\r\n                <!--</span>-->\r\n            <!--</el-col>-->\r\n        <!--</el-row>-->\r\n        <!--<el-row>-->\r\n            <!--<el-col :span=\"24\">-->\r\n                <!--<el-col>-->\r\n                    <!--<p>Task</p>-->\r\n                    <!--<hr>-->\r\n                <!--</el-col>-->\r\n            <!--</el-col>-->\r\n        <!--</el-row>-->\r\n\r\n        <el-row>\r\n            <el-col :span=\"24\">\r\n                <el-table :data=\"order.order_tasks\" stripe @row-click=\"getId\" style=\"width: 100%\">\r\n                    <el-table-column\r\n                            prop=\"name\"\r\n                            label=\"TASK NAME\">\r\n                    </el-table-column>\r\n                    <el-table-column\r\n                            prop=\"description\"\r\n                            label=\"TASK DESCRIPTION\">\r\n                    </el-table-column>\r\n                    <el-table-column\r\n                            prop=\"last_update_status\"\r\n                            label=\"COMPLETED_DATE\">\r\n                    </el-table-column>\r\n                    <el-table-column\r\n                            align=\"center\"\r\n                            label=\"STATUS\">\r\n                        <template slot-scope=\"scope\">\r\n                            {{(scope.row.order_task_status === 0) ? 'NOT STARTED'\r\n                            : (scope.row.order_task_status === 1) ? 'IN PROGRESS'\r\n                            : (scope.row.order_task_status === 2) ? 'COMPLETED'\r\n                            : 'SKIPPED'}}\r\n                        </template>\r\n                    </el-table-column>\r\n                </el-table>\r\n            </el-col>\r\n        </el-row>\r\n\r\n        <el-row :gutter=\"20\">\r\n            <el-col :span=\"7\" style=\"margin-top: 20px;\">\r\n                <el-button @click=\"backLCorp\" type=\"info\" size=\"small\">\r\n                    <span class=\"padding-left-10 padding-right-10\">\r\n                        Back\r\n                    </span>\r\n                </el-button>\r\n            </el-col>\r\n            <el-col :span=\"4\" :offset=\"12\" style=\"margin-top: 20px;\">\r\n                <el-button\r\n                        type=\"danger\"\r\n                        v-loading.fullscreen.lock=\"loading\"\r\n                        v-if=\"cancelButton\"\r\n                        size=\"small\"\r\n                        @click=\"cancelTask\">\r\n                    <span class=\"padding-left-10 padding-right-10\">\r\n                        Cancel Task\r\n                    </span>\r\n                </el-button>\r\n            </el-col>\r\n        </el-row>\r\n    </div>\r\n    <el-dialog :visible.sync=\"dialogVisible\" width=\"70%\">\r\n        <el-row :gutter=\"20\">\r\n            <el-col :span=\"8\">\r\n                <div v-if='!map.taskphoto == null || !map.taskphoto == \"\"'>\r\n                    <el-card class=\"middle\" :body-style=\"{ padding: '0px' }\" style=\"width: 100%; height: 300px\">\r\n                        <div class=\"thumbnail\">\r\n                            <img class=\"potrait\" :src=\"map.taskphoto\">\r\n                        </div>\r\n                    </el-card>\r\n                </div>\r\n                <div v-else>\r\n                    <el-card class=\"middle\" :body-style=\"{ padding: '0px' }\" style=\"width: 100%; height: 300px\">\r\n                        <h3>User has not taken a picture</h3>\r\n                    </el-card>\r\n                </div>\r\n                <el-col :span=\"24\" style=\"margin-bottom: 5px\">\r\n                    <h3>\r\n                        <el-col :span=\"16\" style=\"margin-bottom: 10px\">Task Name</el-col>\r\n                    </h3>\r\n                    <el-col :span=\"20\">{{map.taskname}}</el-col>\r\n                </el-col>\r\n                <el-col :span=\"24\" style=\"margin-bottom: 5px\">\r\n                    <h3>\r\n                        <el-col :span=\"16\" style=\"margin-bottom: 10px\">Completed Date</el-col>\r\n                    </h3>\r\n                    <el-col :span=\"20\">{{map.lastupdate}}</el-col>\r\n                </el-col>\r\n                <el-col :span=\"24\">\r\n                    <h3>\r\n                        <el-col :span=\"16\" style=\"margin-bottom: 10px\">Description</el-col>\r\n                    </h3>\r\n                    <el-col :span=\"20\">\r\n                        <span class=\"word-wrap\">{{map.description}}</span>\r\n                    </el-col>\r\n                </el-col>\r\n            </el-col>\r\n            <el-col :span=\"16\">\r\n                <div v-if=\"location\">\r\n                    <el-card :body-style=\"{ padding: '0px' }\" style=\"width: 100%; height: 500px\">\r\n                        <gmap-map ref=\"map\" :center=\"location\" :zoom=\"14\" :options=\"{gestureHandling:'cooperative'}\" map-type-id=\"roadmap\" style=\"width: 100%; height: 500px\">\r\n                            <GmapMarker :position=\"location\" label=\"S\" />\r\n                        </gmap-map>\r\n                    </el-card>\r\n                </div>\r\n                <div v-else>\r\n                    <el-card class=\"center\" :body-style=\"{ padding: '0px' }\" style=\"width: 100%; height: 500px\">\r\n\r\n                        <h1>User has not completed the task</h1>\r\n\r\n                    </el-card>\r\n                </div>\r\n            </el-col>\r\n        </el-row>\r\n        <el-row :gutter=\"20\" style=\"margin-top: 10px\">\r\n            <el-col :offset=\"10\">\r\n                <el-checkbox :checked=\"map.required\" disabled>Is Required</el-checkbox>\r\n                <el-checkbox :checked=\"map.photo\" disabled>Is Required Photo</el-checkbox>\r\n                <el-checkbox :checked=\"map.inspector\" disabled>Is Required Inspector Validation</el-checkbox>\r\n            </el-col>\r\n        </el-row>\r\n    </el-dialog>\r\n</div>\r\n</template>\r\n\r\n<script>\r\n    import TaskEmployee from '../../../../components/employee/task-employee'\r\n    import router from '../../../../router'\r\n    import {\r\n        mapGetters,\r\n        mapMutations\r\n    } from 'vuex'\r\n    import * as getter from '../../../../store/getters-types'\r\n    import * as action from '../../../../store/action-types'\r\n    import * as mutation from '../../../../store/mutation-types'\r\n    import Swal from 'sweetalert2'\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            alt: require(\"@/assets/images/avatar-2.jpg\"),\r\n            dialogVisible: false,\r\n            location: null,\r\n            map: {\r\n                taskname: '',\r\n                lastupdate: '',\r\n                photo: '',\r\n            },\r\n            payload: {\r\n                reason_cancel: \"\",\r\n                idorder: null,\r\n            },\r\n        }\r\n    },\r\n    components: {\r\n        TaskEmployee\r\n    },\r\n    computed: {\r\n        ...mapGetters({\r\n            order: getter.GET_DETAIL_EMPLOYEE,\r\n            path: getter.GET_PATH,\r\n            loading: getter.GET_LOADING\r\n        }),\r\n        status() {\r\n            if (this.order.order_status === 1) {\r\n                return \"ORDER_OPEN\"\r\n            }\r\n            if (this.order.order_status === 2) {\r\n                return \"ORDER_INPROGRESS\"\r\n            }\r\n            if (this.order.order_status === 3) {\r\n                return \"ORDER_COMPLETED\"\r\n            }\r\n            if (this.order.order_status === 4) {\r\n                return \"ORDER_MOVED\"\r\n            }\r\n            if (this.order.order_status === 5) {\r\n                return \"ORDER_CANCELED\"\r\n            }\r\n            if (this.order.order_status === 6) {\r\n                return \"ORDER_DELETED\"\r\n            }\r\n        },\r\n        cancelButton() {\r\n            let idrole = JSON.parse(localStorage.getItem('user')).idrole\r\n            if (idrole === 2 && this.order.order_status === 2) {\r\n                return true\r\n            } else {\r\n                return false\r\n            }\r\n        }\r\n    },\r\n    async created() {\r\n        this.idOrderButton();\r\n    },\r\n    methods: {\r\n        ...mapMutations({\r\n            type: mutation.TRACKING_TYPE,\r\n            id: mutation.ID_ORDER,\r\n            pathType: mutation.SET_PATH\r\n        }),\r\n        imgAlt(event) {\r\n            event.target.src = this.alt;\r\n        },\r\n        editButton() {},\r\n        enterpriseDriver() {},\r\n        backLCorp() {\r\n            router.replace('/employee/inprogress')\r\n        },\r\n        async cancelTask() {\r\n            const {\r\n                value: reason\r\n            } = await Swal.fire({\r\n                title: 'Enter the reason for cancellation',\r\n                input: 'text',\r\n                showCancelButton: true,\r\n                confirmButtonColor: '#3085d6',\r\n                cancelButtonColor: '#d33',\r\n                confirmButtonText: 'Yes, Cancel it!',\r\n                inputValidator: (value) => {\r\n                    if (!value) {\r\n                        return 'You need to write something!'\r\n                    }\r\n                }\r\n            });\r\n            if (reason) {\r\n                this.payload.reason_cancel = reason;\r\n                this.payload.idorder = this.order.idorder;\r\n                this.$store.commit(mutation.SET_LOADING, true)\r\n                this.$store.dispatch(action.CANCEL_TASK, this.payload)\r\n            }\r\n        },\r\n        idOrderButton() {\r\n            this.type('task?idorder=');\r\n            this.id(this.order.idorder);\r\n            this.pathType(this.path);\r\n        },\r\n        async getId(id) {\r\n            if (id.attachment_url == \"\" || id.attachment_url == null) {\r\n                this.map.taskphoto = null\r\n            } else {\r\n                this.map.taskphoto = id.attachment_url\r\n            }\r\n            this.map.description = id.description\r\n            this.map.taskname = id.name\r\n            this.map.lastupdate = id.last_update_status\r\n            this.map.required = id.is_required\r\n            this.map.photo = id.is_need_photo\r\n            this.map.inspector = id.is_need_inspector_validation\r\n            this.dialogVisible = true\r\n            if (!id.latitude == null || !id.latitude == \"\") {\r\n                let obj = {\r\n                    lat: Number(id.latitude),\r\n                    lng: Number(id.longitude)\r\n                }\r\n                this.location = obj\r\n            } else if (!id.submit_latitude == null || !id.submit_latitude == \"\") {\r\n                let obj = {\r\n                    lat: Number(id.submit_latitude),\r\n                    lng: Number(id.submit_longitude)\r\n                }\r\n                this.location = obj\r\n            } else {\r\n                this.location = null\r\n            }\r\n\r\n        },\r\n    }\r\n\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n    @import \"../../../../assets/scss/_variables\";\r\n    .card-base {\r\n        padding: 20px;\r\n    }\r\n\r\n    .el-row {\r\n        padding: 0px 10px;\r\n\r\n        &:last-child {\r\n            margin-bottom: 0;\r\n        }\r\n    }\r\n\r\n    .el-col {\r\n        border-radius: 5px;\r\n    }\r\n\r\n    .thumbnail {\r\n        border-radius: 0px;\r\n        position: relative;\r\n        width: 290px;\r\n        height: 300px;\r\n        overflow: hidden;\r\n    }\r\n\r\n    .thumbnail img {\r\n        position: absolute;\r\n        left: 50%;\r\n        top: 50%;\r\n        height: 100%;\r\n        width: auto;\r\n        -webkit-transform: translate(-50%, -50%);\r\n        -ms-transform: translate(-50%, -50%);\r\n        transform: translate(-50%, -50%);\r\n    }\r\n\r\n    .thumbnail img.portrait {\r\n        width: 100%;\r\n        height: auto;\r\n    }\r\n\r\n    .h3 {\r\n        display: inline;\r\n    }\r\n\r\n    .word-wrap {\r\n        word-wrap: break-word;\r\n        overflow-wrap: break-word;\r\n    }\r\n\r\n    .center {\r\n        text-align: center;\r\n        vertical-align: middle;\r\n        line-height: 470px;\r\n    }\r\n\r\n    .middle {\r\n        text-align: center;\r\n        vertical-align: middle;\r\n        line-height: 280px;\r\n    }\r\n    .p {\r\n        display: block;\r\n    }\r\n    .p-name {\r\n        display: block;\r\n        font-size: 2em;\r\n        font-weight: bold;\r\n        margin-top: 10px\r\n    }\r\n    .line {\r\n        border-right: 1px solid $line-color;\r\n    }\r\n    .avatar2 {\r\n        img {\r\n            border: 1px solid transparentize($text-color, .9);\r\n            box-sizing: border-box;\r\n            width: 120px;\r\n            height: 120px;\r\n            border-radius: 50%;\r\n            transition: all .5s .25s;\r\n        }\r\n    }\r\n</style>\r\n"]}]}