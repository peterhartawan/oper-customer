{"remainingRequest":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/babel-loader/lib/index.js!/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/src/views/pages/authentication/ChangePassword.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/src/views/pages/authentication/ChangePassword.vue","mtime":1640440454977},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/.babelrc","mtime":1640440444342},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/cache-loader/dist/cjs.js","mtime":1640440446558},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/babel-loader/lib/index.js","mtime":1640440446305},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/cache-loader/dist/cjs.js","mtime":1640440446558},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/vue-loader/lib/index.js","mtime":1640440454211}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapActions, mapGetters } from 'vuex';\nimport localAxios from \"../../../services/http/client\";\nimport formMixin from \"../../../mixins/form.js\";\nimport { required, sameAs, minLength, maxLength } from 'vuelidate/lib/validators';\nimport * as getter from \"../../../store/getters-types\";\nimport * as action from \"../../../store/action-types\";\nimport * as mutation from \"../../../store/mutation-types\";\nexport default {\n  name: 'change-password',\n  mixins: [formMixin],\n  data: function data() {\n    return {\n      oldPassword: '',\n      password: '',\n      confirmPassword: '' // loaded          : false\n\n    };\n  },\n  validations: {\n    password: {\n      required: required,\n      minLength: minLength(8),\n      maxLength: maxLength(16)\n    },\n    oldPassword: {\n      required: required // asyncValidation(v) {\n      //     if (this.loaded === false) {\n      //         console.log('Data isnt loaded yet to asyncValidation returns true');\n      //         return true;\n      //     }\n      //     return new Promise((resolve, reject) => {\n      //         console.log('Checking server for validation...');\n      //         setTimeout(() => {\n      //             console.log('Server responded to validation request');\n      //             if (v === 'foo') {\n      //                 resolve(true);\n      //             } else {\n      //                 resolve(false);\n      //             }\n      //         }, 500);\n      //     });\n      // }\n\n    },\n    confirmPassword: {\n      sameAsPassword: sameAs('password')\n    }\n  },\n  computed: _objectSpread({}, mapGetters({\n    getError: getter.GET_ERROR,\n    buttonStatus: getter.GET_BUTTON\n  })),\n  mounted: function mounted() {\n    this.$store.commit(mutation.SET_ERROR, null);\n  },\n  methods: {\n    reset: function reset() {\n      var formData = {\n        oldPassword: this.oldPassword,\n        password: this.password,\n        confirmPassword: this.confirmPassword\n      };\n      this.$store.commit(mutation.SET_ERROR, null);\n      this.$store.commit(mutation.BUTTON_STATUS, true);\n      this.$store.dispatch(action.CHANGES_PASSWORD, formData);\n    },\n    setOldPassword: function setOldPassword(value) {\n      this.oldPassword = value;\n      this.$v.oldPassword.$touch();\n    },\n    setPassword: function setPassword(value) {\n      this.password = value;\n      this.$v.password.$touch();\n    },\n    setConfirmPassword: function setConfirmPassword(value) {\n      this.confirmPassword = value;\n      this.$v.confirmPassword.$touch();\n    }\n  }\n};",{"version":3,"sources":["ChangePassword.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA,SAAA,UAAA,EAAA,UAAA,QAAA,MAAA;AACA,OAAA,UAAA;AACA,OAAA,SAAA;AACA,SAAA,QAAA,EAAA,MAAA,EAAA,SAAA,EAAA,SAAA,QAAA,0BAAA;AACA,OAAA,KAAA,MAAA;AACA,OAAA,KAAA,MAAA;AACA,OAAA,KAAA,QAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,iBADA;AAEA,EAAA,MAAA,EAAA,CAAA,SAAA,CAFA;AAGA,EAAA,IAHA,kBAGA;AACA,WAAA;AACA,MAAA,WAAA,EAAA,EADA;AAEA,MAAA,QAAA,EAAA,EAFA;AAGA,MAAA,eAAA,EAAA,EAHA,CAIA;;AAJA,KAAA;AAMA,GAVA;AAWA,EAAA,WAAA,EAAA;AACA,IAAA,QAAA,EAAA;AACA,MAAA,QAAA,EAAA,QADA;AAEA,MAAA,SAAA,EAAA,SAAA,CAAA,CAAA,CAFA;AAGA,MAAA,SAAA,EAAA,SAAA,CAAA,EAAA;AAHA,KADA;AAMA,IAAA,WAAA,EAAA;AACA,MAAA,QAAA,EAAA,QADA,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAlBA,KANA;AA0BA,IAAA,eAAA,EAAA;AACA,MAAA,cAAA,EAAA,MAAA,CAAA,UAAA;AADA;AA1BA,GAXA;AAyCA,EAAA,QAAA,oBACA,UAAA,CAAA;AACA,IAAA,QAAA,EAAA,MAAA,CAAA,SADA;AAEA,IAAA,YAAA,EAAA,MAAA,CAAA;AAFA,GAAA,CADA,CAzCA;AA+CA,EAAA,OA/CA,qBA+CA;AACA,SAAA,MAAA,CAAA,MAAA,CAAA,QAAA,CAAA,SAAA,EAAA,IAAA;AACA,GAjDA;AAkDA,EAAA,OAAA,EAAA;AACA,IAAA,KADA,mBACA;AACA,UAAA,QAAA,GAAA;AACA,QAAA,WAAA,EAAA,KAAA,WADA;AAEA,QAAA,QAAA,EAAA,KAAA,QAFA;AAGA,QAAA,eAAA,EAAA,KAAA;AAHA,OAAA;AAKA,WAAA,MAAA,CAAA,MAAA,CAAA,QAAA,CAAA,SAAA,EAAA,IAAA;AACA,WAAA,MAAA,CAAA,MAAA,CAAA,QAAA,CAAA,aAAA,EAAA,IAAA;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,gBAAA,EAAA,QAAA;AACA,KAVA;AAWA,IAAA,cAXA,0BAWA,KAXA,EAWA;AACA,WAAA,WAAA,GAAA,KAAA;AACA,WAAA,EAAA,CAAA,WAAA,CAAA,MAAA;AACA,KAdA;AAeA,IAAA,WAfA,uBAeA,KAfA,EAeA;AACA,WAAA,QAAA,GAAA,KAAA;AACA,WAAA,EAAA,CAAA,QAAA,CAAA,MAAA;AACA,KAlBA;AAmBA,IAAA,kBAnBA,8BAmBA,KAnBA,EAmBA;AACA,WAAA,eAAA,GAAA,KAAA;AACA,WAAA,EAAA,CAAA,eAAA,CAAA,MAAA;AACA;AAtBA;AAlDA,CAAA","sourcesContent":["<template>\n    <vue-scroll class=\"login-page align-vertical\">\n        <div class=\"form-wrapper align-vertical-middle\">\n            <div class=\"form-box card-base card-shadow--extraLarge\">\n                <img class=\"image-logo\" src=\"@/assets/images/logo.svg\" alt=\"logo\"/>\n                    <float-label class=\"styled\" :class=\"{ 'form-group--error': $v.oldPassword.$error }\">\n                        <input\n                                type=\"password\"\n                                name=\"oldPassword\"\n                                @blur=\"$v.oldPassword.$touch\"\n                                @change=\"setOldPassword($event.target.value)\"\n                                placeholder=\"Old Password\">\n                        <span v-if=\"$v.oldPassword.$error\">\n                            <p class=\"error\" style=\"color: red; margin: 4px\" v-if=\"!$v.oldPassword.required\">Field is required</p>\n                            <!--<p class=\"error\" style=\"color: red\" v-if=\"!$v.oldPassword.between\">Must be between {{$v.oldPassword.$params.between.min}} and {{$v.oldPassword.$params.between.max}}</p>-->\n                        </span>\n                            <p style=\"color: red; margin: 4px\" v-show=\"getError\">Please Input Valid Old Password</p>\n                    </float-label>\n\n                    <float-label class=\"styled\">\n                        <input\n                                type=\"password\"\n                                name=\"password\"\n                                @blur=\"$v.password.$touch\"\n                                @change=\"setPassword($event.target.value)\"\n                                placeholder=\"New Password\">\n                        <span v-if=\"$v.password.$error\">\n                            <p class=\"error\" style=\"color: red; margin: 4px\" v-if=\"!$v.password.required\">Field is required</p>\n                            <p class=\"error\" style=\"color: red; margin: 4px\" v-if=\"!$v.password.minlength\">The Password must have at least {{$v.password.$params.minLength.min}} characters.</p>\n                            <p class=\"error\" style=\"color: red; margin: 4px\" v-if=\"!$v.password.maxLength\">The Password must have at most {{$v.password.$params.maxLength.max}} characters.</p>\n                        </span>\n                    </float-label>\n\n                    <float-label class=\"styled\">\n                        <input\n                                type=\"password\"\n                                name=\"password_confirmation\"\n                                @blur=\"$v.confirmPassword.$touch\"\n                                @change=\"setConfirmPassword($event.target.value)\"\n                                placeholder=\"Confirm Password\">\n                        <span v-if=\"$v.confirmPassword.$error\">\n                            <p class=\"error\" style=\"color: red; margin: 4px\" v-if=\"!$v.confirmPassword.sameAsPassword\">Passwords must be identical.</p>\n                        </span>\n                    </float-label>\n                <div class=\"flex text-center center pt-30 pb-10\">\n                    <el-button plain\n                               size=\"small\"\n                               :loading=\"buttonStatus\"\n                               @click=\"reset\"\n                               class=\"login-btn tada animated\">\n                        SUBMIT\n                    </el-button>\n                </div>\n            </div>\n        </div>\n    </vue-scroll>\n</template>\n\n<script>\n    import { mapActions, mapGetters } from 'vuex'\n    import localAxios from '../../../services/http/client'\n    import formMixin from '../../../mixins/form.js'\n    import { required, sameAs, minLength, maxLength } from 'vuelidate/lib/validators'\n    import * as getter from '../../../store/getters-types'\n    import * as action from '../../../store/action-types'\n    import * as mutation from '../../../store/mutation-types'\n\n    export default {\n        name: 'change-password',\n        mixins: [formMixin],\n        data() {\n            return {\n                    oldPassword     : '',\n                    password        : '',\n                    confirmPassword : '',\n                    // loaded          : false\n            }\n        },\n        validations: {\n            password: {\n                required,\n                minLength: minLength(8),\n                maxLength: maxLength(16)\n            },\n            oldPassword: {\n                required,\n                // asyncValidation(v) {\n                //     if (this.loaded === false) {\n                //         console.log('Data isnt loaded yet to asyncValidation returns true');\n                //         return true;\n                //     }\n                //     return new Promise((resolve, reject) => {\n                //         console.log('Checking server for validation...');\n                //         setTimeout(() => {\n                //             console.log('Server responded to validation request');\n                //             if (v === 'foo') {\n                //                 resolve(true);\n                //             } else {\n                //                 resolve(false);\n                //             }\n                //         }, 500);\n                //     });\n                // }\n            },\n            confirmPassword: {\n                sameAsPassword: sameAs('password')\n            }\n        },\n        computed: {\n            ...mapGetters({\n                getError\t: getter.GET_ERROR,\n                buttonStatus: getter.GET_BUTTON\n            })\n        },\n        mounted(){\n            this.$store.commit(mutation.SET_ERROR, null)\n        },\n        methods: {\n            reset() {\n                const formData = {\n                    oldPassword         : this.oldPassword,\n                    password            : this.password,\n                    confirmPassword     : this.confirmPassword\n                };\n                this.$store.commit(mutation.SET_ERROR, null)\n                this.$store.commit(mutation.BUTTON_STATUS, true)\n                this.$store.dispatch(action.CHANGES_PASSWORD,formData)\n            },\n            setOldPassword(value) {\n                this.oldPassword = value\n                this.$v.oldPassword.$touch()\n            },\n            setPassword(value) {\n                this.password = value\n                this.$v.password.$touch()\n            },\n            setConfirmPassword(value) {\n                this.confirmPassword = value\n                this.$v.confirmPassword.$touch()\n            },\n        }\n    }\n</script>\n\n<style lang=\"scss\">\n    @import '../../../assets/scss/_variables';\n\n    .login-page {\n        background: $text-color;\n        margin-left: -30px;\n        margin-right: -30px;\n\n        .form-wrapper {\n            width: 100%;\n        }\n\n        .form-box {\n            width: 100%;\n            max-width: 340px;\n            padding: 30px;\n            box-sizing: border-box;\n            margin: 20px auto;\n\n            a {\n                font-size: 14px;\n                color: $text-color-accent;\n                text-decoration: none;\n                font-weight: 500;\n            }\n\n            .image-logo {\n                width: 80px;\n                margin: 0px auto;\n                margin-bottom: 30px;\n                display: block;\n            }\n            .input.invalid input {\n                border: 1px solid red;\n                background-color: #ffc9aa;\n            }\n            .input.invalid label {\n                color: red;\n            }\n\n            .login-btn ,\n            .social-btn {\n                width: 160px;\n\n                &.google {\n                    margin-bottom: 10px;\n                    background-color: #d73d32;\n                    color: white;\n\n                    &:hover {\n                        border-color: #d73d32;\n                    }\n                }\n                &.facebook {\n                    background-color: #3f5c9a;\n                    color: white;\n\n                    &:hover {\n                        border-color: #3f5c9a;\n                    }\n                }\n            }\n\n            .signin-box {\n                font-size: 14px;\n            }\n        }\n    }\n    @media (max-width: 768px) {\n        .layout-container .container .view.login-page {\n            margin-left: -5px;\n            margin-right: -5px;\n            max-width: calc(100% + 10px);\n        }\n    }\n</style>"],"sourceRoot":"src/views/pages/authentication"}]}