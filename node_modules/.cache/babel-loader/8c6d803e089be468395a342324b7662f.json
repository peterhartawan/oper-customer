{"remainingRequest":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/babel-loader/lib/index.js!/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/src/components/employee/task-employee.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/src/components/employee/task-employee.vue","mtime":1640440454000},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/.babelrc","mtime":1640440444000},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/cache-loader/dist/cjs.js","mtime":1641690455583},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/babel-loader/lib/index.js","mtime":1641690444038},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/cache-loader/dist/cjs.js","mtime":1641690455583},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/vue-loader/lib/index.js","mtime":1641690456354}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport * as getter from \"../../store/getters-types\";\nimport * as mutation from \"../../store/mutation-types\";\nimport * as action from \"../../store/action-types\";\nexport default {\n  data: function data() {\n    return {\n      tabTask: 'graphic',\n      tabOrder: 'today',\n      mapMark: null,\n      markers: [],\n      path: [],\n      infowindow: {\n        lat: 0,\n        lng: 0,\n        name: null\n      },\n      markDefault: {\n        lat: -6.21462,\n        lng: 106.84513\n      },\n      window_open: false,\n      mapsGraph: true,\n      options: {\n        fullWidth: true,\n        chartPadding: {\n          right: 40\n        }\n      },\n      createAss: true\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    orderGraphic: getter.GET_ORDER_BAR_GRAPHIC,\n    orderBar: getter.GET_ORDER_BAR,\n    listData: getter.GET_TRACKING_ORDER,\n    idorder: getter.GET_ID_ORDER,\n    trackingType: getter.GET_TRACKING_TYPE\n  })), {}, {\n    lineChart: function lineChart() {\n      if (this.orderGraphic !== null) {\n        return {\n          labels: this.orderGraphic.label,\n          series: this.orderGraphic.data\n        };\n      } else {\n        return {};\n      }\n    }\n  }),\n  created: function () {\n    var _created = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      var obj, i, marker;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.$store.dispatch(action.ORDER_GRAPHIC_BAR, {\n                v: 'today',\n                type: 'employee'\n              });\n\n            case 2:\n              this.$route.path === '/employee/inprogress' ? this.createAss = true : this.createAss = false;\n\n              if (!(this.$route.path === '/detail-task-employee')) {\n                _context.next = 8;\n                break;\n              }\n\n              obj = {\n                id: this.idorder,\n                page: 1,\n                type: this.trackingType\n              };\n              _context.next = 7;\n              return this.$store.dispatch(action.TRACKING, obj);\n\n            case 7:\n              for (i = 0; i < this.listData.length; i++) {\n                marker = {\n                  lat: parseFloat(this.listData[i].latitude),\n                  lng: parseFloat(this.listData[i].longitude),\n                  name: this.listData[i].created_at\n                };\n                this.markDefault.lat = parseFloat(this.listData[i].latitude);\n                this.markDefault.lng = parseFloat(this.listData[i].longitude);\n                this.markers.push({\n                  position: marker\n                });\n                this.path.push(marker);\n                this.mapMark = 1;\n              }\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function created() {\n      return _created.apply(this, arguments);\n    }\n\n    return created;\n  }(),\n  methods: {\n    totalTrack: function () {\n      var _totalTrack = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(v) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                v === 'graphic' ? this.mapsGraph = true : this.mapsGraph = false;\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function totalTrack(_x) {\n        return _totalTrack.apply(this, arguments);\n      }\n\n      return totalTrack;\n    }(),\n    totalOrder: function totalOrder(v) {\n      this.$store.dispatch(action.ORDER_GRAPHIC_BAR, {\n        v: v,\n        type: 'employee'\n      });\n    },\n    openWindow: function openWindow(position) {\n      this.window_open = true;\n      this.infowindow.lat = position.lat;\n      this.infowindow.lng = position.lng;\n      this.infowindow.name = position.name;\n    },\n    templateButton: function templateButton() {\n      this.$router.replace('/template-list');\n    },\n    assignButton: function assignButton() {\n      this.$router.replace('/employee/assign-task');\n    }\n  }\n};",{"version":3,"sources":["task-employee.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class=\"container\">\n        <el-row :gutter=\"10\" class=\"mb-70\">\n            <el-col :span=\"12\">\n                <div v-if=\"createAss\" class=\"mb-30\">\n                    <span class=\"font-weight-600 view-text mb-20\">TASK</span>\n                    <el-button\n                            @click=\"templateButton\"\n                            class=\"template tempAss\">\n                        Template\n                    </el-button>\n                    <el-button\n                            @click=\"assignButton\"\n                            class=\"assign tempAss\">\n                        Assign\n                    </el-button>\n                </div>\n                <div>\n                    <span class=\"font-weight-600 view-text\">VIEW</span>\n                    <el-radio-group v-model=\"tabTask\" @change=\"totalTrack\" fill=\"#AB0000\" class=\"mt-25\" >\n                        <el-radio-button label=\"graphic\"><span class=\"font-button padding-20\">Graphic</span></el-radio-button>\n                        <el-radio-button label=\"tracking\"><span class=\"font-button padding-20\" >Tracking</span></el-radio-button>\n                    </el-radio-group>\n                </div>\n            </el-col>\n            <el-col :span=\"12\">\n                <el-row>\n                        <span class=\"font-weight-600 view-text\" >TOTAL ORDER</span>\n                    <el-col :span=\"10\" :offset=\"14\">\n                        <el-radio-group v-model=\"tabOrder\" @change=\"totalOrder\" fill=\"#ababab\" size=\"small\">\n                            <el-radio-button label=\"today\">Today</el-radio-button>\n                            <el-radio-button label=\"week\">Week</el-radio-button>\n                            <el-radio-button label=\"month\">Month</el-radio-button>\n                        </el-radio-group>\n                    </el-col>\n                </el-row>\n\n                <el-row >\n                    <el-col :lg=\"24\">\n                        <el-card shadow=\"always\" class=\"card-border\" :body-style=\"{padding: '0px'}\">\n                            <el-row :gutter=\"20\">\n                                <el-col :span=\"8\">\n                                    <el-row class=\"font-icon line\" justify=\"center\">\n                                        <el-col :span=\"9\">\n                                            <img src=\"../../assets/oper_asset/open.png\" class=\"drive-acount padding-left-3\">\n                                        </el-col>\n                                        <el-col :span=\"15\" class=\"text-center font-weight-500 font-size-45\">\n                                            0\n                                        </el-col>\n                                    </el-row>\n                                </el-col>\n                                <el-col :span=\"8\" v-if=\"orderBar !== null\">\n                                    <el-row class=\"font-icon line\" justify=\"center\">\n                                        <el-col :span=\"9\">\n                                            <img src=\"../../assets/oper_asset/progress.png\" class=\"drive-acount\">\n                                        </el-col>\n                                        <el-col :span=\"15\" class=\"text-center font-weight-500 font-size-45\">\n                                            {{orderBar.order_inprogress}}\n                                        </el-col>\n                                    </el-row>\n                                </el-col>\n                                <el-col :span=\"8\" v-if=\"orderBar !== null\">\n                                    <el-row class=\"font-icon\" justify=\"center\" style=\"padding-right: 30px\">\n                                        <el-col :span=\"9\">\n                                            <img src=\"../../assets/oper_asset/completed.png\" class=\"drive-acount\">\n                                        </el-col>\n                                        <el-col :span=\"15\" class=\"text-center font-weight-500 font-size-45\">\n                                            {{orderBar.order_complete}}\n                                        </el-col>\n                                    </el-row>\n                                </el-col>\n                            </el-row>\n                        </el-card>\n                    </el-col>\n                </el-row>\n            </el-col>\n        </el-row>\n\n        <div v-if=\"mapsGraph\">\n            <h4>ORDER DETAILS</h4>\n            <!--v-if=\"orderGraphic !== null\"-->\n            <div class=\"card-base card-shadow--medium p-30 mt-25 bg-white border-line-hight\">\n                <vue-chartist :data=\"lineChart\" type=\"Line\"></vue-chartist>\n            </div>\n        </div>\n\n        <div v-else>\n            <h4>ORDER DETAILS</h4>\n            <div class=\"card-base card-shadow--medium bg-white\">\n                <gmap-map :center=\"markDefault\" :zoom=\"16\" style=\"width: 100%; height: 500px\">\n                    <div v-if=\"mapMark\">\n                        <gmap-marker :key=\"index\" v-for=\"(m, index) in markers\" :position=\"m.position\" :clickable=\"true\" @click=\"openWindow(m.position)\"></gmap-marker>\n                        <gmap-info-window @closeclick=\"window_open=false\" :opened=\"window_open\" :position=\"infowindow\" :options=\"{ pixelOffset: { width: 0, height: -35},}\">\n                            {{infowindow.name}}\n                        </gmap-info-window>\n                        <gmap-polyline :path=\"path\" :options=\"{ strokeColor:'#BB0000'}\">\n                        </gmap-polyline>\n                    </div>\n                </gmap-map>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\n\n    import { mapGetters } from 'vuex';\n    import * as getter from \"../../store/getters-types\";\n    import * as mutation from \"../../store/mutation-types\";\n    import * as action from \"../../store/action-types\";\n    export default {\n        data(){\n            return {\n                tabTask     : 'graphic',\n                tabOrder    : 'today',\n                mapMark: null,\n                markers: [],\n                path: [],\n                infowindow: {\n                    lat: 0,\n                    lng: 0,\n                    name: null,\n                },\n                markDefault: {\n                    lat: -6.21462,\n                    lng: 106.84513\n                },\n                window_open: false,\n                mapsGraph: true,\n                options: {\n                    fullWidth: true,\n                    chartPadding: {\n                        right: 40\n                    }\n                },\n                createAss: true,\n            }\n        },\n        computed: {\n            ...mapGetters({\n                orderGraphic : getter.GET_ORDER_BAR_GRAPHIC,\n                orderBar     : getter.GET_ORDER_BAR,\n                listData     : getter.GET_TRACKING_ORDER,\n                idorder      : getter.GET_ID_ORDER,\n                trackingType : getter.GET_TRACKING_TYPE\n            }),\n            lineChart (){\n                if(this.orderGraphic !== null){\n                    return {\n                        labels: this.orderGraphic.label,\n                        series: this.orderGraphic.data\n                    }\n                } else {\n                    return {}\n                }\n            }\n        },\n        async created(){\n            await this.$store.dispatch(action.ORDER_GRAPHIC_BAR, {\n                v       : 'today',\n                type    : 'employee'\n            });\n            (this.$route.path === '/employee/inprogress') ? this.createAss = true : this.createAss = false;\n            if(this.$route.path === '/detail-task-employee'){\n                let obj = {\n                    id      : this.idorder,\n                    page    : 1,\n                    type    : this.trackingType\n                };\n                await this.$store.dispatch(action.TRACKING, obj);\n                for (let i = 0; i < this.listData.length; i++) {\n                    const marker = {\n                        lat: parseFloat(this.listData[i].latitude),\n                        lng: parseFloat(this.listData[i].longitude),\n                        name: this.listData[i].created_at\n                    };\n                    this.markDefault.lat = parseFloat(this.listData[i].latitude);\n                    this.markDefault.lng = parseFloat(this.listData[i].longitude);\n                    this.markers.push({\n                        position: marker\n                    });\n                    this.path.push(marker);\n                    this.mapMark = 1;\n                }\n            }\n        },\n        methods: {\n            async totalTrack(v){\n                (v === 'graphic') ? this.mapsGraph = true : this.mapsGraph = false;\n            },\n            totalOrder(v) {\n                this.$store.dispatch(action.ORDER_GRAPHIC_BAR, {\n                    v,\n                    type    : 'employee'\n                })\n            },\n            openWindow(position) {\n                this.window_open = true;\n                this.infowindow.lat = position.lat;\n                this.infowindow.lng = position.lng;\n                this.infowindow.name = position.name;\n            },\n            templateButton(){\n                this.$router.replace('/template-list')\n            },\n            assignButton(){\n                this.$router.replace('/employee/assign-task')\n            },\n        }\n\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    @import '../../assets/scss/_variables';\n    .container {\n        font-family: Arial;\n    }\n    .font-icon {\n        font-size: 20px;\n    }\n    .line {\n        border-right: 1px solid $line-color;\n        padding-right: 30px;\n    }\n    .view-text {\n        display: block;\n        font-size: 15px;\n    }\n    .drive-acount {\n        height: 40px;\n        margin-top: 10px;\n    }\n    .font-button {\n        font-size: 19px;\n    }\n    .template {\n        padding: 30px 40px;\n        @extend .font-button;\n    }\n    .assign {\n        padding: 30px 50px;\n        @extend .font-button;\n    }\n    .tempAss {\n        background:  #AB0000;\n        color: white\n    }\n</style>"],"sourceRoot":"src/components/employee"}]}