{"remainingRequest":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/babel-loader/lib/index.js!/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/src/store/modules/notif/index.js","dependencies":[{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/src/store/modules/notif/index.js","mtime":1628175042613},{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/.babelrc","mtime":1628175042295},{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":["import _defineProperty from \"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\nvar _mutations, _actions;\n\nimport * as action from \"../../action-types\";\nimport * as mutation from \"../../mutation-types\";\nimport * as getter from \"../../getters-types\";\nimport localAxios from \"../../../services/http/client\";\nimport * as typeS from \"../../../services/path_service\";\nvar state = {\n  totalNotif: null,\n  intervalTime: null\n};\nvar mutations = (_mutations = {}, _defineProperty(_mutations, mutation.SET_NOTIF, function (state, payload) {\n  var token = localStorage.getItem('token');\n  state.intervalTime = setInterval( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n    var _yield$localAxios$get, data;\n\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return localAxios.get(typeS.notification, {\n              headers: {\n                'Authorization': 'Bearer ' + token\n              }\n            });\n\n          case 2:\n            _yield$localAxios$get = _context.sent;\n            data = _yield$localAxios$get.data;\n            state.totalNotif = data.data.total;\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), payload);\n}), _defineProperty(_mutations, mutation.CLEAR_NOTIF, function (state) {\n  clearInterval(state.intervalTime);\n}), _defineProperty(_mutations, mutation.SET_NOTIF_TO_NOL, function (state, payload) {\n  state.totalNotif = payload;\n}), _mutations);\nvar actions = (_actions = {}, _defineProperty(_actions, action.NOTIFICATION, function (_ref2, payload) {\n  var commit = _ref2.commit,\n      dispatch = _ref2.dispatch;\n  commit(mutation.SET_NOTIF, process.env.VUE_APP_INTERVAL_TIME);\n}), _defineProperty(_actions, action.MARK_AS_READ, function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref3) {\n    var commit, dispatch, token, foo, _yield$localAxios$pos, data;\n\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            commit = _ref3.commit, dispatch = _ref3.dispatch;\n            _context2.prev = 1;\n            token = localStorage.getItem('token');\n            _context2.next = 5;\n            return localAxios.post(\"\".concat(typeS.notification, \"markasread\"), foo, {\n              headers: {\n                'Authorization': 'Bearer ' + token\n              }\n            });\n\n          case 5:\n            _yield$localAxios$pos = _context2.sent;\n            data = _yield$localAxios$pos.data;\n            commit(mutation.SET_NOTIF_TO_NOL, null);\n            _context2.next = 13;\n            break;\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2[\"catch\"](1);\n            dispatch(action.DATA_ERROR, _context2.t0);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[1, 10]]);\n  }));\n\n  return function (_x) {\n    return _ref4.apply(this, arguments);\n  };\n}()), _actions);\n\nvar getters = _defineProperty({}, getter.GET_NOTIF, function (state) {\n  return state.totalNotif;\n});\n\nexport default {\n  state: state,\n  mutations: mutations,\n  actions: actions,\n  getters: getters\n};",{"version":3,"sources":["/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/src/store/modules/notif/index.js"],"names":["action","mutation","getter","localAxios","typeS","state","totalNotif","intervalTime","mutations","SET_NOTIF","payload","token","localStorage","getItem","setInterval","get","notification","headers","data","total","CLEAR_NOTIF","clearInterval","SET_NOTIF_TO_NOL","actions","NOTIFICATION","commit","dispatch","process","env","VUE_APP_INTERVAL_TIME","MARK_AS_READ","post","foo","DATA_ERROR","getters","GET_NOTIF"],"mappings":";;;;;;AAAA,OAAO,KAAKA,MAAZ;AACA,OAAO,KAAKC,QAAZ;AACA,OAAO,KAAKC,MAAZ;AACA,OAAOC,UAAP;AACA,OAAO,KAAKC,KAAZ;AAEA,IAAMC,KAAK,GAAG;AACVC,EAAAA,UAAU,EAAG,IADH;AAEVC,EAAAA,YAAY,EAAE;AAFJ,CAAd;AAKA,IAAMC,SAAS,iDACVP,QAAQ,CAACQ,SADC,YACUJ,KADV,EACiBK,OADjB,EACyB;AAChC,MAAIC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;AACCR,EAAAA,KAAK,CAACE,YAAN,GAAqBO,WAAW,uEAAE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACVX,UAAU,CAACY,GAAX,CAAeX,KAAK,CAACY,YAArB,EAChB;AAAEC,cAAAA,OAAO,EAAE;AAAC,iCAAiB,YAAUN;AAA5B;AAAX,aADgB,CADU;;AAAA;AAAA;AACzBO,YAAAA,IADyB,yBACzBA,IADyB;AAI9Bb,YAAAA,KAAK,CAACC,UAAN,GAAmBY,IAAI,CAACA,IAAL,CAAUC,KAA7B;;AAJ8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAF,IAK9BT,OAL8B,CAAhC;AAMJ,CATU,+BAUVT,QAAQ,CAACmB,WAVC,YAUYf,KAVZ,EAUkB;AACzBgB,EAAAA,aAAa,CAAChB,KAAK,CAACE,YAAP,CAAb;AACH,CAZU,+BAaVN,QAAQ,CAACqB,gBAbC,YAaiBjB,KAbjB,EAawBK,OAbxB,EAagC;AACvCL,EAAAA,KAAK,CAACC,UAAN,GAAmBI,OAAnB;AACH,CAfU,cAAf;AAkBA,IAAMa,OAAO,6CACPvB,MAAM,CAACwB,YADA,mBACkCd,OADlC,EAC2C;AAAA,MAA5Be,MAA4B,SAA5BA,MAA4B;AAAA,MAApBC,QAAoB,SAApBA,QAAoB;AAC/CD,EAAAA,MAAM,CAACxB,QAAQ,CAACQ,SAAV,EAAqBkB,OAAO,CAACC,GAAR,CAAYC,qBAAjC,CAAN;AACJ,CAHQ,6BAIF7B,MAAM,CAAC8B,YAJL;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAIoBL,YAAAA,MAJpB,SAIoBA,MAJpB,EAI4BC,QAJ5B,SAI4BA,QAJ5B;AAAA;AAMGf,YAAAA,KANH,GAMWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CANX;AAAA;AAAA,mBAOmBV,UAAU,CAAC4B,IAAX,WAAmB3B,KAAK,CAACY,YAAzB,iBAChBgB,GADgB,EAEZ;AAAEf,cAAAA,OAAO,EAAE;AAAC,iCAAiB,YAAUN;AAA5B;AAAX,aAFY,CAPnB;;AAAA;AAAA;AAOIO,YAAAA,IAPJ,yBAOIA,IAPJ;AAWDO,YAAAA,MAAM,CAACxB,QAAQ,CAACqB,gBAAV,EAA4B,IAA5B,CAAN;AAXC;AAAA;;AAAA;AAAA;AAAA;AAaDI,YAAAA,QAAQ,CAAC1B,MAAM,CAACiC,UAAR,eAAR;;AAbC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,eAAb;;AAkBA,IAAMC,OAAO,uBACRhC,MAAM,CAACiC,SADC,YACU9B,KADV,EACgB;AACrB,SAAOA,KAAK,CAACC,UAAb;AACH,CAHQ,CAAb;;AAMA,eAAe;AACXD,EAAAA,KAAK,EAALA,KADW;AAEXG,EAAAA,SAAS,EAATA,SAFW;AAGXe,EAAAA,OAAO,EAAPA,OAHW;AAIXW,EAAAA,OAAO,EAAPA;AAJW,CAAf","sourcesContent":["import * as action from '../../action-types'\nimport * as mutation from '../../mutation-types'\nimport * as getter from '../../getters-types'\nimport localAxios from \"../../../services/http/client\";\nimport * as typeS from '../../../services/path_service'\n\nconst state = {\n    totalNotif : null,\n    intervalTime: null\n};\n\nconst mutations = {\n    [mutation.SET_NOTIF](state, payload){\n        let token = localStorage.getItem('token');\n         state.intervalTime = setInterval( async ()=> {\n             let {data}  = await localAxios.get(typeS.notification,\n                 { headers: {'Authorization': 'Bearer '+token}\n                 });\n             state.totalNotif = data.data.total\n        }, payload)\n    },\n    [mutation.CLEAR_NOTIF](state){\n        clearInterval(state.intervalTime)\n    },\n    [mutation.SET_NOTIF_TO_NOL](state, payload){\n        state.totalNotif = payload\n    }\n};\n\nconst actions = {\n     [action.NOTIFICATION]({commit, dispatch}, payload) {\n         commit(mutation.SET_NOTIF, process.env.VUE_APP_INTERVAL_TIME);\n    },\n    async [action.MARK_AS_READ]({commit, dispatch}) {\n        try {\n            let token = localStorage.getItem('token'), foo;\n            let {data}  = await localAxios.post(`${typeS.notification}markasread`,\n                foo,\n                    { headers: {'Authorization': 'Bearer '+token}\n                    });\n            commit(mutation.SET_NOTIF_TO_NOL, null);\n        } catch (err) {\n            dispatch(action.DATA_ERROR, err)\n        }\n    },\n};\n\nconst getters = {\n    [getter.GET_NOTIF](state){\n        return state.totalNotif\n    }\n};\n\nexport default {\n    state,\n    mutations,\n    actions,\n    getters\n}"]}]}