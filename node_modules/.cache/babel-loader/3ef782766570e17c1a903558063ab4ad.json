{"remainingRequest":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/thread-loader/dist/cjs.js!/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/babel-loader/lib/index.js!/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/src/views/ui/Maps/GMaps.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/src/views/ui/Maps/GMaps.vue","mtime":1640440455024},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/.babelrc","mtime":1640440444342},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/cache-loader/dist/cjs.js","mtime":1640440446558},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/thread-loader/dist/cjs.js","mtime":1640440453952},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/babel-loader/lib/index.js","mtime":1640440446305},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/cache-loader/dist/cjs.js","mtime":1640440446558},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/vue-loader/lib/index.js","mtime":1640440454211}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport * as VueGoogleMaps from 'vue2-google-maps';\nexport default {\n  name: 'GMapsPage',\n  data: function data() {\n    return {\n      start: null,\n      end: null,\n      lastId: 1,\n      center: {\n        lat: 48.8538302,\n        lng: 2.2982161\n      },\n      reportedCenter: {\n        lat: 48.8538302,\n        lng: 2.2982161\n      },\n      mapBounds: {},\n      clustering: true,\n      zoom: 7,\n      gridSize: 50,\n      mapType: 'terrain',\n      markers: [],\n      markersEven: false,\n      drag: 0,\n      mapClickedCount: 0,\n      ifw: true,\n      ifw2: false,\n      ifw2text: 'You can also use the content prop to set your modal',\n      mapStyle: 'green',\n      circleBounds: {},\n      displayCircle: false,\n      displayRectangle: false,\n      rectangleBounds: {\n        north: 33.685,\n        south: 50.671,\n        east: -70.234,\n        west: -116.251\n      },\n      originalPlPath: [{\n        lat: 37.772,\n        lng: -122.214\n      }, {\n        lat: 21.291,\n        lng: -157.821\n      }, {\n        lat: -18.142,\n        lng: 178.431\n      }, {\n        lat: -27.467,\n        lng: 153.027\n      }],\n      plPath: [{\n        lat: 37.772,\n        lng: -122.214\n      }, {\n        lat: 21.291,\n        lng: -157.821\n      }, {\n        lat: -18.142,\n        lng: 178.431\n      }, {\n        lat: -27.467,\n        lng: 153.027\n      }],\n      pleditable: true,\n      plvisible: false,\n      pgvisible: false,\n      pgPath: [[{\n        lat: 38.872886,\n        lng: -77.054720\n      }, {\n        lat: 38.872602,\n        lng: -77.058046\n      }, {\n        lat: 38.870080,\n        lng: -77.058604\n      }, {\n        lat: 38.868894,\n        lng: -77.055664\n      }, {\n        lat: 38.870598,\n        lng: -77.053346\n      }], [{\n        lat: 38.871684,\n        lng: -77.056780\n      }, {\n        lat: 38.871867,\n        lng: -77.055449\n      }, {\n        lat: 38.870915,\n        lng: -77.054891\n      }, {\n        lat: 38.870113,\n        lng: -77.055836\n      }, {\n        lat: 38.870581,\n        lng: -77.057037\n      }]],\n      opgPath: [[{\n        lat: 38.872886,\n        lng: -77.054720\n      }, {\n        lat: 38.872602,\n        lng: -77.058046\n      }, {\n        lat: 38.870080,\n        lng: -77.058604\n      }, {\n        lat: 38.868894,\n        lng: -77.055664\n      }, {\n        lat: 38.870598,\n        lng: -77.053346\n      }], [{\n        lat: 38.871684,\n        lng: -77.056780\n      }, {\n        lat: 38.871867,\n        lng: -77.055449\n      }, {\n        lat: 38.870915,\n        lng: -77.054891\n      }, {\n        lat: 38.870113,\n        lng: -77.055836\n      }, {\n        lat: 38.870581,\n        lng: -77.057037\n      }]],\n      scrollwheel: true\n    };\n  },\n  computed: {\n    curvedPath: function curvedPath() {\n      var _this = this;\n\n      if (this.start && this.end) {\n        return _.range(100).map(function (i) {\n          var tick = i / 99;\n          /* Bezier curve -- set up the control points */\n\n          var dlat = _this.end.latLng.lat() - _this.start.latLng.lat();\n\n          var dlng = _this.end.latLng.lng() - _this.start.latLng.lng();\n\n          var cp1 = {\n            lat: _this.start.latLng.lat() + 0.33 * dlat + 0.33 * dlng,\n            lng: _this.start.latLng.lng() - 0.33 * dlat + 0.33 * dlng\n          };\n          var cp2 = {\n            lat: _this.end.latLng.lat() - 0.33 * dlat + 0.33 * dlng,\n            lng: _this.end.latLng.lng() - 0.33 * dlat - 0.33 * dlng\n          };\n          /* Bezier curve formula */\n\n          return {\n            lat: tick * tick * tick * _this.start.latLng.lat() + 3 * ((1 - tick) * tick * tick) * cp1.lat + 3 * ((1 - tick) * (1 - tick) * tick) * cp2.lat + (1 - tick) * (1 - tick) * (1 - tick) * _this.end.latLng.lat(),\n            lng: tick * tick * tick * _this.start.latLng.lng() + 3 * ((1 - tick) * tick * tick) * cp1.lng + 3 * ((1 - tick) * (1 - tick) * tick) * cp2.lng + (1 - tick) * (1 - tick) * (1 - tick) * _this.end.latLng.lng()\n          };\n        });\n      }\n    },\n    activeMarkers: function activeMarkers() {\n      if (this.markersEven) {\n        return this.markers.filter(function (v, k) {\n          return k % 2 == 0;\n        });\n      } else {\n        return this.markers;\n      }\n    },\n    mapStyles: function mapStyles() {\n      switch (this.mapStyle) {\n        case 'normal':\n          return [];\n\n        case 'red':\n          return [{\n            stylers: [{\n              hue: '#890000'\n            }, {\n              visibility: 'simplified'\n            }, {\n              gamma: 0.5\n            }, {\n              weight: 0.5\n            }]\n          }, {\n            elementType: 'labels',\n            stylers: [{\n              visibility: 'off'\n            }]\n          }, {\n            featureType: 'water',\n            stylers: [{\n              color: '#890000'\n            }]\n          }];\n\n        default:\n          return [{\n            stylers: [{\n              hue: '#899999'\n            }, {\n              visibility: 'on'\n            }, {\n              gamma: 0.5\n            }, {\n              weight: 0.5\n            }]\n          }, {\n            featureType: 'road',\n            stylers: [{\n              visibility: 'off'\n            }]\n          }, {\n            featureType: 'transit.line',\n            stylers: [{\n              color: '#FF0000'\n            }]\n          }, {\n            featureType: 'poi',\n            elementType: 'labels.icon',\n            stylers: [{\n              visibility: 'on'\n            }, {\n              weight: 10\n            }]\n          }, {\n            featureType: 'water',\n            stylers: [{\n              color: '#8900FF'\n            }, {\n              weight: 9999900000\n            }]\n          }];\n      }\n    }\n  },\n  methods: {\n    clicked: function clicked(e) {\n      if (!this.start && !this.end) {\n        this.start = {\n          latLng: e.latLng\n        };\n      } else if (this.start && !this.end) {\n        this.end = {\n          latLng: e.latLng\n        };\n      } else {\n        this.start = {\n          latLng: e.latLng\n        };\n        this.end = null;\n      }\n    },\n    mapClicked: function mapClicked(mouseArgs) {\n      console.log('map clicked', mouseArgs); // eslint-disable-line no-console\n    },\n    mapRclicked: function mapRclicked(mouseArgs) {\n      var createdMarker = this.addMarker();\n      createdMarker.position.lat = mouseArgs.latLng.lat();\n      createdMarker.position.lng = mouseArgs.latLng.lng();\n    },\n    addMarker: function addMarker() {\n      this.lastId++;\n      this.markers.push({\n        id: this.lastId,\n        position: {\n          lat: 48.8538302,\n          lng: 2.2982161\n        },\n        opacity: 1,\n        draggable: true,\n        enabled: true,\n        clicked: 0,\n        rightClicked: 0,\n        dragended: 0,\n        ifw: true,\n        ifw2text: 'This text is bad please change me :( '\n      });\n      return this.markers[this.markers.length - 1];\n    },\n    resetPlPath: function resetPlPath() {\n      this.plPath = this.originalPlPath;\n    },\n    update: function update(field, event) {\n      if (field === 'reportedCenter') {\n        // N.B. It is dangerous to update this.center\n        // Because the center reported by Google Maps is not exactly\n        // the same as the center you pass it.\n        // Instead we update this.center only when the input field is changed.\n        this.reportedCenter = {\n          lat: event.lat(),\n          lng: event.lng()\n        }; // If you wish to test the problem out for yourself, uncomment the following\n        // and see how your browser begins to hang:\n        // this.center = _.clone(this.reportedCenter)\n      } else if (field === 'bounds') {\n        this.mapBounds = event;\n      } else {\n        this.$set(this, field, event);\n      }\n    },\n    updateChild: function updateChild(object, field, event) {\n      if (field === 'position') {\n        object.position = {\n          lat: event.lat(),\n          lng: event.lng()\n        };\n      }\n    },\n    updatePolygonPaths: function updatePolygonPaths(paths) {\n      //eslint-disable-line no-unused-vars\n      console.log('updatePolygonPaths', paths);\n    },\n    updatePolylinePath: function updatePolylinePath(paths) {\n      //eslint-disable-line no-unused-vars\n      console.log('updatePolylinePath', paths);\n    },\n    updateCircle: function updateCircle(prop, value) {\n      if (prop === 'radius') {\n        this.radius = value;\n      } else if (prop === 'bounds') {\n        this.circleBounds = value;\n      }\n    },\n    updateRectangle: function updateRectangle(prop, value) {\n      if (prop === 'bounds') {\n        this.rectangleBounds = value;\n      }\n    },\n    updatePlace: function updatePlace(place) {\n      if (place && place.geometry && place.geometry.location) {\n        var marker = this.addMarker();\n        marker.position.lat = place.geometry.location.lat();\n        marker.position.lng = place.geometry.location.lng();\n      }\n    }\n  },\n  components: {\n    'ground-overlay': {\n      render: function render() {\n        return '';\n      },\n      mixins: [VueGoogleMaps.MapElementMixin],\n      props: ['source', 'bounds', 'opacity'],\n      deferredReady: function deferredReady() {\n        this.$overlay = new google.maps.GroundOverlay(this.source, this.bounds);\n        this.$overlay.setOpacity(this.opacity);\n        this.$overlay.setMap(this.$map);\n      },\n      destroyed: function destroyed() {\n        if (this.$overlay) this.$overlay.setMap(null);\n      }\n    }\n  }\n};",{"version":3,"sources":["GMaps.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n\t<div class=\"page-gmaps scrollable\">\n\t\t<div class=\"page-header\">\n\t\t\t<h1>G Maps</h1>\n\t\t\t<el-breadcrumb separator=\"/\">\n\t\t\t\t<el-breadcrumb-item :to=\"{ path: '/' }\"><i class=\"mdi mdi-home-outline\"></i></el-breadcrumb-item>\n\t\t\t\t<el-breadcrumb-item>Components</el-breadcrumb-item>\n\t\t\t\t<el-breadcrumb-item>Maps</el-breadcrumb-item>\n\t\t\t\t<el-breadcrumb-item>G Maps</el-breadcrumb-item>\n\t\t\t</el-breadcrumb>\n\t\t</div>\n\n\t\t<div class=\"card-base card-shadow--medium\">\n\t\t\t<h2 class=\"ph-20\">Click twice on the map</h2>\n\t\t\t<gmap-map ref=\"map\" @click=\"clicked\"\n\t\t\t\t:center=\"{lat:40.720917, lng:-74.001308}\"\n\t\t\t\t:zoom=\"12\"\n\t\t\t\t:options=\"{gestureHandling:'cooperative'}\"\n\t\t\t\tmap-type-id=\"roadmap\"\n\t\t\t\tstyle=\"width: 100%; height: 500px\"\n\t\t\t>\n\t\t\t\t<GmapMarker v-if=\"start\" :position=\"start.latLng\" label=\"S\" />\n\t\t\t\t<GmapMarker v-if=\"end\" :position=\"end.latLng\" label=\"E\" />\n\t\t\t\t<GmapPolyline v-if=\"curvedPath\" :path=\"curvedPath\" />\n\t\t\t</gmap-map>\n\t\t</div>\n\n\t\t<div class=\"card-base card-shadow--medium mt-30\">\n\t\t\t<h2 class=\"ph-20\">Terrain map</h2>\n\t\t\t<gmap-map\n\t\t\t\t:center=\"{lat:40.720917, lng:-74.001308}\"\n\t\t\t\t:zoom=\"12\"\n\t\t\t\t:options=\"{gestureHandling:'cooperative'}\"\n\t\t\t\tmap-type-id=\"terrain\"\n\t\t\t\tstyle=\"width: 100%; height: 500px\"\n\t\t\t></gmap-map>\n\t\t</div>\n\n\t\t<div class=\"card-base card-shadow--medium mt-30\">\n\t\t\t<h2 class=\"ph-20\">Overlay map</h2>\n\t\t\t<gmap-map \n\t\t\t\t:center=\"{lat: 1.38, lng: 103.8}\" \n\t\t\t\t:zoom=\"12\"\n\t\t\t\t:options=\"{gestureHandling:'cooperative'}\"\n\t\t\t\tstyle=\"width: 100%; height: 500px\"\n\t\t\t>\n\t\t\t\t<ground-overlay source=\"/static/maps/overlay.png\" :bounds=\"{\n\t\t\t\t\t\tnorth: 1.502,\n\t\t\t\t\t\tsouth: 1.185,\n\t\t\t\t\t\teast: 104.0262,\n\t\t\t\t\t\twest: 103.5998,\n\t\t\t\t\t}\" :opacity=\"0.5\">\n\t\t\t\t</ground-overlay>\n\t\t\t</gmap-map>\n\t\t</div>\n\n\t\t<!--<div class=\"card-base card-shadow--medium mt-30 flex map-app\">\n\t\t\t<div class=\"settings-panel box scrollable only-y ph-20\">\n\t\t\t\t<h3>Map information</h3> \n\t\t\t\t<ul>\n\t\t\t\t\t<li>Map center latitude: <strong>{{reportedCenter.lat}}</strong></li>\n\t\t\t\t\t<li>Map center longitude: <strong>{{reportedCenter.lng}}</strong></li>\n\t\t\t\t\t<li>Map bounds: <strong><pre>{{mapBounds}}</pre></strong></li>\n\t\t\t\t\t<li>Map zoom: <strong>{{zoom}}</strong></li>\n\t\t\t\t\t<li>Dragged times: <strong>{{drag}}</strong></li>\n\t\t\t\t\t<li>Left clicked times: <strong>{{mapClickedCount}}</strong></li>\n\t\t\t\t\t<li>Map type: \n\t\t\t\t\t\t<select id=\"\" name=\"\" v-model=\"mapType\">\n\t\t\t\t\t\t\t<option value=\"roadmap\">roadmap</option>\n\t\t\t\t\t\t\t<option value=\"hybrid\">hybrid</option>\n\t\t\t\t\t\t\t<option value=\"satellite\">satellite</option>\n\t\t\t\t\t\t\t<option value=\"terrain\">terrain</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>Map style: \n\t\t\t\t\t\t<select id=\"\" name=\"\" v-model=\"mapStyle\">\n\t\t\t\t\t\t\t<option value=\"red\">red</option>\n\t\t\t\t\t\t\t<option value=\"green\">green</option>\n\t\t\t\t\t\t\t<option value=\"normal\">normal</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>Enable scrollwheel zooming on the map: <input type=\"checkbox\" v-model=\"scrollwheel\"></li>\n\t\t\t\t\t<li><button @click=\"addMarker\"> Add a new Marker</button> (or right click on the map)</li>\n\t\t\t\t</ul>\n\t\t\t\t\t\n\t\t\t\t<h3>Clusters</h3> \n\t\t\t\t<ul>\n\t\t\t\t\t<li>Enabled: <input type=\"checkbox\" v-model=\"clustering\" number></li>\n\t\t\t\t\t<li>Grid size: <input type=\"number\" v-model=\"gridSize\" number></li>\n\t\t\t\t</ul>\n\n\t\t\t\t<h3>Polyline</h3> \n\t\t\t\t<ul>\n\t\t\t\t\t<li>Editable: <input type=\"checkbox\" v-model=\"pleditable\" number></li>\n\t\t\t\t\t<li>Visible: <input type=\"checkbox\" v-model=\"plvisible\" number></li>\n\t\t\t\t\t<li><button @click=\"resetPlPath\">Reset path</button></li>\n\t\t\t\t</ul>\n\n\t\t\t\t<h3>Polygon</h3> \n\t\t\t\t<ul>\n\t\t\t\t\t<li>Visible: <input type=\"checkbox\" v-model=\"pgvisible\" number></li>\n\t\t\t\t\t<li><button @click=\"pgPath = opgPath\">Reset Polygon to pentagon</button></li>\n\t\t\t\t\t<li><button @click=\"pgPath = originalPlPath\">Reset Polygon to a simple polygon</button></li>\n\t\t\t\t\t<li>Path: <strong><pre>{{pgPath}}</pre></strong></li>\n\t\t\t\t</ul>\n\n\t\t\t\t<h3>Circle</h3> \n\t\t\t\t<ul>\n\t\t\t\t\t<li>Visible: <input type=\"checkbox\" number v-model=\"displayCircle\"></li>\n\t\t\t\t\t<li>Bounds: <strong><pre>{{circleBounds}}</pre></strong></li>\n\t\t\t\t</ul>\n\n\t\t\t\t<h3>Rectangle</h3> \n\t\t\t\t<ul>\n\t\t\t\t\t<li>Visible: <input type=\"checkbox\" number v-model=\"displayRectangle\"></li>\n\t\t\t\t\t<li>Bounds: <strong><pre>{{rectangleBounds}}</pre></strong></li>\n\t\t\t\t</ul>\n\n\t\t\t\t<h3>PlaceInput</h3> \n\t\t\t\t<ul>\n\t\t\t\t\t<li><gmap-place-input label=\"Add a marker at this place \" :select-first-on-enter=\"true\" @place_changed=\"updatePlace($event)\"></gmap-place-input></li>\n\t\t\t\t</ul>\n\n\t\t\t\t<h3>Standalone infoWindow</h3> \n\t\t\t\t<ul>\n\t\t\t\t\t<li>modal 1 : <input type=\"checkbox\" number v-model=\"ifw\"></li>\n\t\t\t\t\t<li>modal 2: <input type=\"checkbox\" number v-model=\"ifw2\"> <input type=\"text\" v-model=\"ifw2text\"></li>\n\t\t\t\t</ul>\n\n\t\t\t\t<h3>Markers</h3> \n\t\t\t\t<ul>\n\t\t\t\t\t<li>Display only markers with even ID (to test filters) <input type=\"checkbox\" number v-model=\"markersEven\"></li>\n\t\t\t\t</ul>\n\n\t\t\t\t<ul class=\"marker-box\" v-if=\"!markers.length\">\n\t\t\t\t\t<li>no markers</li>\n\t\t\t\t</ul>\n\n\t\t\t\t<ul v-for=\"(m, index) in markers\" :key=\"index\" class=\"marker-box\">\n\t\t\t\t\t<li>lat: <strong>{{m.position.lat}}</strong></li>\n\t\t\t\t\t<li>lng: <strong>{{m.position.lng}}</strong></li>\n\t\t\t\t\t<li>opacity: <strong>{{m.opacity}}</strong></li>\n\t\t\t\t\t<li>enabled: <input type=\"checkbox\" v-model=\"m.enabled\" number></li>\n\t\t\t\t\t<li>draggable: <input type=\"checkbox\" v-model=\"m.draggable\" number></li>\n\t\t\t\t\t<li>clicked: <strong>{{m.clicked}}</strong></li>\n\t\t\t\t\t<li>right: clicked <strong>{{m.rightClicked}}</strong></li>\n\t\t\t\t\t<li>drag-ended: <strong>{{m.dragended}}</strong></li>\n\t\t\t\t\t<li>open info window: <input type=\"checkbox\" v-model=\"m.ifw\" number></li>\n\t\t\t\t\t<li>infoWIndow text: <input type=\"text\" v-model=\"m.ifw2text\"></li>\n\t\t\t\t\t<li><button @click=\"markers.splice(markers.indexOf(m), 1)\">delete me</button></li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\t\t\t<gmap-map \n\t\t\t\t:center=\"center\" \n\t\t\t\t:zoom=\"zoom\" \n\t\t\t\t:map-type-id=\"mapType\" \n\t\t\t\t:options=\"{styles: mapStyles, scrollwheel: scrollwheel, gestureHandling:'cooperative'}\" \n\t\t\t\t@rightclick=\"mapRclicked\" \n\t\t\t\t@drag=\"drag++\" \n\t\t\t\t@click=\"mapClickedCount++\" \n\t\t\t\tclass=\"map-panel box grow\" \n\t\t\t\t@zoom_changed=\"update('zoom', $event)\" \n\t\t\t\t@center_changed=\"update('reportedCenter', $event)\"\n\t\t\t\t@maptypeid_changed=\"update('mapType', $event)\"\n\t\t\t\t@bounds_changed=\"update('bounds', $event)\"\n\t\t\t>\n\t\t\t\t<gmap-cluster :grid-size=\"gridSize\" v-if=\"clustering\">\n\t\t\t\t\t<gmap-marker v-for=\"m in activeMarkers\" :key=\"m.id\" v-if=\"m.enabled\" \n\t\t\t\t\t\t:position=\"m.position\" \n\t\t\t\t\t\t:opacity=\"m.opacity\" \n\t\t\t\t\t\t:draggable=\"m.draggable\" \n\t\t\t\t\t\t@click=\"m.clicked++\" \n\t\t\t\t\t\t@rightclick=\"m.rightClicked++\" \n\t\t\t\t\t\t@dragend=\"m.dragended++\"\n\t\t\t\t\t\t@position_changed=\"updateChild(m, 'position', $event)\" \n\t\t\t\t\t>\n\t\t\t\t\t\t<gmap-info-window :opened=\"m.ifw\">{{m.ifw2text}}</gmap-info-window>\n\t\t\t\t\t</gmap-marker>\n\t\t\t\t</gmap-cluster>\n\t\t\t\t<div v-if=\"!clustering\">\n\t\t\t\t\t<gmap-marker v-for=\"m in activeMarkers\" :key=\"m.id\" v-if=\"m.enabled\"\n\t\t\t\t\t\t:position=\"m.position\" \n\t\t\t\t\t\t:opacity=\"m.opacity\"\n\t\t\t\t\t\t:draggable=\"m.draggable\" \n\t\t\t\t\t\t@click=\"m.clicked++\" \n\t\t\t\t\t\t@rightclick=\"m.rightClicked++\" \n\t\t\t\t\t\t@dragend=\"m.dragended++\" \n\t\t\t\t\t\t@position_changed=\"updateChild(m, 'position', $event)\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<gmap-info-window :opened=\"m.ifw\">{{m.ifw2text}}</gmap-info-window>\n\t\t\t\t\t</gmap-marker>\n\t\t\t\t</div>\n\n\t\t\t\t<gmap-info-window :position=\"reportedCenter\" :opened=\"ifw\">\n\t\t\t\t\tTo show you the bindings are working\n\t\t\t\t\t<br/>I will stay on the center of the screen \n\t\t\t\t\t<br/>whatever you do.<br>\n\t\t\t\t\t<br/>Map clicked: <b>{{mapClickedCount}}</b>\n\t\t\t\t</gmap-info-window>\n\n\t\t\t\t<gmap-info-window :position=\"reportedCenter\" :opened=\"ifw2\">{{ifw2text}}</gmap-info-window>\n\n\t\t\t\t<gmap-polyline v-if=\"plvisible\" \n\t\t\t\t\t:path=\"plPath\" \n\t\t\t\t\t:editable=\"pleditable\" \n\t\t\t\t\t:draggable=\"true\" \n\t\t\t\t\t:options=\"{geodesic:true, strokeColor:'#FF0000'}\" \n\t\t\t\t\t@path_changed=\"updatePolylinePath($event)\"\n\t\t\t\t></gmap-polyline>\n\t\t\t\t<gmap-polygon v-if=\"pgvisible\"\n\t\t\t\t\t:paths=\"pgPath\" \n\t\t\t\t\t:editable=\"true\" \n\t\t\t\t\t:options=\"{geodesic:true, strokeColor:'#FF0000', fillColor:'#000000'}\"\n\t\t\t\t\t@paths_changed=\"updatePolygonPaths($event)\"\n\t\t\t\t></gmap-polygon>\n\t\t\t\t<gmap-circle v-if=\"displayCircle\" \n\t\t\t\t\t:bounds=\"circleBounds\" \n\t\t\t\t\t:center=\"reportedCenter\" \n\t\t\t\t\t:radius=\"100000\" \n\t\t\t\t\t:options=\"{editable: true}\" \n\t\t\t\t\t@radius_changed=\"updateCircle('radius', $event)\" \n\t\t\t\t\t@bounds_changed=\"updateCircle('bounds', $event)\"\n\t\t\t\t></gmap-circle>\n\t\t\t\t<gmap-rectangle v-if=\"displayRectangle\" \n\t\t\t\t\t:bounds=\"rectangleBounds\" \n\t\t\t\t\t:options=\"{editable: true}\" \n\t\t\t\t\t@bounds_changed=\"updateRectangle('bounds', $event)\"\n\t\t\t\t></gmap-rectangle>\n\t\t\t</gmap-map>\n\t\t</div>-->\n\n\t\t<h4><a href=\"https://github.com/xkjyeah/vue-google-maps\" target=\"_blank\"><i class=\"mdi mdi-link-variant\"></i> reference</a></h4>\t\n\n\t</div>\n</template>\n\n<script>\nimport * as VueGoogleMaps from 'vue2-google-maps'\n\nexport default {\n\tname: 'GMapsPage',\n\tdata () {\n\t\treturn {\n\t\t\tstart: null,\n\t\t\tend: null,\n\t\t\tlastId: 1,\n\t\t\tcenter: {\n\t\t\t\tlat: 48.8538302,\n\t\t\t\tlng: 2.2982161\n\t\t\t},\n\t\t\treportedCenter: {\n\t\t\t\tlat: 48.8538302,\n\t\t\t\tlng: 2.2982161\n\t\t\t},\n\t\t\tmapBounds: {},\n\t\t\tclustering: true,\n\t\t\tzoom: 7,\n\t\t\tgridSize: 50,\n\t\t\tmapType: 'terrain',\n\t\t\tmarkers: [],\n\t\t\tmarkersEven: false,\n\t\t\tdrag: 0,\n\t\t\tmapClickedCount: 0,\n\t\t\tifw: true,\n\t\t\tifw2: false,\n\t\t\tifw2text: 'You can also use the content prop to set your modal',\n\t\t\tmapStyle: 'green',\n\t\t\tcircleBounds: {},\n\t\t\tdisplayCircle: false,\n\t\t\tdisplayRectangle: false,\n\t\t\trectangleBounds: {\n\t\t\t\tnorth: 33.685,\n\t\t\t\tsouth: 50.671,\n\t\t\t\teast: -70.234,\n\t\t\t\twest: -116.251\n\t\t\t},\n\t\t\toriginalPlPath: [\n\t\t\t\t{ lat: 37.772, lng: -122.214 }, \n\t\t\t\t{ lat: 21.291, lng: -157.821 }, \n\t\t\t\t{ lat: -18.142, lng: 178.431 }, \n\t\t\t\t{ lat: -27.467, lng: 153.027 }\n\t\t\t],\n\t\t\tplPath: [\n\t\t\t\t{ lat: 37.772, lng: -122.214 }, \n\t\t\t\t{ lat: 21.291, lng: -157.821 }, \n\t\t\t\t{ lat: -18.142, lng: 178.431 }, \n\t\t\t\t{ lat: -27.467, lng: 153.027 }\n\t\t\t],\n\t\t\tpleditable: true,\n\t\t\tplvisible: false,\n\t\t\tpgvisible: false,\n\t\t\tpgPath: [\n\t\t\t\t[\n\t\t\t\t\t{ lat: 38.872886, lng: -77.054720 },\n\t\t\t\t\t{ lat: 38.872602, lng: -77.058046 },\n\t\t\t\t\t{ lat: 38.870080, lng: -77.058604 },\n\t\t\t\t\t{ lat: 38.868894, lng: -77.055664 },\n\t\t\t\t\t{ lat: 38.870598, lng: -77.053346 }\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t{ lat: 38.871684, lng: -77.056780 },\n\t\t\t\t\t{ lat: 38.871867, lng: -77.055449 },\n\t\t\t\t\t{ lat: 38.870915, lng: -77.054891 },\n\t\t\t\t\t{ lat: 38.870113, lng: -77.055836 },\n\t\t\t\t\t{ lat: 38.870581, lng: -77.057037 }\n\t\t\t\t]\n\t\t\t],\n\t\t\topgPath: [\n\t\t\t\t[\n\t\t\t\t\t{ lat: 38.872886, lng: -77.054720 },\n\t\t\t\t\t{ lat: 38.872602, lng: -77.058046 },\n\t\t\t\t\t{ lat: 38.870080, lng: -77.058604 },\n\t\t\t\t\t{ lat: 38.868894, lng: -77.055664 },\n\t\t\t\t\t{ lat: 38.870598, lng: -77.053346 }\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t{ lat: 38.871684, lng: -77.056780 },\n\t\t\t\t\t{ lat: 38.871867, lng: -77.055449 },\n\t\t\t\t\t{ lat: 38.870915, lng: -77.054891 },\n\t\t\t\t\t{ lat: 38.870113, lng: -77.055836 },\n\t\t\t\t\t{ lat: 38.870581, lng: -77.057037 }\n\t\t\t\t]\n\t\t\t],\n\t\t\tscrollwheel: true\n\t\t}\n\t},\n\tcomputed: {\n\t\tcurvedPath () {\n\t\t\tif (this.start && this.end) {\n\t\t\t\treturn _.range(100).map(i => {\n\t\t\t\t\tconst tick = i / 99\n\n\t\t\t\t\t/* Bezier curve -- set up the control points */\n\t\t\t\t\tconst dlat = this.end.latLng.lat() - this.start.latLng.lat()\n\t\t\t\t\tconst dlng = this.end.latLng.lng() - this.start.latLng.lng()\n\n\t\t\t\t\tconst cp1 = {\n\t\t\t\t\t\tlat: this.start.latLng.lat() + 0.33 * dlat + 0.33 * dlng,\n\t\t\t\t\t\tlng: this.start.latLng.lng() - 0.33 * dlat + 0.33 * dlng,\n\t\t\t\t\t}\n\n\t\t\t\t\tconst cp2 = {\n\t\t\t\t\t\tlat: this.end.latLng.lat() - 0.33 * dlat + 0.33 * dlng,\n\t\t\t\t\t\tlng: this.end.latLng.lng() - 0.33 * dlat - 0.33 * dlng,\n\t\t\t\t\t}\n\n\t\t\t\t\t/* Bezier curve formula */\n\t\t\t\t\treturn {\n\t\t\t\t\t\tlat:\n\t\t\t\t\t\t\t(tick * tick * tick) * this.start.latLng.lat() +\n\t\t\t\t\t\t\t3 * ((1 - tick) * tick * tick) * cp1.lat +\n\t\t\t\t\t\t\t3 * ((1 - tick) * (1 - tick) * tick) * cp2.lat +\n\t\t\t\t\t\t\t((1 - tick) * (1 - tick) * (1 - tick)) * this.end.latLng.lat(),\n\t\t\t\t\t\tlng:\n\t\t\t\t\t\t\t(tick * tick * tick) * this.start.latLng.lng() +\n\t\t\t\t\t\t\t3 * ((1 - tick) * tick * tick) * cp1.lng +\n\t\t\t\t\t\t\t3 * ((1 - tick) * (1 - tick) * tick) * cp2.lng +\n\t\t\t\t\t\t\t((1 - tick) * (1 - tick) * (1 - tick)) * this.end.latLng.lng(),\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t},\n\t\tactiveMarkers() {\n\t\t\tif (this.markersEven) {\n\t\t\t\treturn this.markers.filter(\n\t\t\t\t\t(v, k) => k % 2 == 0\n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\treturn this.markers\n\t\t\t}\n\t\t},\n\t\tmapStyles() {\n\t\t\tswitch (this.mapStyle) {\n\t\t\t\tcase 'normal':\n\t\t\t\t\treturn []\n\t\t\t\tcase 'red':\n\t\t\t\t\treturn [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstylers: [\n\t\t\t\t\t\t\t\t{ hue: '#890000' },\n\t\t\t\t\t\t\t\t{ visibility: 'simplified' },\n\t\t\t\t\t\t\t\t{ gamma: 0.5 },\n\t\t\t\t\t\t\t\t{ weight: 0.5 }\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\telementType: 'labels',\n\t\t\t\t\t\t\tstylers: [ { visibility: 'off' } ]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfeatureType: 'water',\n\t\t\t\t\t\t\tstylers: [ { color: '#890000' } ]\n\t\t\t\t\t\t}\n\t\t\t\t\t];\n\t\t\t\tdefault:\n\t\t\t\t\treturn [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstylers: [{ hue: '#899999' }, { visibility: 'on' }, { gamma: 0.5 }, { weight: 0.5 }]\n\t\t\t\t\t\t}, \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfeatureType: 'road',\n\t\t\t\t\t\t\tstylers: [{ visibility: 'off' }]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfeatureType: 'transit.line',\n\t\t\t\t\t\t\tstylers: [{ color: '#FF0000' }]\n\t\t\t\t\t\t}, \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfeatureType: 'poi',\n\t\t\t\t\t\t\telementType: 'labels.icon',\n\t\t\t\t\t\t\tstylers: [{ visibility: 'on' }, { weight: 10 }]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfeatureType: 'water',\n\t\t\t\t\t\t\tstylers: [{ color: '#8900FF' }, { weight: 9999900000 }, ]\n\t\t\t\t\t\t}\n\t\t\t\t\t];\n\t\t\t}\n\t\t}\n\t},\n\tmethods: {\n\t\tclicked (e) {\n\t\t\tif (!this.start && !this.end) {\n\t\t\t\tthis.start = {\n\t\t\t\t\tlatLng: e.latLng\n\t\t\t\t}\n\t\t\t} else if (this.start && !this.end) {\n\t\t\t\tthis.end = {\n\t\t\t\t\tlatLng: e.latLng\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.start = {\n\t\t\t\t\tlatLng: e.latLng\n\t\t\t\t}\n\t\t\t\tthis.end = null\n\t\t\t}\n\t\t},\n\t\tmapClicked(mouseArgs) {\n\t\t\tconsole.log('map clicked', mouseArgs); // eslint-disable-line no-console\n\t\t},\n\t\tmapRclicked(mouseArgs) {\n\t\t\tconst createdMarker = this.addMarker()\n\t\t\tcreatedMarker.position.lat = mouseArgs.latLng.lat()\n\t\t\tcreatedMarker.position.lng = mouseArgs.latLng.lng()\n\t\t},\n\t\taddMarker: function addMarker() {\n\t\t\tthis.lastId++;\n\t\t\tthis.markers.push({\n\t\t\t\tid: this.lastId,\n\t\t\t\tposition: { lat: 48.8538302, lng: 2.2982161 },\n\t\t\t\topacity: 1,\n\t\t\t\tdraggable: true,\n\t\t\t\tenabled: true,\n\t\t\t\tclicked: 0,\n\t\t\t\trightClicked: 0,\n\t\t\t\tdragended: 0,\n\t\t\t\tifw: true,\n\t\t\t\tifw2text: 'This text is bad please change me :( '\n\t\t\t})\n\t\t\treturn this.markers[this.markers.length - 1]\n\t\t},\n\t\tresetPlPath() {\n\t\t\tthis.plPath = this.originalPlPath;\n\t\t},\n\t\tupdate(field, event) {\n\t\t\tif (field === 'reportedCenter') {\n\t\t\t\t// N.B. It is dangerous to update this.center\n\t\t\t\t// Because the center reported by Google Maps is not exactly\n\t\t\t\t// the same as the center you pass it.\n\t\t\t\t// Instead we update this.center only when the input field is changed.\n\t\t\t\tthis.reportedCenter = { lat: event.lat(), lng: event.lng() }\n\t\t\t\t// If you wish to test the problem out for yourself, uncomment the following\n\t\t\t\t// and see how your browser begins to hang:\n\t\t\t\t// this.center = _.clone(this.reportedCenter)\n\t\t\t} else if (field === 'bounds') {\n\t\t\t\tthis.mapBounds = event\n\t\t\t} else {\n\t\t\t\tthis.$set(this, field, event)\n\t\t\t}\n\t\t},\n\t\tupdateChild(object, field, event) {\n\t\t\tif (field === 'position') {\n\t\t\t\tobject.position = { lat: event.lat(), lng: event.lng() }\n\t\t\t}\n\t\t},\n\t\tupdatePolygonPaths(paths) { //eslint-disable-line no-unused-vars\n\t\t\tconsole.log('updatePolygonPaths', paths)\n\t\t},\n\t\tupdatePolylinePath(paths) { //eslint-disable-line no-unused-vars\n\t\t\tconsole.log('updatePolylinePath', paths)\n\t\t},\n\t\tupdateCircle(prop, value) {\n\t\t\tif (prop === 'radius') {\n\t\t\t\tthis.radius = value\n\t\t\t} else if (prop === 'bounds') {\n\t\t\t\tthis.circleBounds = value\n\t\t\t}\n\t\t},\n\t\tupdateRectangle(prop, value) {\n\t\t\tif (prop === 'bounds') {\n\t\t\t\tthis.rectangleBounds = value\n\t\t\t}\n\t\t},\n\t\tupdatePlace(place) {\n\t\t\tif (place && place.geometry && place.geometry.location) {\n\t\t\t\tvar marker = this.addMarker()\n\t\t\t\tmarker.position.lat = place.geometry.location.lat()\n\t\t\t\tmarker.position.lng = place.geometry.location.lng()\n\t\t\t}\n\t\t}\n\t},\n\tcomponents: {\n\t\t'ground-overlay': {\n\t\t\trender() {\n\t\t\t\treturn '';\n\t\t\t},\n\t\t\tmixins: [VueGoogleMaps.MapElementMixin],\n\t\t\tprops: ['source', 'bounds', 'opacity'],\n\t\t\tdeferredReady: function() {\n\t\t\t\tthis.$overlay = new google.maps.GroundOverlay(\n\t\t\t\t\tthis.source,\n\t\t\t\t\tthis.bounds\n\t\t\t\t)\n\t\t\t\tthis.$overlay.setOpacity(this.opacity)\n\t\t\t\tthis.$overlay.setMap(this.$map)\n\t\t\t},\n\t\t\tdestroyed: function() {\n\t\t\t\tif(this.$overlay) this.$overlay.setMap(null)\n\t\t\t}\n\t\t}\n\t}\n\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import '../../../assets/scss/_variables';\n\n.page-gmaps {\n\t.map-app {\n\t\tmax-height: 500px;\n\n\t\t.settings-panel {\n\t\t\tbox-sizing: border-box;\n\t\t\tmax-width: 400px;\n\n\t\t\tul, li, select, button {\n\t\t\t\tfont-size: 10px;\n\t\t\t}\n\n\t\t\th3 {\n\t\t\t\tmargin-bottom: 0px;\n\t\t\t}\n\t\t\tul {\n\t\t\t\tmargin-top: 15px;\n\t\t\t}\n\t\t\t[type=\"checkbox\"] {\n\t\t\t\tposition: relative;\n\t\t\t\ttop: 2px;\n\t\t\t}\n\t\t\tli {\n\t\t\t\tmargin-bottom: 2px;\n\t\t\t}\n\t\t\tpre {\n\t\t\t\tmax-height: 200px;\n\t\t\t\toverflow: auto;\n\t\t\t}\n\n\t\t\t.marker-box {\n\t\t\t\tbackground: $background-color;\n\t\t\t\tpadding: 10px;\n\t\t\t\tbox-sizing: border-box;\n\t\t\t\tlist-style: none;\n\n\t\t\t\tli, select, button {\n\t\t\t\t\tfont-size: 14px;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n@media (max-width: 768px) {\n\t.page-gmaps {\n\t\t.map-app {\n\t\t\tmax-height: inherit !important;\n\t\t\tdisplay: block;\n\n\t\t\t.settings-panel, .map-panel {\n\t\t\t\tdisplay: block;\n\t\t\t\toverflow: hidden;\n\t\t\t\twidth: 100%;\n\t\t\t\tmax-width: 100%;\n\t\t\t\theight: 400px;\n\t\t\t}\n\t\t\t.settings-panel {\n\t\t\t\toverflow: auto;\n\t\t\t}\n\t\t}\n\t}\n}\n</style>\n<style lang=\"scss\">\n.page-gmaps {\n\t.map-app {\n\n\t\t.settings-panel {\n\n\t\t\t[type=\"text\"] { \n\t\t\t\tbackground-color: rgba(255, 255, 255, 0.2);\n\t\t\t\tborder: 1px solid rgba(255, 255, 255, 0.3);\n\t\t\t}\n\t\t}\n\t}\n}\n.gm-style .gm-style-iw {\n\tcolor: black;\n}\n</style>\n\n\n"],"sourceRoot":"src/views/ui/Maps"}]}