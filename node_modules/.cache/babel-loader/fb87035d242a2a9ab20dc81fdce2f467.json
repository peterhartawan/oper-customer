{"remainingRequest":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\src\\views\\pages\\employee\\listemployee\\list-complete.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\src\\views\\pages\\employee\\listemployee\\list-complete.vue","mtime":1647032353996},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\.babelrc","mtime":1644413672252},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\babel-loader\\lib\\index.js","mtime":1646338474621},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:/Users/ASUS/Documents/GitHub/oper-customer/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"C:/Users/ASUS/Documents/GitHub/oper-customer/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Affix from '@/components/Affix';\nimport { mapGetters } from 'vuex';\nimport * as getter from \"../../../../store/getters-types\";\nimport * as action from \"../../../../store/action-types\";\nimport * as mutation from \"../../../../store/mutation-types\";\nimport swal from 'sweetalert2';\nexport default {\n  name: 'Table',\n  data: function data() {\n    return {\n      currentPage: 1,\n      path: null,\n      input: '',\n      affixEnabled: true,\n      indexT: 1,\n      offset: null,\n      form: {\n        enterprise_name: '',\n        month: '',\n        trx_id: '',\n        to: '',\n        formP: ''\n      }\n    };\n  },\n  components: {\n    Affix: Affix\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    listData: getter.GET_LIST_EMPLOYEE,\n    paginate: getter.GET_PAGINATE_EMPLOYEE,\n    loading: getter.GET_BUTTON,\n    total: getter.GET_EMPLOYEE_TOTAL\n  })), {}, {\n    paginato: function paginato() {\n      return this.paginate;\n    },\n    indexTam: function indexTam() {\n      return this.indexT;\n    }\n  }),\n  created: function () {\n    var _created = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      var objList, obj, data;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // this.path = this.$route.path == '/order/open';\n              // (this.$route.path == '/order/open') ? this.offset = 0 : this.offset = 16\n              objList = {\n                dataList: null,\n                nextC: null,\n                prevC: null,\n                firstP: null,\n                fromPA: null,\n                total: null\n              };\n              _context.next = 3;\n              return this.$store.commit(mutation.SET_EMPLOYEE_LIST, objList);\n\n            case 3:\n              obj = {\n                page: this.currentPage,\n                path: '/employee/task/complete',\n                month: this.form.month,\n                trx_id: this.form.trx_id,\n                form: this.form.formP,\n                to: this.form.to\n              };\n              this.$store.commit(mutation.BUTTON_STATUS, true);\n              _context.next = 7;\n              return this.$store.dispatch(action.LIST_EMPLOYEE_TASK, obj);\n\n            case 7:\n              data = _context.sent;\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function created() {\n      return _created.apply(this, arguments);\n    }\n\n    return created;\n  }(),\n  methods: {\n    // newCorp()   {\n    //     this.$router.push('/order/create')\n    // },\n    // exportExcel(){\n    //     if(this.form.month === '' || this.form.month === '0' ){\n    //         swal('please select month (except all month)','', 'error')\n    //     }else {\n    //         let obj = {\n    //             path    : this.$route.path,\n    //             month   : this.form.month\n    //         }\n    //         this.$store.dispatch(action.EXPORT_ORDER_LIST, obj)\n    //     }\n    // },\n    handlePageChange: function handlePageChange(page) {\n      var obj = {\n        page: page,\n        path: '/employee/task/complete',\n        month: this.form.month,\n        trx_id: this.form.trx_id,\n        form: this.form.formP,\n        to: this.form.to\n      };\n      this.currentPage = page;\n      this.$store.dispatch(action.LIST_EMPLOYEE_TASK, obj);\n    },\n    search: function search() {\n      this.$store.dispatch(action.LIST_ORDER_CLIENT, this.input.trim());\n    },\n    templateButton: function templateButton() {\n      this.$router.push('/template-list');\n    },\n    assignButton: function assignButton() {\n      this.$router.push('/employee/assign-task');\n    },\n    getId: function () {\n      var _getId = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(id) {\n        var obj;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                obj = {\n                  id: id.idorder,\n                  path: '/employee/task/complete'\n                };\n                _context2.next = 3;\n                return this.$store.dispatch(action.EMPLOYEE_TASK_ID, obj);\n\n              case 3:\n                this.$router.push('/detail-task-employee');\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getId(_x) {\n        return _getId.apply(this, arguments);\n      }\n\n      return getId;\n    }(),\n    indexMethod: function indexMethod(index) {\n      return index + this.paginate.fromP;\n    },\n    searchSquare: function searchSquare() {\n      var obj = {\n        page: '1',\n        path: '/employee/task/complete',\n        month: this.form.month,\n        trx_id: this.form.trx_id,\n        form: this.form.formP,\n        to: this.form.to\n      };\n      this.$store.dispatch(action.LIST_EMPLOYEE_TASK, obj);\n    }\n  }\n};",{"version":3,"sources":["list-complete.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <div class=\"page-table scrollable only-y\" id=\"affix-container\">\r\n        <div class=\"card-base card-shadow--medium bg-white\">\r\n            <el-row :gutter=\"20\">\r\n                <el-col :span=\"24\" style=\"margin-bottom: 20px\">\r\n                    <el-breadcrumb separator=\"/\">\r\n                        <el-breadcrumb-item :to=\"{ path: '/employee/inprogress' }\">Inprogress</el-breadcrumb-item>\r\n                        <el-breadcrumb-item :to=\"{ path:'/employee/complete' }\">Complete</el-breadcrumb-item>\r\n                        <el-breadcrumb-item ></el-breadcrumb-item>\r\n                    </el-breadcrumb>\r\n                </el-col>\r\n<!--                <el-col :span=\"16\">-->\r\n<!--                    <div >-->\r\n<!--                        <el-button-->\r\n<!--                                v-if=\"path\"-->\r\n<!--                                @click=\"newCorp\"-->\r\n<!--                                type=\"primary\">-->\r\n<!--                            New Order-->\r\n<!--                        </el-button>-->\r\n<!--                    </div>-->\r\n<!--                </el-col>-->\r\n                <!--<el-col :lg=\"{span: 8, offset}\">-->\r\n                <!--<el-input-->\r\n                <!--placeholder=\"Search\"-->\r\n                <!--style=\"width: 300px\"-->\r\n                <!--v-model=\"input\"-->\r\n                <!--@change=\"search\">-->\r\n                <!--</el-input>-->\r\n                <!--</el-col>-->\r\n            </el-row>\r\n\r\n            <el-row :gutter=\"10\" style=\"margin-top: 20px\">\r\n                    <el-col :lg=\"{span: 10, offset:0}\">\r\n                        <el-button type=\"danger\" @click=\"templateButton\">\r\n                            Template\r\n                        </el-button>\r\n                        <el-button type=\"danger\" @click=\"assignButton\">\r\n                            Assign\r\n                        </el-button>\r\n                    </el-col>\r\n\r\n                <el-col :span=\"6\">\r\n                    <el-select v-model=\"form.month\" placeholder=\"Select Month\">\r\n                        <el-option label=\"All Months\" selected value=\"0\">All Months</el-option>\r\n                        <el-option label=\"January\" selected value=\"1\">January</el-option>\r\n                        <el-option label=\"February\" value=\"2\">February</el-option>\r\n                        <el-option label=\"March\" value=\"3\">March</el-option>\r\n                        <el-option label=\"April\" value=\"4\">April</el-option>\r\n                        <el-option label=\"May\" value=\"5\">May</el-option>\r\n                        <el-option label=\"June\" value=\"6\">June</el-option>\r\n                        <el-option label=\"July\" value=\"7\">July</el-option>\r\n                        <el-option label=\"August\" value=\"8\">August</el-option>\r\n                        <el-option label=\"September\" value=\"9\">September</el-option>\r\n                        <el-option label=\"October\" value=\"10\">October</el-option>\r\n                        <el-option label=\"November\" value=\"11\">November</el-option>\r\n                        <el-option label=\"December\" value=\"12\">December</el-option>\r\n                    </el-select>\r\n                </el-col>\r\n\r\n                <!--<el-col :span=\"6\">-->\r\n                    <!--<el-input-->\r\n                            <!--placeholder=\"Enterprise Name\"-->\r\n                            <!--v-model=\"form.enterprise_name\">-->\r\n                    <!--</el-input>-->\r\n                <!--</el-col>-->\r\n\r\n                <el-col :span=\"6\">\r\n                    <el-input\r\n                            placeholder=\"Transaction ID\"\r\n                            v-model=\"form.trx_id\">\r\n                    </el-input>\r\n                </el-col>\r\n\r\n                <el-col :span=\"1\">\r\n                    <el-button\r\n                            icon=\"el-icon-search\"\r\n                            @click=\"searchSquare\"\r\n                            square\r\n                            size=\"small\">\r\n\r\n                    </el-button>\r\n                </el-col>\r\n\r\n            </el-row>\r\n\r\n\r\n            <el-row>\r\n                <el-col :span=\"24\">\r\n                    <el-table\r\n                            v-loading=\"loading\"\r\n                            element-loading-text=\"Loading...\"\r\n                            element-loading-spinner=\"el-icon-loading\"\r\n                            element-loading-background=\"rgba(0, 0, 0, 0.8)\"\r\n                            :data=\"listData\"\r\n                            stripe\r\n                            style=\"width: 100%\"\r\n                            @row-click=\"getId\">\r\n                        <el-table-column\r\n                                type=\"index\"\r\n                                :index=\"indexMethod\"\r\n                                label=\"No\"\r\n                                width=\"80\">\r\n                        </el-table-column>\r\n                        <el-table-column\r\n                                prop=\"trx_id\"\r\n                                label=\"Transaction ID\">\r\n                        </el-table-column>\r\n                        <el-table-column\r\n                                prop=\"employee.user.name\"\r\n                                label=\"Name\">\r\n                        </el-table-column>\r\n                        <el-table-column\r\n                                prop=\"employee.employee_position.job_name\"\r\n                                label=\"Position\">\r\n                        </el-table-column>\r\n                        <el-table-column\r\n                                prop=\"status_text\"\r\n                                label=\"Status\">\r\n                        </el-table-column>\r\n                        <el-table-column\r\n                                prop=\"created_at\"\r\n                                label=\"Date\">\r\n                        </el-table-column>\r\n                    </el-table>\r\n                </el-col>\r\n            </el-row>\r\n\r\n            <el-row>\r\n                <el-col :lg=\"20\">\r\n                    <div class=\"grid-content\">\r\n                        <el-pagination\r\n                                background\r\n                                layout=\"prev, pager, next\"\r\n                                @current-change=\"handlePageChange\"\r\n                                :total=\"total\">\r\n\r\n                        </el-pagination>\r\n                    </div>\r\n                </el-col>\r\n                <!--<el-col :lg=\"4\">-->\r\n                    <!--<el-button-->\r\n                            <!--type=\"primary\"-->\r\n                            <!--@click=\"exportExcel\"-->\r\n                            <!--style=\"margin-top: 15px\">-->\r\n                        <!--Export-->\r\n                    <!--</el-button>-->\r\n                <!--</el-col>-->\r\n            </el-row>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import Affix from '@/components/Affix'\r\n    import { mapGetters } from 'vuex'\r\n    import * as getter from '../../../../store/getters-types'\r\n    import * as action from '../../../../store/action-types'\r\n    import * as mutation from '../../../../store/mutation-types'\r\n    import swal from 'sweetalert2'\r\n\r\n    export default {\r\n        name: 'Table',\r\n        data() {\r\n            return {\r\n                currentPage     : 1,\r\n                path            : null,\r\n                input           :'',\r\n                affixEnabled    : true,\r\n                indexT          : 1,\r\n                offset          : null,\r\n                form            : {\r\n                    enterprise_name : '',\r\n                    month           : '',\r\n                    trx_id          : '',\r\n                    to              : '',\r\n                    formP            : '',\r\n                }\r\n            }\r\n        },\r\n        components: {\r\n            Affix\r\n        },\r\n        computed: {\r\n            ...mapGetters({\r\n                listData : getter.GET_LIST_EMPLOYEE,\r\n                paginate : getter.GET_PAGINATE_EMPLOYEE,\r\n                loading  : getter.GET_BUTTON,\r\n                total    : getter.GET_EMPLOYEE_TOTAL\r\n            }),\r\n            paginato(){\r\n                return this.paginate\r\n            },\r\n            indexTam(){\r\n                return this.indexT\r\n            }\r\n        },\r\n        async created(){\r\n            // this.path = this.$route.path == '/order/open';\r\n            // (this.$route.path == '/order/open') ? this.offset = 0 : this.offset = 16\r\n\r\n            let objList = {\r\n                dataList    : null,\r\n                nextC       : null,\r\n                prevC       : null,\r\n                firstP      : null,\r\n                fromPA      : null,\r\n                total       : null\r\n            }\r\n            await this.$store.commit(mutation.SET_EMPLOYEE_LIST, objList)\r\n\r\n            let obj = {\r\n                page    : this.currentPage,\r\n                path    : '/employee/task/complete',\r\n                month           : this.form.month,\r\n                trx_id          : this.form.trx_id,\r\n                form            : this.form.formP,\r\n                to              : this.form.to\r\n            }\r\n            this.$store.commit(mutation.BUTTON_STATUS, true)\r\n            let data = await this.$store.dispatch(action.LIST_EMPLOYEE_TASK, obj)\r\n        },\r\n        methods: {\r\n            // newCorp()   {\r\n            //     this.$router.push('/order/create')\r\n            // },\r\n            // exportExcel(){\r\n            //     if(this.form.month === '' || this.form.month === '0' ){\r\n            //         swal('please select month (except all month)','', 'error')\r\n            //     }else {\r\n            //         let obj = {\r\n            //             path    : this.$route.path,\r\n            //             month   : this.form.month\r\n            //         }\r\n            //         this.$store.dispatch(action.EXPORT_ORDER_LIST, obj)\r\n            //     }\r\n            // },\r\n            handlePageChange(page) {\r\n                let obj = {\r\n                    page    : page,\r\n                    path    : '/employee/task/complete',\r\n                    month           : this.form.month,\r\n                    trx_id          : this.form.trx_id,\r\n                    form            : this.form.formP,\r\n                    to              : this.form.to\r\n                };\r\n                this.currentPage = page\r\n                this.$store.dispatch(action.LIST_EMPLOYEE_TASK, obj)\r\n            },\r\n            search(){\r\n                this.$store.dispatch( action.LIST_ORDER_CLIENT, this.input.trim() )\r\n            },\r\n            templateButton(){\r\n                this.$router.push('/template-list')\r\n            },\r\n            assignButton(){\r\n                this.$router.push('/employee/assign-task')\r\n            },\r\n           async getId(id){\r\n                let obj = {\r\n                    id    : id.idorder,\r\n                    path  : '/employee/task/complete'\r\n                };\r\n               await this.$store.dispatch(action.EMPLOYEE_TASK_ID, obj)\r\n                this.$router.push('/detail-task-employee')\r\n            },\r\n            indexMethod(index) {\r\n                return index + this.paginate.fromP;\r\n            },\r\n            searchSquare(){\r\n                let obj = {\r\n                    page    : '1',\r\n                    path    : '/employee/task/complete',\r\n                    month           : this.form.month,\r\n                    trx_id          : this.form.trx_id,\r\n                    form            : this.form.formP,\r\n                    to              : this.form.to\r\n                }\r\n                this.$store.dispatch(action.LIST_EMPLOYEE_TASK, obj)\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n\r\n\r\n    .table-box {\r\n        overflow: auto;\r\n    }\r\n    .el-pagination {\r\n        padding-top: 20px;\r\n    }\r\n    .card-base {\r\n        padding: 20px;\r\n    }\r\n    .el-row {\r\n        padding: 0px 10px;\r\n        &:last-child {\r\n            margin-bottom: 0;\r\n        }\r\n    }\r\n    .el-col {\r\n        border-radius: 5px;\r\n    }\r\n    .el-select {\r\n        width: 100%;\r\n    }\r\n</style>\r\n\r\n"],"sourceRoot":"src/views/pages/employee/listemployee"}]}