{"remainingRequest":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\src\\components\\Affix.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\src\\components\\Affix.vue","mtime":1644413760030},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\.babelrc","mtime":1644413672252},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\oper-customer\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  props: {\n    offset: {\n      type: Number,\n      default: 0\n    },\n    onAffix: {\n      type: Function,\n      default: function _default() {}\n    },\n    boundary: {\n      type: String,\n      default: ''\n    },\n    scrollerid: {\n      type: String,\n      default: ''\n    }\n  },\n  data: function data() {\n    return {\n      scroller: window,\n      scrollerIsWindow: true,\n      affixed: false,\n      styles: {},\n      affixedClientHeight: 0,\n      affixedClientWidth: 0,\n      wrapStyle: {}\n    };\n  },\n  methods: {\n    getScroll: function getScroll(w, top) {\n      var prop = this.scrollerIsWindow || w === window ? \"page\".concat(top ? 'Y' : 'X', \"Offset\") : \"scroll\".concat(top ? 'Top' : 'Left');\n      return this.scroller[prop];\n    },\n    getOffset: function getOffset(element) {\n      var rect = element.getBoundingClientRect();\n      var body = document.body; //console.log(rect, element.clientTop, body.clientTop)\n\n      var clientTop = element.clientTop || body.clientTop || 0;\n      var clientLeft = element.clientLeft || body.clientLeft || 0; //const clientHeight = element.clientHeight || 0;\n\n      var scrollTop = this.getScroll(this.scroller, true);\n      var scrollLeft = this.getScroll(this.scroller);\n      return {\n        top: rect.bottom + scrollTop - clientTop - this.affixedClientHeight,\n        left: rect.left + scrollLeft - clientLeft\n      };\n    },\n    handleScroll: function handleScroll() {\n      var scrollTop = this.getScroll(this.scroller, true) + this.offsets; // handle setting offset\n\n      var elementOffset = this.getOffset(this.$el);\n      var scrollerOffset = 60;\n\n      if (!this.affixed && scrollTop + scrollerOffset > elementOffset.top) {\n        this.affixed = true;\n        this.styles = {\n          top: \"\".concat(this.offsets + scrollerOffset, \"px\"),\n          left: \"\".concat(elementOffset.left, \"px\"),\n          width: \"\".concat(this.$el.offsetWidth, \"px\")\n        };\n        this.onAffix(this.affixed);\n      } // if setting boundary\n\n\n      if (this.boundary && scrollTop > elementOffset.top) {\n        var el = window.document.getElementById(this.boundary);\n\n        if (el) {\n          var boundaryOffset = this.getOffset(el);\n\n          if (scrollTop + this.offsets + scrollerOffset > boundaryOffset.top) {\n            //const top = scrollTop - boundaryOffset.top;\n            var top = boundaryOffset.top - scrollTop;\n            this.styles.top = \"\".concat(top, \"px\");\n          }\n        }\n      }\n\n      if (this.affixed && scrollTop + scrollerOffset < elementOffset.top) {\n        this.affixed = false;\n        this.styles = {};\n        this.onAffix(this.affixed);\n      }\n\n      if (this.affixed && this.boundary) {\n        var _el = window.document.getElementById(this.boundary);\n\n        if (_el) {\n          var _boundaryOffset = this.getOffset(_el);\n\n          if (scrollTop + this.offsets + scrollerOffset <= _boundaryOffset.top) {\n            //this.styles.top = 0 ;\n            this.styles.top = \"\".concat(0 + scrollerOffset, \"px\");\n          }\n        }\n      }\n    }\n  },\n  computed: {\n    offsets: function offsets() {\n      if (this.boundary) return 0;\n      return this.offset;\n    }\n  },\n  mounted: function mounted() {\n    if (this.scrollerid) {\n      this.scrollerIsWindow = false;\n      this.scroller = window.document.getElementById(this.scrollerid);\n    }\n\n    this.affixedClientHeight = this.$el.children[0].clientHeight;\n    this.affixedClientWidth = this.$el.children[0].clientWidth;\n    this.wrapStyle = {\n      height: \"\".concat(this.affixedClientHeight, \"px\"),\n      width: \"\".concat(this.affixedClientWidth, \"px\")\n    };\n    this.scroller.addEventListener('scroll', this.handleScroll);\n    this.scroller.addEventListener('resize', this.handleScroll);\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.scroller.removeEventListener('scroll', this.handleScroll);\n    this.scroller.removeEventListener('resize', this.handleScroll);\n  }\n};",{"version":3,"sources":["Affix.vue"],"names":[],"mappings":";;;;;;;;AAQA,eAAA;AACA,EAAA,KAAA,EAAA;AACA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KADA;AAKA,IAAA,OAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,MAAA,OAFA,sBAEA,CAAA;AAFA,KALA;AASA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KATA;AAaA,IAAA,UAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA;AAbA,GADA;AAoBA,EAAA,IApBA,kBAoBA;AACA,WAAA;AACA,MAAA,QAAA,EAAA,MADA;AAEA,MAAA,gBAAA,EAAA,IAFA;AAGA,MAAA,OAAA,EAAA,KAHA;AAIA,MAAA,MAAA,EAAA,EAJA;AAKA,MAAA,mBAAA,EAAA,CALA;AAMA,MAAA,kBAAA,EAAA,CANA;AAOA,MAAA,SAAA,EAAA;AAPA,KAAA;AASA,GA9BA;AAgCA,EAAA,OAAA,EAAA;AACA,IAAA,SADA,qBACA,CADA,EACA,GADA,EACA;AACA,UAAA,IAAA,GAAA,KAAA,gBAAA,IAAA,CAAA,KAAA,MAAA,iBAAA,GAAA,GAAA,GAAA,GAAA,GAAA,8BAAA,GAAA,GAAA,KAAA,GAAA,MAAA,CAAA;AAEA,aAAA,KAAA,QAAA,CAAA,IAAA,CAAA;AACA,KALA;AAMA,IAAA,SANA,qBAMA,OANA,EAMA;AACA,UAAA,IAAA,GAAA,OAAA,CAAA,qBAAA,EAAA;AACA,UAAA,IAAA,GAAA,QAAA,CAAA,IAAA,CAFA,CAGA;;AACA,UAAA,SAAA,GAAA,OAAA,CAAA,SAAA,IAAA,IAAA,CAAA,SAAA,IAAA,CAAA;AACA,UAAA,UAAA,GAAA,OAAA,CAAA,UAAA,IAAA,IAAA,CAAA,UAAA,IAAA,CAAA,CALA,CAMA;;AACA,UAAA,SAAA,GAAA,KAAA,SAAA,CAAA,KAAA,QAAA,EAAA,IAAA,CAAA;AACA,UAAA,UAAA,GAAA,KAAA,SAAA,CAAA,KAAA,QAAA,CAAA;AACA,aAAA;AACA,QAAA,GAAA,EAAA,IAAA,CAAA,MAAA,GAAA,SAAA,GAAA,SAAA,GAAA,KAAA,mBADA;AAEA,QAAA,IAAA,EAAA,IAAA,CAAA,IAAA,GAAA,UAAA,GAAA;AAFA,OAAA;AAIA,KAnBA;AAqBA,IAAA,YArBA,0BAqBA;AACA,UAAA,SAAA,GAAA,KAAA,SAAA,CAAA,KAAA,QAAA,EAAA,IAAA,IAAA,KAAA,OAAA,CADA,CACA;;AACA,UAAA,aAAA,GAAA,KAAA,SAAA,CAAA,KAAA,GAAA,CAAA;AAEA,UAAA,cAAA,GAAA,EAAA;;AAEA,UAAA,CAAA,KAAA,OAAA,IAAA,SAAA,GAAA,cAAA,GAAA,aAAA,CAAA,GAAA,EAAA;AACA,aAAA,OAAA,GAAA,IAAA;AACA,aAAA,MAAA,GAAA;AACA,UAAA,GAAA,YAAA,KAAA,OAAA,GAAA,cAAA,OADA;AAEA,UAAA,IAAA,YAAA,aAAA,CAAA,IAAA,OAFA;AAGA,UAAA,KAAA,YAAA,KAAA,GAAA,CAAA,WAAA;AAHA,SAAA;AAKA,aAAA,OAAA,CAAA,KAAA,OAAA;AACA,OAdA,CAgBA;;;AACA,UAAA,KAAA,QAAA,IAAA,SAAA,GAAA,aAAA,CAAA,GAAA,EAAA;AACA,YAAA,EAAA,GAAA,MAAA,CAAA,QAAA,CAAA,cAAA,CAAA,KAAA,QAAA,CAAA;;AACA,YAAA,EAAA,EAAA;AACA,cAAA,cAAA,GAAA,KAAA,SAAA,CAAA,EAAA,CAAA;;AACA,cAAA,SAAA,GAAA,KAAA,OAAA,GAAA,cAAA,GAAA,cAAA,CAAA,GAAA,EAAA;AACA;AACA,gBAAA,GAAA,GAAA,cAAA,CAAA,GAAA,GAAA,SAAA;AACA,iBAAA,MAAA,CAAA,GAAA,aAAA,GAAA;AACA;AACA;AACA;;AAEA,UAAA,KAAA,OAAA,IAAA,SAAA,GAAA,cAAA,GAAA,aAAA,CAAA,GAAA,EAAA;AACA,aAAA,OAAA,GAAA,KAAA;AACA,aAAA,MAAA,GAAA,EAAA;AACA,aAAA,OAAA,CAAA,KAAA,OAAA;AACA;;AAEA,UAAA,KAAA,OAAA,IAAA,KAAA,QAAA,EAAA;AACA,YAAA,GAAA,GAAA,MAAA,CAAA,QAAA,CAAA,cAAA,CAAA,KAAA,QAAA,CAAA;;AACA,YAAA,GAAA,EAAA;AACA,cAAA,eAAA,GAAA,KAAA,SAAA,CAAA,GAAA,CAAA;;AACA,cAAA,SAAA,GAAA,KAAA,OAAA,GAAA,cAAA,IAAA,eAAA,CAAA,GAAA,EAAA;AACA;AACA,iBAAA,MAAA,CAAA,GAAA,aAAA,IAAA,cAAA;AACA;AACA;AACA;AACA;AAlEA,GAhCA;AAqGA,EAAA,QAAA,EAAA;AACA,IAAA,OADA,qBACA;AACA,UAAA,KAAA,QAAA,EAAA,OAAA,CAAA;AACA,aAAA,KAAA,MAAA;AACA;AAJA,GArGA;AA4GA,EAAA,OA5GA,qBA4GA;AACA,QAAA,KAAA,UAAA,EAAA;AACA,WAAA,gBAAA,GAAA,KAAA;AACA,WAAA,QAAA,GAAA,MAAA,CAAA,QAAA,CAAA,cAAA,CAAA,KAAA,UAAA,CAAA;AACA;;AAEA,SAAA,mBAAA,GAAA,KAAA,GAAA,CAAA,QAAA,CAAA,CAAA,EAAA,YAAA;AACA,SAAA,kBAAA,GAAA,KAAA,GAAA,CAAA,QAAA,CAAA,CAAA,EAAA,WAAA;AAEA,SAAA,SAAA,GAAA;AAAA,MAAA,MAAA,YAAA,KAAA,mBAAA,OAAA;AAAA,MAAA,KAAA,YAAA,KAAA,kBAAA;AAAA,KAAA;AACA,SAAA,QAAA,CAAA,gBAAA,CAAA,QAAA,EAAA,KAAA,YAAA;AACA,SAAA,QAAA,CAAA,gBAAA,CAAA,QAAA,EAAA,KAAA,YAAA;AACA,GAxHA;AA0HA,EAAA,aA1HA,2BA0HA;AACA,SAAA,QAAA,CAAA,mBAAA,CAAA,QAAA,EAAA,KAAA,YAAA;AACA,SAAA,QAAA,CAAA,mBAAA,CAAA,QAAA,EAAA,KAAA,YAAA;AACA;AA7HA,CAAA","sourcesContent":["<template>\r\n\t<div class=\"affix-placeholder\" :style=\"wrapStyle\">\r\n\t\t<div :class=\"{'affix': affixed}\" :style=\"styles\">\r\n\t\t\t<slot></slot>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n<script>\r\nexport default {\r\n\tprops: {\r\n\t\toffset: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 0,\r\n\t\t},\r\n\t\tonAffix: {\r\n\t\t\ttype: Function,\r\n\t\t\tdefault() {},\r\n\t\t},\r\n\t\tboundary: {\r\n\t\t\ttype: String,\r\n\t\t\tdefault: '',\r\n\t\t},\r\n\t\tscrollerid: {\r\n\t\t\ttype: String,\r\n\t\t\tdefault: '',\r\n\t\t},\r\n\t},\r\n\r\n\tdata() {\r\n\t\treturn {\r\n\t\t\tscroller: window,\r\n\t\t\tscrollerIsWindow: true,\r\n\t\t\taffixed: false,\r\n\t\t\tstyles: {},\r\n\t\t\taffixedClientHeight: 0,\r\n\t\t\taffixedClientWidth: 0,\r\n\t\t\twrapStyle: {},\r\n\t\t};\r\n\t},\r\n\r\n\tmethods: {\r\n\t\tgetScroll(w, top) {\r\n\t\t\tlet prop = this.scrollerIsWindow || w === window ? `page${(top ? 'Y' : 'X')}Offset` : `scroll${top ? 'Top' : 'Left'}`\r\n\r\n\t\t\treturn this.scroller[prop]\r\n\t\t},\r\n\t\tgetOffset(element) {\r\n\t\t\tconst rect = element.getBoundingClientRect();\r\n\t\t\tconst body = document.body;\r\n\t\t\t//console.log(rect, element.clientTop, body.clientTop)\r\n\t\t\tconst clientTop = element.clientTop || body.clientTop || 0;\r\n\t\t\tconst clientLeft = element.clientLeft || body.clientLeft || 0;\r\n\t\t\t//const clientHeight = element.clientHeight || 0;\r\n\t\t\tconst scrollTop = this.getScroll(this.scroller, true);\r\n\t\t\tconst scrollLeft = this.getScroll(this.scroller);\r\n\t\t\treturn {\r\n\t\t\t\ttop: rect.bottom + scrollTop - clientTop - this.affixedClientHeight,\r\n\t\t\t\tleft: rect.left + scrollLeft - clientLeft,\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\thandleScroll() {\r\n\t\t\tconst scrollTop = this.getScroll(this.scroller, true) + this.offsets;// handle setting offset\r\n\t\t\tconst elementOffset = this.getOffset(this.$el);\r\n\r\n\t\t\tconst scrollerOffset = 60\r\n\r\n\t\t\tif (!this.affixed && scrollTop + scrollerOffset > elementOffset.top ) {\r\n\t\t\t\tthis.affixed = true;\r\n\t\t\t\tthis.styles = {\r\n\t\t\t\t\ttop: `${this.offsets + scrollerOffset }px`,\r\n\t\t\t\t\tleft: `${elementOffset.left}px`,\r\n\t\t\t\t\twidth: `${this.$el.offsetWidth}px`,\r\n\t\t\t\t};\r\n\t\t\t\tthis.onAffix(this.affixed);\r\n\t\t\t}\r\n\r\n\t\t\t// if setting boundary\r\n\t\t\tif (this.boundary && scrollTop > elementOffset.top) {\r\n\t\t\t\tconst el = window.document.getElementById(this.boundary);\r\n\t\t\t\tif (el) {\r\n\t\t\t\t\tconst boundaryOffset = this.getOffset(el);\r\n\t\t\t\t\tif ((scrollTop + this.offsets + scrollerOffset) > boundaryOffset.top) {\r\n\t\t\t\t\t\t//const top = scrollTop - boundaryOffset.top;\r\n\t\t\t\t\t\tconst top = boundaryOffset.top - scrollTop;\r\n\t\t\t\t\t\tthis.styles.top = `${top}px`;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this.affixed && scrollTop + scrollerOffset  < elementOffset.top) {\r\n\t\t\t\tthis.affixed = false;\r\n\t\t\t\tthis.styles = {};\r\n\t\t\t\tthis.onAffix(this.affixed);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.affixed && this.boundary) {\r\n\t\t\t\tconst el = window.document.getElementById(this.boundary);\r\n\t\t\t\tif (el) {\r\n\t\t\t\t\tconst boundaryOffset = this.getOffset(el);\r\n\t\t\t\t\tif ((scrollTop + this.offsets + scrollerOffset) <= boundaryOffset.top) {\r\n\t\t\t\t\t\t//this.styles.top = 0 ;\r\n\t\t\t\t\t\tthis.styles.top = `${0 + scrollerOffset }px` ;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\r\n\tcomputed: {\r\n\t\toffsets() {\r\n\t\t\tif (this.boundary) return 0;\r\n\t\t\treturn this.offset;\r\n\t\t},\r\n\t},\r\n\r\n\tmounted() {\r\n\t\tif(this.scrollerid){\r\n\t\t\tthis.scrollerIsWindow = false\r\n\t\t\tthis.scroller = window.document.getElementById(this.scrollerid)\r\n\t\t}\r\n\r\n\t\tthis.affixedClientHeight = this.$el.children[0].clientHeight;\r\n\t\tthis.affixedClientWidth = this.$el.children[0].clientWidth;\r\n\r\n\t\tthis.wrapStyle = { height: `${this.affixedClientHeight}px`, width: `${this.affixedClientWidth}px` };\r\n\t\tthis.scroller.addEventListener('scroll', this.handleScroll);\r\n\t\tthis.scroller.addEventListener('resize', this.handleScroll);\r\n\t},\r\n\r\n\tbeforeDestroy() {\r\n\t\tthis.scroller.removeEventListener('scroll', this.handleScroll);\r\n\t\tthis.scroller.removeEventListener('resize', this.handleScroll);\r\n\t},\r\n\r\n};\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n.affix{\r\n  position: fixed;\r\n}\r\n</style>\r\n\r\n"],"sourceRoot":"src/components"}]}