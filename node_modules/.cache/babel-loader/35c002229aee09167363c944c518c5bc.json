{"remainingRequest":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/thread-loader/dist/cjs.js!/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/babel-loader/lib/index.js!/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/src/store/modules/vehicle/index.js","dependencies":[{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/src/store/modules/vehicle/index.js","mtime":1640440454973},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/.babelrc","mtime":1640440444342},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/cache-loader/dist/cjs.js","mtime":1640440446558},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/thread-loader/dist/cjs.js","mtime":1640440453952},{"path":"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/babel-loader/lib/index.js","mtime":1640440446305}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\n\nvar _actions;\n\nimport * as action from \"../../action-types\";\nimport * as mutation from \"../../mutation-types\";\nimport * as getter from \"../../getters-types\";\nimport localAxios from \"../../../services/http/client\";\nimport * as typeS from \"../../../services/path_service\";\nvar state = {\n  vehicleType: null\n};\n\nvar mutations = _defineProperty({}, mutation.SET_VEHICLE_TYPE, function (state, payload) {\n  var vehicleType = payload.map(function (item) {\n    return {\n      value: item[Object.keys(item)[1]],\n      id: item.id\n    };\n  });\n  state.vehicleType = vehicleType;\n});\n\nvar actions = (_actions = {}, _defineProperty(_actions, action.VEHICLE_BRAND, function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref, payload) {\n    var commit, dispatch, token, _yield$localAxios$get, data;\n\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            commit = _ref.commit, dispatch = _ref.dispatch;\n            _context.prev = 1;\n            token = localStorage.getItem('token');\n            _context.next = 5;\n            return localAxios.get(\"\".concat(typeS.vehicle, \"brand\"), {\n              headers: {\n                'Authorization': 'Bearer ' + token\n              }\n            });\n\n          case 5:\n            _yield$localAxios$get = _context.sent;\n            data = _yield$localAxios$get.data;\n            return _context.abrupt(\"return\", data.data.data);\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](1);\n            dispatch(action.DATA_ERROR, _context.t0);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 10]]);\n  }));\n\n  return function (_x, _x2) {\n    return _ref2.apply(this, arguments);\n  };\n}()), _defineProperty(_actions, action.VEHICLE_TYPE, function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref3, payload) {\n    var commit, dispatch, token, _yield$localAxios$get2, data;\n\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            commit = _ref3.commit, dispatch = _ref3.dispatch;\n            _context2.prev = 1;\n            token = localStorage.getItem('token');\n            _context2.next = 5;\n            return localAxios.get(\"\".concat(typeS.vehicle, \"type?idbrand=\").concat(payload, \"&dropdown=1&limit=999\"), {\n              headers: {\n                'Authorization': 'Bearer ' + token\n              }\n            });\n\n          case 5:\n            _yield$localAxios$get2 = _context2.sent;\n            data = _yield$localAxios$get2.data;\n            commit(mutation.SET_VEHICLE_TYPE, data.data);\n            _context2.next = 13;\n            break;\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2[\"catch\"](1);\n            dispatch(action.DATA_ERROR, _context2.t0);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[1, 10]]);\n  }));\n\n  return function (_x3, _x4) {\n    return _ref4.apply(this, arguments);\n  };\n}()), _actions);\n\nvar getters = _defineProperty({}, getter.GET_VEHICLE_TYPE, function (state) {\n  return state.vehicleType;\n});\n\nexport default {\n  state: state,\n  mutations: mutations,\n  actions: actions,\n  getters: getters\n};",{"version":3,"sources":["/Users/fnaufalh/www/docker-oper-workshop/htdocs/oper/oper-customer/src/store/modules/vehicle/index.js"],"names":["action","mutation","getter","localAxios","typeS","state","vehicleType","mutations","SET_VEHICLE_TYPE","payload","map","item","value","Object","keys","id","actions","VEHICLE_BRAND","commit","dispatch","token","localStorage","getItem","get","vehicle","headers","data","DATA_ERROR","VEHICLE_TYPE","getters","GET_VEHICLE_TYPE"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,MAAZ;AACA,OAAO,KAAKC,QAAZ;AACA,OAAO,KAAKC,MAAZ;AACA,OAAOC,UAAP;AACA,OAAO,KAAKC,KAAZ;AAEA,IAAMC,KAAK,GAAG;AACVC,EAAAA,WAAW,EAAG;AADJ,CAAd;;AAIA,IAAMC,SAAS,uBACVN,QAAQ,CAACO,gBADC,YACiBH,KADjB,EACwBI,OADxB,EACgC;AACvC,MAAIH,WAAW,GAAGG,OAAO,CAACC,GAAR,CAAY,UAASC,IAAT,EAAc;AACxC,WAAO;AAACC,MAAAA,KAAK,EAAED,IAAI,CAACE,MAAM,CAACC,IAAP,CAAYH,IAAZ,EAAkB,CAAlB,CAAD,CAAZ;AAAoCI,MAAAA,EAAE,EAAEJ,IAAI,CAACI;AAA7C,KAAP;AACH,GAFiB,CAAlB;AAGAV,EAAAA,KAAK,CAACC,WAAN,GAAoBA,WAApB;AACH,CANU,CAAf;;AASA,IAAMU,OAAO,6CACFhB,MAAM,CAACiB,aADL;AAAA,6FACwCR,OADxC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACqBS,YAAAA,MADrB,QACqBA,MADrB,EAC6BC,QAD7B,QAC6BA,QAD7B;AAAA;AAGGC,YAAAA,KAHH,GAGWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAHX;AAAA;AAAA,mBAIoBnB,UAAU,CAACoB,GAAX,WAAkBnB,KAAK,CAACoB,OAAxB,YACjB;AAAEC,cAAAA,OAAO,EAAE;AAAC,iCAAiB,YAAUL;AAA5B;AAAX,aADiB,CAJpB;;AAAA;AAAA;AAIKM,YAAAA,IAJL,yBAIKA,IAJL;AAAA,6CAOMA,IAAI,CAACA,IAAL,CAAUA,IAPhB;;AAAA;AAAA;AAAA;AAUDP,YAAAA,QAAQ,CAACnB,MAAM,CAAC2B,UAAR,cAAR;;AAVC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,gCAaF3B,MAAM,CAAC4B,YAbL;AAAA,+FAauCnB,OAbvC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAaoBS,YAAAA,MAbpB,SAaoBA,MAbpB,EAa4BC,QAb5B,SAa4BA,QAb5B;AAAA;AAeGC,YAAAA,KAfH,GAeWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAfX;AAAA;AAAA,mBAgBoBnB,UAAU,CAACoB,GAAX,WAAkBnB,KAAK,CAACoB,OAAxB,0BAA+Cf,OAA/C,4BACjB;AAAEgB,cAAAA,OAAO,EAAE;AAAC,iCAAiB,YAAUL;AAA5B;AAAX,aADiB,CAhBpB;;AAAA;AAAA;AAgBKM,YAAAA,IAhBL,0BAgBKA,IAhBL;AAmBDR,YAAAA,MAAM,CAACjB,QAAQ,CAACO,gBAAV,EAA4BkB,IAAI,CAACA,IAAjC,CAAN;AAnBC;AAAA;;AAAA;AAAA;AAAA;AAsBDP,YAAAA,QAAQ,CAACnB,MAAM,CAAC2B,UAAR,eAAR;;AAtBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,eAAb;;AA2BA,IAAME,OAAO,uBACR3B,MAAM,CAAC4B,gBADC,YACiBzB,KADjB,EACuB;AAC5B,SAAOA,KAAK,CAACC,WAAb;AACH,CAHQ,CAAb;;AAMA,eAAe;AACXD,EAAAA,KAAK,EAALA,KADW;AAEXE,EAAAA,SAAS,EAATA,SAFW;AAGXS,EAAAA,OAAO,EAAPA,OAHW;AAIXa,EAAAA,OAAO,EAAPA;AAJW,CAAf","sourcesContent":["import * as action from '../../action-types'\nimport * as mutation from '../../mutation-types'\nimport * as getter from '../../getters-types'\nimport localAxios from \"../../../services/http/client\";\nimport * as typeS from '../../../services/path_service'\n\nconst state = {\n    vehicleType : null\n};\n\nconst mutations = {\n    [mutation.SET_VEHICLE_TYPE](state, payload){\n        let vehicleType = payload.map(function(item){\n            return {value: item[Object.keys(item)[1]], id: item.id};\n        })\n        state.vehicleType = vehicleType\n    }\n};\n\nconst actions = {\n    async [action.VEHICLE_BRAND]({commit, dispatch}, payload) {\n        try {\n            let token = localStorage.getItem('token');\n            let { data } = await localAxios.get(`${typeS.vehicle}brand`,\n                { headers: {'Authorization': 'Bearer '+token }\n                })\n            return data.data.data\n        }\n        catch (err) {\n            dispatch(action.DATA_ERROR, err)\n        }\n    },\n    async [action.VEHICLE_TYPE]({commit, dispatch}, payload) {\n        try {\n            let token = localStorage.getItem('token');\n            let { data } = await localAxios.get(`${typeS.vehicle}type?idbrand=${payload}&dropdown=1&limit=999`,\n                { headers: {'Authorization': 'Bearer '+token }\n                })\n            commit(mutation.SET_VEHICLE_TYPE, data.data)\n        }\n        catch (err) {\n            dispatch(action.DATA_ERROR, err)\n        }\n    },\n};\n\nconst getters = {\n    [getter.GET_VEHICLE_TYPE](state){\n        return state.vehicleType\n    }\n};\n\nexport default {\n    state,\n    mutations,\n    actions,\n    getters\n}"]}]}