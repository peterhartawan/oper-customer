{"remainingRequest":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/thread-loader/dist/cjs.js!/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/babel-loader/lib/index.js!/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/src/store/modules/users/forgot-password.js","dependencies":[{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/src/store/modules/users/forgot-password.js","mtime":1628175042615},{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/.babelrc","mtime":1628175042295},{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nvar _actions;\n\nimport localAxios from \"../../../services/http/client\";\nimport router from \"../../../router\";\nimport Swal from 'sweetalert2';\nimport * as action from \"../../action-types\";\nimport * as mutation from \"../../mutation-types\";\nimport * as getter from \"../../getters-types\";\nimport * as typeS from \"../../../services/path_service\";\nvar state = {\n  token: null,\n  statusEmail: null\n};\n\nvar getters = _defineProperty({}, getter.GET_STATUS_EMAIL, function (state) {\n  return state.statusEmail;\n});\n\nvar actions = (_actions = {}, _defineProperty(_actions, action.SEND_EMAIL, function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref, payload) {\n    var commit, dispatch, _yield$localAxios$pos, data;\n\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            commit = _ref.commit, dispatch = _ref.dispatch;\n            _context.prev = 1;\n            _context.next = 4;\n            return localAxios.post(typeS.create_password, JSON.stringify({\n              email: payload.email\n            }));\n\n          case 4:\n            _yield$localAxios$pos = _context.sent;\n            data = _yield$localAxios$pos.data;\n            commit(mutation.SET_STATUS_EMAIL, data.status);\n            commit(mutation.BUTTON_STATUS, false);\n            _context.next = 14;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](1);\n            commit(mutation.BUTTON_STATUS, false);\n            dispatch(action.DATA_ERROR, _context.t0);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 10]]);\n  }));\n\n  return function (_x, _x2) {\n    return _ref2.apply(this, arguments);\n  };\n}()), _defineProperty(_actions, action.CHANGE_PASSWORD, function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref3, payload) {\n    var commit, dispatch, formData, _yield$localAxios$pos2, data;\n\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            commit = _ref3.commit, dispatch = _ref3.dispatch;\n            _context2.prev = 1;\n            formData = JSON.stringify({\n              password: payload.password,\n              password_confirmation: payload.confirmPassword,\n              token: payload.token\n            });\n            _context2.next = 5;\n            return localAxios.post(typeS.reset_password, formData);\n\n          case 5:\n            _yield$localAxios$pos2 = _context2.sent;\n            data = _yield$localAxios$pos2.data;\n\n            if (data.status) {\n              Swal('create password successfully', '', 'success');\n              commit(mutation.BUTTON_STATUS, false);\n              setTimeout(function () {\n                router.replace('/login');\n              }, 2000);\n            }\n\n            _context2.next = 14;\n            break;\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2[\"catch\"](1);\n            commit(mutation.BUTTON_STATUS, false);\n            dispatch(action.DATA_ERROR, _context2.t0);\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[1, 10]]);\n  }));\n\n  return function (_x3, _x4) {\n    return _ref4.apply(this, arguments);\n  };\n}()), _defineProperty(_actions, action.CHANGES_PASSWORD, function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(_ref5, payload) {\n    var commit, dispatch, token, formData, _yield$localAxios$put, data;\n\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            commit = _ref5.commit, dispatch = _ref5.dispatch;\n            _context3.prev = 1;\n            token = localStorage.getItem('token');\n            formData = JSON.stringify({\n              old_password: payload.oldPassword,\n              password: payload.password,\n              password_confirmation: payload.confirmPassword\n            });\n            _context3.next = 6;\n            return localAxios.put(typeS.change_password, formData, {\n              headers: {\n                'Authorization': 'Bearer ' + token\n              }\n            });\n\n          case 6:\n            _yield$localAxios$put = _context3.sent;\n            data = _yield$localAxios$put.data;\n\n            if (data.status) {\n              Swal('password changed successfully', '', 'success');\n              commit(mutation.BUTTON_STATUS, false);\n              localStorage.clear(); // dispatch('setError', null);\n\n              setTimeout(function () {\n                router.replace('/login');\n              }, 2000);\n            }\n\n            _context3.next = 15;\n            break;\n\n          case 11:\n            _context3.prev = 11;\n            _context3.t0 = _context3[\"catch\"](1);\n            commit(mutation.BUTTON_STATUS, false);\n            dispatch(action.DATA_ERROR, _context3.t0);\n\n          case 15:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[1, 11]]);\n  }));\n\n  return function (_x5, _x6) {\n    return _ref6.apply(this, arguments);\n  };\n}()), _actions);\n\nvar mutations = _defineProperty({}, mutation.SET_STATUS_EMAIL, function (state, payload) {\n  state.statusEmail = payload;\n});\n\nexport default {\n  state: state,\n  getters: getters,\n  actions: actions,\n  mutations: mutations\n};",{"version":3,"sources":["/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/src/store/modules/users/forgot-password.js"],"names":["localAxios","router","Swal","action","mutation","getter","typeS","state","token","statusEmail","getters","GET_STATUS_EMAIL","actions","SEND_EMAIL","payload","commit","dispatch","post","create_password","JSON","stringify","email","data","SET_STATUS_EMAIL","status","BUTTON_STATUS","DATA_ERROR","CHANGE_PASSWORD","formData","password","password_confirmation","confirmPassword","reset_password","setTimeout","replace","CHANGES_PASSWORD","localStorage","getItem","old_password","oldPassword","put","change_password","headers","clear","mutations"],"mappings":"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","sourcesContent":["import localAxios from '../../../services/http/client'\nimport router from '../../../router'\nimport Swal from 'sweetalert2'\nimport * as action from '../../action-types'\nimport * as mutation from '../../mutation-types'\nimport * as getter from '../../getters-types'\nimport * as typeS from '../../../services/path_service'\n\nconst state = {\n    token: null,\n    statusEmail: null\n};\n\nconst getters = {\n    [getter.GET_STATUS_EMAIL](state) {\n        return state.statusEmail\n    }\n};\n\nconst actions = {\n    async [action.SEND_EMAIL]({ commit, dispatch }, payload) {\n        try {\n            let { data } = await localAxios.post(typeS.create_password, JSON.stringify({\n                email: payload.email\n            }));\n            commit(mutation.SET_STATUS_EMAIL, data.status)\n            commit(mutation.BUTTON_STATUS, false)\n        }\n        catch (err) {\n            commit(mutation.BUTTON_STATUS, false)\n            dispatch(action.DATA_ERROR, err)\n        }\n    },\n    async [action.CHANGE_PASSWORD]({ commit, dispatch }, payload) {\n        try {\n            const formData = JSON.stringify({\n                password: payload.password,\n                password_confirmation: payload.confirmPassword,\n                token: payload.token\n            });\n            let { data } = await localAxios.post(typeS.reset_password,\n                formData);\n            if (data.status) {\n                Swal(\n                    'create password successfully',\n                    '',\n                    'success'\n                );\n                commit(mutation.BUTTON_STATUS, false)\n                setTimeout(() => {\n                    router.replace('/login')\n                }, 2000)\n            }\n        }\n        catch (err) {\n            commit(mutation.BUTTON_STATUS, false)\n            dispatch(action.DATA_ERROR, err)\n        }\n    },\n    async [action.CHANGES_PASSWORD]({ commit, dispatch }, payload) {\n        try {\n            let token = localStorage.getItem('token');\n            const formData = JSON.stringify({\n                old_password: payload.oldPassword,\n                password: payload.password,\n                password_confirmation: payload.confirmPassword,\n            });\n            let { data } = await localAxios.put(typeS.change_password,\n                formData, {\n                    headers: {\n                        'Authorization': 'Bearer ' + token\n                    }\n                });\n            if (data.status) {\n                Swal(\n                    'password changed successfully',\n                    '',\n                    'success'\n                );\n                commit(mutation.BUTTON_STATUS, false)\n                localStorage.clear()\n                // dispatch('setError', null);\n                setTimeout(() => {\n                    router.replace('/login')\n                }, 2000)\n            }\n        }\n        catch (err) {\n            commit(mutation.BUTTON_STATUS, false)\n            dispatch(action.DATA_ERROR, err)\n        }\n    }\n};\n\nconst mutations = {\n    [mutation.SET_STATUS_EMAIL](state, payload) {\n        state.statusEmail = payload\n    }\n};\n\nexport default {\n    state,\n    getters,\n    actions,\n    mutations\n}"]}]}