{"remainingRequest":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/babel-loader/lib/index.js!/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/src/views/pages/employee/assigntask-employee.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/src/views/pages/employee/assigntask-employee.vue","mtime":1628175042621},{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/.babelrc","mtime":1628175042295},{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/peter.hartawan/Personal/Workspace/docker-config/htdocs/oper/oper-customer/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport * as getter from \"../../../store/getters-types\";\nimport * as action from \"../../../store/action-types\";\nimport * as mutation from \"../../../store/mutation-types\";\nexport default {\n  data: function data() {\n    return {\n      dropDown: null,\n      fullscreen_loading: false,\n      form: {\n        task_template_id: '',\n        booking_time: '',\n        employee_userid: '',\n        message: ''\n      },\n      rules: {\n        task_template_id: [{\n          required: true,\n          message: 'Please Input Task Template',\n          trigger: ['blur', 'change']\n        }],\n        booking_time: [{\n          required: true,\n          message: 'Please Select Booking Time',\n          trigger: 'blur'\n        }],\n        employee_userid: [{\n          required: true,\n          message: 'Please Select Employee',\n          trigger: ['blur', 'change']\n        }],\n        message: [{\n          required: true,\n          message: 'Please Input Message',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  methods: {\n    onSubmit: function onSubmit(formName) {\n      var _this = this;\n\n      this.$refs[formName].validate(function (valid) {\n        if (valid) {\n          _this.$store.commit(mutation.BUTTON_STATUS, true);\n\n          _this.$store.dispatch(action.ASSIGN_EMPLOYEE_TASK, _this.form);\n        } else {\n          return false;\n        }\n      });\n    },\n    remoteMethod2: function () {\n      var _remoteMethod = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(query) {\n        var trimName;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                trimName = query.trim();\n\n                if (!(trimName.length > 0)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                _context.next = 4;\n                return this.$store.commit(mutation.SET_LOADING, true);\n\n              case 4:\n                _context.next = 6;\n                return this.$store.dispatch(action.DROPDOWN_EMPLOYEE, trimName);\n\n              case 6:\n                _context.next = 12;\n                break;\n\n              case 8:\n                _context.next = 10;\n                return this.$store.commit(mutation.SET_LOADING, true);\n\n              case 10:\n                _context.next = 12;\n                return this.$store.dispatch(action.DROPDOWN_EMPLOYEE, trimName);\n\n              case 12:\n                this.dropDown = this.employeeList;\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function remoteMethod2(_x) {\n        return _remoteMethod.apply(this, arguments);\n      }\n\n      return remoteMethod2;\n    }(),\n    isCancel: function isCancel() {\n      this.$router.replace(\"/employee/inprogress\");\n    },\n    taskT: function taskT(value) {\n      this.$store.dispatch(action.TEMPLATE_ID, value);\n    },\n    remoteMethod: function remoteMethod(query) {}\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    error: getter.GET_ERROR,\n    loading: getter.GET_LOADING,\n    button: getter.GET_BUTTON,\n    templateTasks: getter.GET_TEMPLATE_LIST,\n    data: getter.GET_TEMPLATE_ID,\n    employeeList: getter.GET_DROPDOWN_EMPLOYEE,\n    clearInput: getter.GET_CLEAR_INPUT\n  })), {}, {\n    buttonStatuz: function buttonStatuz() {\n      return this.form.fullscreen_loading = this.button;\n    },\n    dataTAsk: function dataTAsk() {\n      return this.data != null ? this.form.tasks = this.data.tasks : this.form.tasks = [];\n    },\n    clearinput: function clearinput() {\n      if (clearInput) {\n        this.form.birthdate = '';\n      }\n    }\n  }),\n  created: function created() {\n    this.$store.commit(mutation.SET_TEMPLATE_ID, null);\n    this.$store.dispatch(action.DROPDOWN_TEMPLATE, {\n      page: 1\n    });\n  },\n  mounted: function () {\n    var _mounted = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.$store.dispatch(action.DROPDOWN_EMPLOYEE, null);\n\n            case 2:\n              this.dropDown = this.employeeList;\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function mounted() {\n      return _mounted.apply(this, arguments);\n    }\n\n    return mounted;\n  }()\n};",{"version":3,"sources":["assigntask-employee.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class=\"page-table scrollable only-y\" id=\"affix-container\">\n        <div class=\"card-base card-shadow--medium bg-white\">\n            <el-form ref=\"form\" :rules=\"rules\" :model=\"form\">\n                <el-row :gutter=\"20\">\n                    <el-col :span=\"12\">\n                        <div class=\"grid-content\">\n                            <el-form-item prop=\"booking_time\">\n                                <el-date-picker\n                                        v-model=\"form.booking_time\"\n                                        type=\"datetime\"\n                                        placeholder=\"Booking Time\"\n                                        value-format=\"yyyy-MM-dd HH:mm:ss\"\n                                        size=\"large\"\n                                        popper-class=\"mantap\"\n                                        prefix-icon=\"el-icon-date\">\n                                </el-date-picker>\n                            </el-form-item>\n                        </div>\n                    </el-col >\n                    \n                    <el-col :span=\"12\">\n                        <div class=\"grid-content\">\n                            <el-form-item prop=\"employee_userid\">\n                                <el-select\n                                filterable\n                                remote\n                                reserve-keyword   \n                                :loading=\"loading\"                          \n                                :remote-method=\"remoteMethod2\"\n                                v-model=\"form.employee_userid\"\n                                placeholder=\"Select Employee\" >\n                                    <el-option\n                                            v-for=\"item in dropDown\"\n                                            :key=\"item.id\"\n                                            :label=\"item.name\"\n                                            :value=\"item.id\"></el-option>\n                                </el-select>\n                            </el-form-item>\n                        </div>\n                    </el-col>\n                </el-row>\n\n                <el-row :gutter=\"20\">\n                    <el-col :span=\"24\">\n                        <div class=\"grid-content\">\n                            <el-form-item prop=\"message\" >\n                                <el-input\n                                        type=\"textarea\"\n                                        v-model=\"form.message\"\n                                        placeholder=\"Input Message\"\n                                        :autosize=\"{ minRows: 5, maxRows: 7}\"></el-input>\n                            </el-form-item>\n                        </div>\n                    </el-col>\n                </el-row>\n\n                <el-row :gutter=\"20\">\n                    <el-col :span=\"24\">\n                        <div class=\"grid-content\">\n                            <el-form-item prop=\"task_template_id\">\n                                <el-select\n                                        v-model=\"form.task_template_id\"\n                                        @change=\"taskT\"\n                                        :remote-method=\"remoteMethod\"\n                                        placeholder=\"Select Template\" >\n                                    <el-option\n                                            v-for=\"item in templateTasks\"\n                                            :key=\"item.task_template_id\"\n                                            :label=\"item.task_template_name\"\n                                            :value=\"item.task_template_id\"></el-option>\n                                </el-select>\n                            </el-form-item>\n                        </div>\n                    </el-col>\n                </el-row>\n\n                <el-row>\n                    <el-col :span=\"24\">\n                        <el-table\n                                :data=\"dataTAsk\"\n                                stripe\n                                style=\"width: 100%\">\n                            <el-table-column\n                                    prop=\"name\"\n                                    label=\"Task Name\">\n                            </el-table-column>\n                            <el-table-column\n                                    prop=\"description\"\n                                    label=\"Task Description\">\n                            </el-table-column>\n                            <el-table-column\n                                    prop=\"updated_at\"\n                                    label=\"Last Update\">\n                            </el-table-column>\n                        </el-table>\n                    </el-col>\n                </el-row>\n\n                <el-row >\n                    <el-col :lg=\"{offset:18, span:6}\" style=\"display: flex; justify-content: flex-end; margin-top: 14px\">\n                        <div class=\"grid-content\">\n                            <el-form-item>\n                                <el-button @click=\"isCancel\">Cancel</el-button>\n                                <el-button\n                                        type=\"success\"\n                                        v-loading.fullscreen.lock=\"button\"\n                                        @click=\"onSubmit('form')\">Save</el-button>\n                            </el-form-item>\n                        </div>\n                    </el-col>\n                </el-row>\n            </el-form>\n        </div>\n    </div>\n</template>\n\n<script>\n\n    import { mapGetters } from 'vuex'\n    import * as getter from '../../../store/getters-types'\n    import * as action from '../../../store/action-types'\n    import * as mutation from '../../../store/mutation-types'\n\n    export default {\n        data() {\n            return {\n                dropDown: null,\n                fullscreen_loading  : false,\n                form: {\n                    task_template_id    : '',\n                    booking_time        : '',\n                    employee_userid     : '',\n                    message             : '',\n                },\n                rules: {\n                    task_template_id: [\n                        { required: true, message:'Please Input Task Template', trigger: ['blur','change']}\n                    ],\n                    booking_time: [\n                        { required: true, message:'Please Select Booking Time', trigger: 'blur'}\n                    ],\n                    employee_userid:  [\n                        { required: true, message:'Please Select Employee', trigger: ['blur', 'change']},\n                    ],\n                    message:  [\n                        { required: true, message:'Please Input Message', trigger: 'blur'},\n                    ],\n                }\n            }\n        },\n        methods: {\n            onSubmit(formName) {\n                this.$refs[formName].validate((valid) => {\n                    if (valid) {\n                        this.$store.commit(mutation.BUTTON_STATUS, true)\n                        this.$store.dispatch(action.ASSIGN_EMPLOYEE_TASK, this.form)\n                    } else {\n                        return false;\n                    }\n                });\n            },\n            async remoteMethod2(query) {\n                let trimName = query.trim()\n            if (trimName.length > 0) {\n                await this.$store.commit(mutation.SET_LOADING, true);\n                await this.$store.dispatch(action.DROPDOWN_EMPLOYEE, trimName);\n            } else {\n                await this.$store.commit(mutation.SET_LOADING, true);\n                await this.$store.dispatch(action.DROPDOWN_EMPLOYEE, trimName);\n            }\n             this.dropDown = this.employeeList;\n            },\n            isCancel(){\n                this.$router.replace(`/employee/inprogress`)\n            },\n            taskT(value){\n                this.$store.dispatch(action.TEMPLATE_ID, value)\n            },\n            remoteMethod(query) {\n            },\n        },\n        computed: {\n            ...mapGetters({\n                error           : getter.GET_ERROR,\n                loading         : getter.GET_LOADING,\n                button          : getter.GET_BUTTON,\n                templateTasks   : getter.GET_TEMPLATE_LIST,\n                data            : getter.GET_TEMPLATE_ID,\n                employeeList    : getter.GET_DROPDOWN_EMPLOYEE,\n                clearInput      : getter.GET_CLEAR_INPUT\n            }),\n            buttonStatuz: function () {\n                return this.form.fullscreen_loading = this.button\n            },\n            dataTAsk() {\n                return(this.data != null) ? this.form.tasks = this.data.tasks : this.form.tasks = []\n            },\n            clearinput(){\n                if(clearInput){\n                    this.form.birthdate = ''\n                }\n            }\n        },\n        created(){\n            this.$store.commit(mutation.SET_TEMPLATE_ID, null);\n            this.$store.dispatch(action.DROPDOWN_TEMPLATE, { page : 1 });\n        },\n        async mounted() {\n            await this.$store.dispatch(action.DROPDOWN_EMPLOYEE, null)\n            this.dropDown = this.employeeList\n        },\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    .card-base {\n        padding: 20px;\n    }\n    .el-row {\n        padding: 0px 10px;\n        &:last-child {\n            margin-bottom: 0;\n        }\n    }\n    .el-col {\n        border-radius: 5px;\n    }\n</style>\n"],"sourceRoot":"src/views/pages/employee"}]}