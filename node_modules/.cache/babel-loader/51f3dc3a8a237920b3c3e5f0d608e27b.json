{"remainingRequest":"C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\src\\store\\modules\\driver\\mutation.js","dependencies":[{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\src\\store\\modules\\driver\\mutation.js","mtime":1650658866776},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\.babelrc","mtime":1644413672252},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ASUS\\Documents\\GitHub\\operdev\\oper-customer\\node_modules\\babel-loader\\lib\\index.js","mtime":1646338474621}],"contextDependencies":[],"result":["import _defineProperty from \"C:/Users/ASUS/Documents/GitHub/operdev/oper-customer/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport \"core-js/modules/web.dom.iterable\";\n\nvar _mutation$SET_REQUEST;\n\nimport * as mutation from \"../../mutation-types\";\nexport default (_mutation$SET_REQUEST = {}, _defineProperty(_mutation$SET_REQUEST, mutation.SET_REQUEST_DETAILS, function (state, payload) {\n  state.requestDetails = payload;\n}), _defineProperty(_mutation$SET_REQUEST, mutation.RESET_REQUEST_DETAILS, function (state, payload) {\n  state.requestDetails = null;\n}), _defineProperty(_mutation$SET_REQUEST, mutation.SET_SEARCH_INDEX, function (state, payload) {\n  state.searchIndex = payload;\n}), _defineProperty(_mutation$SET_REQUEST, mutation.SET_DROPDOWN_DRIVER, function (state, payload) {\n  payload.dataList.forEach(function (element, index) {\n    element.numrow = index + 1;\n  });\n  state.dropDown = payload.dataList;\n}), _defineProperty(_mutation$SET_REQUEST, mutation.SET_DRIVER_D_AVAILABLE, function (state, payload) {\n  state.driverAvList = payload.dataList;\n}), _defineProperty(_mutation$SET_REQUEST, mutation.RESET_ASSIGNED_DRIVERS, function (state) {\n  state.assignedDrivers = null;\n  state.checked = [];\n  state.selectedPlaces = [];\n  state.selectedTimes = [];\n}), _defineProperty(_mutation$SET_REQUEST, mutation.SET_ASSIGNED_DRIVERS, function (state, payload) {\n  //get all selected drivers for first time connection\n  if (state.assignedDrivers == null) {\n    state.assignedDrivers = payload.selected_drivers;\n    payload.selected_drivers.forEach(function (element, index) {\n      //places\n      if (element.places != null) {\n        if (element.stay_time != null) {\n          state.selectedTimes[index] = element.stay_time;\n        }\n\n        var exists = 0;\n        payload.places.forEach(function (place) {\n          if (element.places.idplaces == place.idplaces) exists++;\n        });\n\n        if (exists) {\n          state.selectedPlaces[index] = element.places; //time\n\n          if (payload.stay_time != null) {\n            state.selectedTimes[index] = payload.stay_time;\n          }\n        }\n      }\n    });\n  }\n\n  var paToIndex = payload.fromPA - 1;\n  var olxIdVendor = process.env.VUE_APP_ID_VENDOR_OLX;\n  var idvendor = JSON.parse(localStorage.getItem('user')).vendor_idvendor;\n  payload.dataList.forEach(function (element, index) {\n    var x = paToIndex + index;\n\n    if (state.checked[x] == null) {\n      state.checked[x] = false;\n\n      if (idvendor == olxIdVendor) {\n        //olx\n        if (element.client_enterprise_identerprise == payload.identerprise) {\n          state.assignedDrivers[x] = element;\n          state.checked[x] = true;\n        }\n      } else {\n        //places\n        if (element.places != null) {\n          if (element.stay_time != null) {\n            state.selectedTimes[x] = element.stay_time;\n          }\n\n          var exists = 0;\n          payload.places.forEach(function (place) {\n            if (element.places.idplaces == place.idplaces) exists++;\n          });\n\n          if (exists) {\n            state.selectedPlaces[x] = element.places;\n\n            if (element.client_enterprise_identerprise == payload.identerprise) {\n              if (payload.idplaces != null) {\n                if (state.selectedPlaces[x].idplaces == payload.idplaces) {\n                  state.assignedDrivers[x] = element;\n                  state.checked[x] = true;\n                }\n              } else {\n                state.assignedDrivers[x] = element;\n                state.checked[x] = true;\n              } //time\n\n\n              if (payload.stay_time != null && state.checked[x]) {\n                state.selectedTimes[x] = payload.stay_time;\n              }\n            }\n          }\n        }\n      }\n    }\n  });\n  state.listDriverAssignee = payload.dataList;\n  state.driverTotal = payload.total;\n  state.paginate.nextClick = payload.nextC;\n  state.paginate.prevClick = payload.prevC;\n  state.paginate.firstPage = payload.firstP;\n  state.paginate.fromP = payload.fromPA;\n}), _defineProperty(_mutation$SET_REQUEST, mutation.SET_LIST_DRIVER, function (state, payload) {\n  state.listDriver = payload.dataList;\n  state.driverTotal = payload.total;\n  state.paginate.nextClick = payload.nextC;\n  state.paginate.prevClick = payload.prevC;\n  state.paginate.firstPage = payload.firstP;\n  state.paginate.fromP = payload.fromPA;\n}), _defineProperty(_mutation$SET_REQUEST, mutation.SET_DRIVER_TYPE, function (state, payload) {\n  state.driverType = payload.dataList;\n}), _defineProperty(_mutation$SET_REQUEST, mutation.SET_DRIVER_DETAIL, function (state, payload) {\n  state.detailDriver = payload.forDriver;\n}), _defineProperty(_mutation$SET_REQUEST, mutation.SET_DRIVER_RES, function (state, payload) {\n  state.driver = payload.driverdata;\n}), _defineProperty(_mutation$SET_REQUEST, mutation.SET_DRIVER_ASSIGNEE, function (state, payload) {\n  state.driverAssignee = payload.dataList;\n}), _defineProperty(_mutation$SET_REQUEST, mutation.SET_DRIVER_ENTERPRISE, function (state, payload) {\n  state.driverEnterprise = payload.dataList;\n}), _defineProperty(_mutation$SET_REQUEST, mutation.SET_TOTAL_ACCOUNT_DRIVER, function (state, payload) {\n  state.totalAccountD = payload;\n}), _defineProperty(_mutation$SET_REQUEST, mutation.SET_LIST_REQ_DRIVER, function (state, payload) {\n  state.listReqDriver = payload;\n}), _mutation$SET_REQUEST);",{"version":3,"sources":["C:/Users/ASUS/Documents/GitHub/operdev/oper-customer/src/store/modules/driver/mutation.js"],"names":["mutation","SET_REQUEST_DETAILS","state","payload","requestDetails","RESET_REQUEST_DETAILS","SET_SEARCH_INDEX","searchIndex","SET_DROPDOWN_DRIVER","dataList","forEach","element","index","numrow","dropDown","SET_DRIVER_D_AVAILABLE","driverAvList","RESET_ASSIGNED_DRIVERS","assignedDrivers","checked","selectedPlaces","selectedTimes","SET_ASSIGNED_DRIVERS","selected_drivers","places","stay_time","exists","place","idplaces","paToIndex","fromPA","olxIdVendor","process","env","VUE_APP_ID_VENDOR_OLX","idvendor","JSON","parse","localStorage","getItem","vendor_idvendor","x","client_enterprise_identerprise","identerprise","listDriverAssignee","driverTotal","total","paginate","nextClick","nextC","prevClick","prevC","firstPage","firstP","fromP","SET_LIST_DRIVER","listDriver","SET_DRIVER_TYPE","driverType","SET_DRIVER_DETAIL","detailDriver","forDriver","SET_DRIVER_RES","driver","driverdata","SET_DRIVER_ASSIGNEE","driverAssignee","SET_DRIVER_ENTERPRISE","driverEnterprise","SET_TOTAL_ACCOUNT_DRIVER","totalAccountD","SET_LIST_REQ_DRIVER","listReqDriver"],"mappings":"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","sourcesContent":["import * as mutation from '../../mutation-types'\r\nexport default {\r\n    [mutation.SET_REQUEST_DETAILS](state, payload){\r\n        state.requestDetails = payload\r\n    },\r\n    [mutation.RESET_REQUEST_DETAILS](state, payload){\r\n        state.requestDetails = null\r\n    },\r\n    [mutation.SET_SEARCH_INDEX](state, payload){\r\n        state.searchIndex  = payload\r\n    },\r\n    [mutation.SET_DROPDOWN_DRIVER](state, payload){\r\n        payload.dataList.forEach((element, index) => {\r\n            element.numrow = index+1\r\n        })\r\n        state.dropDown  = payload.dataList\r\n    },\r\n    [mutation.SET_DRIVER_D_AVAILABLE](state, payload){\r\n        state.driverAvList  = payload.dataList\r\n    },\r\n    [mutation.RESET_ASSIGNED_DRIVERS](state){\r\n        state.assignedDrivers = null\r\n        state.checked = []\r\n        state.selectedPlaces = []\r\n        state.selectedTimes = []\r\n    },\r\n    [mutation.SET_ASSIGNED_DRIVERS](state, payload){\r\n        //get all selected drivers for first time connection\r\n        if(state.assignedDrivers == null){\r\n            state.assignedDrivers = payload.selected_drivers\r\n            payload.selected_drivers.forEach((element,index) => {\r\n                //places\r\n                if(element.places != null){\r\n                    if(element.stay_time != null){\r\n                        state.selectedTimes[index] = element.stay_time\r\n                    }\r\n\r\n                    var exists = 0;\r\n                    payload.places.forEach((place) => {\r\n                        if(element.places.idplaces == place.idplaces)\r\n                            exists++\r\n                    });\r\n                    if(exists){\r\n                        state.selectedPlaces[index] = element.places\r\n\r\n                        //time\r\n                        if(payload.stay_time != null){\r\n                            state.selectedTimes[index] = payload.stay_time\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        var paToIndex = payload.fromPA - 1\r\n        let olxIdVendor = process.env.VUE_APP_ID_VENDOR_OLX\r\n        let idvendor = JSON.parse(localStorage.getItem('user')).vendor_idvendor\r\n        payload.dataList.forEach((element, index) => {\r\n            let x = paToIndex + index\r\n            if(state.checked[x] == null){\r\n                state.checked[x] = false\r\n                \r\n                if(idvendor == olxIdVendor){\r\n                    //olx\r\n                    if(element.client_enterprise_identerprise == payload.identerprise){\r\n                        state.assignedDrivers[x] = element\r\n                        state.checked[x] = true\r\n                    }\r\n                }\r\n                else{\r\n                    //places\r\n                    if(element.places != null){\r\n                        if(element.stay_time != null){\r\n                            state.selectedTimes[x] = element.stay_time\r\n                        }\r\n\r\n                        var exists = 0;\r\n                        payload.places.forEach((place) => {\r\n                            if(element.places.idplaces == place.idplaces)\r\n                                exists++\r\n                        });\r\n                        if(exists){\r\n                            state.selectedPlaces[x] = element.places\r\n                            if(element.client_enterprise_identerprise == payload.identerprise){\r\n                                if(payload.idplaces != null){\r\n                                    if(state.selectedPlaces[x].idplaces == payload.idplaces){\r\n                                        state.assignedDrivers[x] = element\r\n                                        state.checked[x] = true\r\n                                    }\r\n                                } else {\r\n                                    state.assignedDrivers[x] = element\r\n                                    state.checked[x] = true\r\n                                }\r\n\r\n                                //time\r\n                                if(payload.stay_time != null && state.checked[x]){\r\n                                    state.selectedTimes[x] = payload.stay_time\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n\r\n        state.listDriverAssignee    = payload.dataList\r\n        state.driverTotal           = payload.total\r\n        state.paginate.nextClick    = payload.nextC\r\n        state.paginate.prevClick    = payload.prevC\r\n        state.paginate.firstPage    = payload.firstP\r\n        state.paginate.fromP        = payload.fromPA\r\n    },\r\n    [mutation.SET_LIST_DRIVER](state, payload){\r\n        state.listDriver            = payload.dataList\r\n        state.driverTotal           = payload.total\r\n        state.paginate.nextClick    = payload.nextC\r\n        state.paginate.prevClick    = payload.prevC\r\n        state.paginate.firstPage    = payload.firstP\r\n        state.paginate.fromP        = payload.fromPA\r\n    },\r\n    [mutation.SET_DRIVER_TYPE](state, payload){\r\n        state.driverType  = payload.dataList\r\n    },\r\n    [mutation.SET_DRIVER_DETAIL](state, payload){\r\n        state.detailDriver  = payload.forDriver\r\n    },\r\n    [mutation.SET_DRIVER_RES](state, payload){\r\n        state.driver               = payload.driverdata\r\n       \r\n    },\r\n    [mutation.SET_DRIVER_ASSIGNEE](state, payload){\r\n        state.driverAssignee         = payload.dataList\r\n       \r\n    },\r\n    [mutation.SET_DRIVER_ENTERPRISE](state, payload){\r\n        state.driverEnterprise         = payload.dataList\r\n    },\r\n    [mutation.SET_TOTAL_ACCOUNT_DRIVER](state, payload){\r\n        state.totalAccountD = payload\r\n    },\r\n    [mutation.SET_LIST_REQ_DRIVER](state, payload){\r\n        state.listReqDriver = payload\r\n    }\r\n};"]}]}